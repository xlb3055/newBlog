"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[9017],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},5662:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>h});var t=a(641);const n=[(0,t.Fv)('<h1 id="🚀-从零教你如何设计一个高并发-秒杀-系统" tabindex="-1"><a class="header-anchor" href="#🚀-从零教你如何设计一个高并发-秒杀-系统"><span>🚀 从零教你如何设计一个高并发“秒杀”系统？</span></a></h1><hr><h2 id="🧯-一句话介绍什么是秒杀" tabindex="-1"><a class="header-anchor" href="#🧯-一句话介绍什么是秒杀"><span>🧯 一句话介绍什么是秒杀？</span></a></h2><blockquote><p>秒杀（flash sale）= 瞬间有大量用户同时请求一个极少的库存资源（比如抢 10 台手机，100 万人点进来）</p></blockquote><p>它是对系统<strong>并发能力、限流策略、数据一致性、业务稳定性</strong>的全方位考验。</p><hr><h2 id="🎯-秒杀系统的核心难点-你必须解决" tabindex="-1"><a class="header-anchor" href="#🎯-秒杀系统的核心难点-你必须解决"><span>🎯 秒杀系统的核心难点（你必须解决）</span></a></h2><ol><li><strong>瞬时流量暴涨</strong>：百万请求在 1 秒内涌入</li><li><strong>防止超卖</strong>：库存不能卖超</li><li><strong>用户去重</strong>：一个用户只能买一次</li><li><strong>系统抗压</strong>：要保护核心系统不被打挂</li><li><strong>兜底方案</strong>：即使秒杀失败，也能优雅提示</li></ol><hr><h2 id="🧠-架构设计整体思路-面试必讲" tabindex="-1"><a class="header-anchor" href="#🧠-架构设计整体思路-面试必讲"><span>🧠 架构设计整体思路（面试必讲）</span></a></h2><p>我们可以从 <strong>前端 → 接入层 → 服务层 → 缓存层 → 消息队列 → 数据库</strong> 这条链路来设计：</p><hr><h2 id="🧩-前端层设计" tabindex="-1"><a class="header-anchor" href="#🧩-前端层设计"><span>🧩 前端层设计</span></a></h2><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td>CDN 缓存</td><td>将静态资源（秒杀页面 HTML、JS）放入 CDN，减少服务压力</td></tr><tr><td>提前下发时间戳</td><td>客户端 JS 中提前获取服务器时间，控制按钮开放时间</td></tr><tr><td>点击节流</td><td>控制用户频繁点击、短时间多次请求</td></tr></tbody></table><hr><h2 id="🧰-网关接入层设计" tabindex="-1"><a class="header-anchor" href="#🧰-网关接入层设计"><span>🧰 网关接入层设计</span></a></h2><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td>IP 黑名单</td><td>一些明显刷子、异常行为的 IP 拦截</td></tr><tr><td>限流</td><td>网关对 URI 做 QPS 限流（如 Nginx + lua、Spring Gateway）</td></tr><tr><td>验证码</td><td>加一道图形验证，降低机器人攻击风险</td></tr></tbody></table><hr><h2 id="💡-后端服务层设计" tabindex="-1"><a class="header-anchor" href="#💡-后端服务层设计"><span>💡 后端服务层设计</span></a></h2><h3 id="✅-1-请求过滤-先过滤掉无资格人群" tabindex="-1"><a class="header-anchor" href="#✅-1-请求过滤-先过滤掉无资格人群"><span>✅ 1. 请求过滤（先过滤掉无资格人群）</span></a></h3><ul><li>用户是否登录？</li><li>是否已经参与过本场活动？</li><li>活动是否已经开始 / 结束？</li></ul><h3 id="✅-2-接口限流-控制单位时间并发量" tabindex="-1"><a class="header-anchor" href="#✅-2-接口限流-控制单位时间并发量"><span>✅ 2. 接口限流（控制单位时间并发量）</span></a></h3><p>可以用：</p><ul><li><strong>令牌桶</strong>：固定速率发放处理权限</li><li><strong>漏斗限流</strong>：固定速率处理，突发排队</li></ul><hr><h2 id="⚡-核心业务层-如何防止超卖" tabindex="-1"><a class="header-anchor" href="#⚡-核心业务层-如何防止超卖"><span>⚡ 核心业务层：如何防止超卖？</span></a></h2><p>重点就是 —— <strong>减库存的原子性 + 幂等性</strong></p><h3 id="做法一-redis-扣库存-推荐" tabindex="-1"><a class="header-anchor" href="#做法一-redis-扣库存-推荐"><span>做法一：Redis 扣库存（推荐）</span></a></h3><ol><li>活动开始前将库存数量预热到 Redis：</li></ol><div class="language-redis line-numbers-mode" data-highlighter="shiki" data-ext="redis" data-title="redis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SET goods_stock_1001 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>秒杀接口内 Redis 执行：</li></ol><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- Lua 脚本原子操作</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;get&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;decr&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优势：</p><ul><li>Redis 是内存级访问，极快</li><li>Lua 保证原子性，避免并发问题</li></ul><hr><h2 id="📥-引入消息队列-mq-做削峰" tabindex="-1"><a class="header-anchor" href="#📥-引入消息队列-mq-做削峰"><span>📥 引入消息队列（MQ）做削峰</span></a></h2><p>为什么还需要 MQ？</p><blockquote><p>因为 Redis 扣完库存后，后续下单逻辑仍然很重，比如创建订单、写库、通知支付…</p></blockquote><p>所以用 MQ 把下单流程拆出来，<strong>先响应“秒杀成功排队中”</strong>，异步下单。</p><h3 id="✅-秒杀逻辑分两步" tabindex="-1"><a class="header-anchor" href="#✅-秒杀逻辑分两步"><span>✅ 秒杀逻辑分两步：</span></a></h3><ol><li>用户请求 → Redis 扣库存 → MQ 入队</li><li>消费者异步监听 MQ → 创建订单 → 写数据库</li></ol><hr><h2 id="🛡️-幂等校验-数据库一致性" tabindex="-1"><a class="header-anchor" href="#🛡️-幂等校验-数据库一致性"><span>🛡️ 幂等校验 &amp; 数据库一致性</span></a></h2><table><thead><tr><th>问题</th><th>解决方法</th></tr></thead><tbody><tr><td>一个用户多次下单</td><td>Redis 或 DB 做幂等校验（Set）</td></tr><tr><td>超卖</td><td>Redis 扣库存为主，DB做二次校验</td></tr><tr><td>支付未完成订单</td><td>设置订单 TTL，超时回滚库存</td></tr></tbody></table><hr><h2 id="🧾-示例-核心逻辑伪代码-redis-mq" tabindex="-1"><a class="header-anchor" href="#🧾-示例-核心逻辑伪代码-redis-mq"><span>🧾 示例：核心逻辑伪代码（Redis + MQ）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSeckill</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> goodsId) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 幂等校验</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sismember</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;seckill_users_&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> goodsId, userId)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;你已参与过该秒杀&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 扣库存</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;seckill_stock_&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> goodsId);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (stock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;商品已抢光&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 加入已抢用户</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sadd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;seckill_users_&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> goodsId, userId);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 发送 MQ 下单</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    mq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;seckill_order&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(userId, goodsId));</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;排队中，请稍后...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-秒杀系统完整架构图-建议配图" tabindex="-1"><a class="header-anchor" href="#✅-秒杀系统完整架构图-建议配图"><span>✅ 秒杀系统完整架构图（建议配图）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>用户 → 网关限流 → 业务接口层 → Redis 扣库存 → MQ 下单 → DB 落库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🧠-常见优化点" tabindex="-1"><a class="header-anchor" href="#🧠-常见优化点"><span>🧠 常见优化点</span></a></h2><table><thead><tr><th>优化点</th><th>描述</th></tr></thead><tbody><tr><td>本地缓存活动配置</td><td>降低每次访问数据库</td></tr><tr><td>分段库存预热</td><td>拆分库存到多个 Redis Key，降低热点</td></tr><tr><td>动态验证码</td><td>开始前 1 分钟才发验证码，提高防刷效果</td></tr><tr><td>队列排队可视化</td><td>返回前端“排队中界面”，优化用户体验</td></tr></tbody></table><hr><h2 id="💡-总结归纳" tabindex="-1"><a class="header-anchor" href="#💡-总结归纳"><span>💡 总结归纳</span></a></h2><blockquote><p>秒杀系统的本质是控制并发洪峰流量的过程，通过前端减压、接入层限流、Redis 扣库存、MQ 削峰、幂等校验等手段层层保护核心系统，并且需要做到高性能、高可用、高一致性。</p></blockquote><hr>',57)],l={},e=(0,a(6262).A)(l,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,n)}]]),h=JSON.parse('{"path":"/tech/%E5%9C%BA%E6%99%AF/%E7%A7%92%E6%9D%80.html","title":"🚀 从零教你如何设计一个高并发“秒杀”系统？","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["后端"],"tag":["Java","面试","场景"],"description":"🚀 从零教你如何设计一个高并发“秒杀”系统？ 🧯 一句话介绍什么是秒杀？ 秒杀（flash sale）= 瞬间有大量用户同时请求一个极少的库存资源（比如抢 10 台手机，100 万人点进来） 它是对系统并发能力、限流策略、数据一致性、业务稳定性的全方位考验。 🎯 秒杀系统的核心难点（你必须解决） 瞬时流量暴涨：百万请求在 1 秒内涌入 防止超卖：...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/tech/%E5%9C%BA%E6%99%AF/%E7%A7%92%E6%9D%80.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"🚀 从零教你如何设计一个高并发“秒杀”系统？"}],["meta",{"property":"og:description","content":"🚀 从零教你如何设计一个高并发“秒杀”系统？ 🧯 一句话介绍什么是秒杀？ 秒杀（flash sale）= 瞬间有大量用户同时请求一个极少的库存资源（比如抢 10 台手机，100 万人点进来） 它是对系统并发能力、限流策略、数据一致性、业务稳定性的全方位考验。 🎯 秒杀系统的核心难点（你必须解决） 瞬时流量暴涨：百万请求在 1 秒内涌入 防止超卖：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T16:10:15.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"场景"}],["meta",{"property":"article:modified_time","content":"2025-07-14T16:10:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🚀 从零教你如何设计一个高并发“秒杀”系统？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T16:10:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"🧯 一句话介绍什么是秒杀？","slug":"🧯-一句话介绍什么是秒杀","link":"#🧯-一句话介绍什么是秒杀","children":[]},{"level":2,"title":"🎯 秒杀系统的核心难点（你必须解决）","slug":"🎯-秒杀系统的核心难点-你必须解决","link":"#🎯-秒杀系统的核心难点-你必须解决","children":[]},{"level":2,"title":"🧠 架构设计整体思路（面试必讲）","slug":"🧠-架构设计整体思路-面试必讲","link":"#🧠-架构设计整体思路-面试必讲","children":[]},{"level":2,"title":"🧩 前端层设计","slug":"🧩-前端层设计","link":"#🧩-前端层设计","children":[]},{"level":2,"title":"🧰 网关接入层设计","slug":"🧰-网关接入层设计","link":"#🧰-网关接入层设计","children":[]},{"level":2,"title":"💡 后端服务层设计","slug":"💡-后端服务层设计","link":"#💡-后端服务层设计","children":[{"level":3,"title":"✅ 1. 请求过滤（先过滤掉无资格人群）","slug":"✅-1-请求过滤-先过滤掉无资格人群","link":"#✅-1-请求过滤-先过滤掉无资格人群","children":[]},{"level":3,"title":"✅ 2. 接口限流（控制单位时间并发量）","slug":"✅-2-接口限流-控制单位时间并发量","link":"#✅-2-接口限流-控制单位时间并发量","children":[]}]},{"level":2,"title":"⚡ 核心业务层：如何防止超卖？","slug":"⚡-核心业务层-如何防止超卖","link":"#⚡-核心业务层-如何防止超卖","children":[{"level":3,"title":"做法一：Redis 扣库存（推荐）","slug":"做法一-redis-扣库存-推荐","link":"#做法一-redis-扣库存-推荐","children":[]}]},{"level":2,"title":"📥 引入消息队列（MQ）做削峰","slug":"📥-引入消息队列-mq-做削峰","link":"#📥-引入消息队列-mq-做削峰","children":[{"level":3,"title":"✅ 秒杀逻辑分两步：","slug":"✅-秒杀逻辑分两步","link":"#✅-秒杀逻辑分两步","children":[]}]},{"level":2,"title":"🛡️ 幂等校验 & 数据库一致性","slug":"🛡️-幂等校验-数据库一致性","link":"#🛡️-幂等校验-数据库一致性","children":[]},{"level":2,"title":"🧾 示例：核心逻辑伪代码（Redis + MQ）","slug":"🧾-示例-核心逻辑伪代码-redis-mq","link":"#🧾-示例-核心逻辑伪代码-redis-mq","children":[]},{"level":2,"title":"✅ 秒杀系统完整架构图（建议配图）","slug":"✅-秒杀系统完整架构图-建议配图","link":"#✅-秒杀系统完整架构图-建议配图","children":[]},{"level":2,"title":"🧠 常见优化点","slug":"🧠-常见优化点","link":"#🧠-常见优化点","children":[]},{"level":2,"title":"💡 总结归纳","slug":"💡-总结归纳","link":"#💡-总结归纳","children":[]}],"git":{"createdTime":1752129326000,"updatedTime":1752509415000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":2}]},"readingTime":{"minutes":3.49,"words":1046},"filePathRelative":"tech/场景/秒杀.md","localizedDate":"2025年7月10日","excerpt":"\\n<hr>\\n<h2>🧯 一句话介绍什么是秒杀？</h2>\\n<blockquote>\\n<p>秒杀（flash sale）= 瞬间有大量用户同时请求一个极少的库存资源（比如抢 10 台手机，100 万人点进来）</p>\\n</blockquote>\\n<p>它是对系统<strong>并发能力、限流策略、数据一致性、业务稳定性</strong>的全方位考验。</p>\\n<hr>\\n<h2>🎯 秒杀系统的核心难点（你必须解决）</h2>\\n<ol>\\n<li><strong>瞬时流量暴涨</strong>：百万请求在 1 秒内涌入</li>\\n<li><strong>防止超卖</strong>：库存不能卖超</li>\\n<li><strong>用户去重</strong>：一个用户只能买一次</li>\\n<li><strong>系统抗压</strong>：要保护核心系统不被打挂</li>\\n<li><strong>兜底方案</strong>：即使秒杀失败，也能优雅提示</li>\\n</ol>","autoDesc":true}')}}]);