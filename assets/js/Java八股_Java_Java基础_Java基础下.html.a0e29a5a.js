"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[1556],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},7398:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const l=[(0,n.Fv)('<h1 id="java基础面试题下" tabindex="-1"><a class="header-anchor" href="#java基础面试题下"><span>Java基础面试题下</span></a></h1><hr><h1 id="java-基础知识面试问题详解" tabindex="-1"><a class="header-anchor" href="#java-基础知识面试问题详解"><span>Java 基础知识面试问题详解</span></a></h1><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><h3 id="_1-exception-和-error-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-exception-和-error-有什么区别"><span>1. Exception 和 Error 有什么区别？</span></a></h3><ul><li><strong>Exception</strong>：表示程序在运行时的非严重问题，是可以捕获并处理的异常。如文件未找到（<code>FileNotFoundException</code>）或数组越界（<code>ArrayIndexOutOfBoundsException</code>）。</li><li><strong>Error</strong>：表示系统级的严重错误，通常无法恢复或处理，如内存不足（<code>OutOfMemoryError</code>）。程序一般不需要处理 <code>Error</code>。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 数组越界</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArrayIndexOutOfBoundsException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;捕获到 Exception: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-checked-exception-和-unchecked-exception-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-checked-exception-和-unchecked-exception-有什么区别"><span>2. Checked Exception 和 Unchecked Exception 有什么区别？</span></a></h3><ul><li><strong>Checked Exception</strong>：在编译时被强制检查，必须使用 <code>try-catch</code> 或 <code>throws</code> 声明处理，如 <code>IOException</code>。</li><li><strong>Unchecked Exception</strong>：编译时不强制检查，通常是程序逻辑错误导致的，如 <code>NullPointerException</code>。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> readFile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fileName) throws IOException {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    BufferedReader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BufferedReader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(fileName))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 如果文件不存在，这里会抛出 IOException</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-throwable-类常用方法有哪些" tabindex="-1"><a class="header-anchor" href="#_3-throwable-类常用方法有哪些"><span>3. Throwable 类常用方法有哪些？</span></a></h3><ul><li><strong><code>getMessage()</code></strong>：返回异常的简短描述。</li><li><strong><code>printStackTrace()</code></strong>：打印异常的详细堆栈跟踪，帮助定位错误。</li><li><strong><code>getCause()</code></strong>：返回引发此异常的原因。</li></ul><h3 id="_4-try-catch-finally-如何使用" tabindex="-1"><a class="header-anchor" href="#_4-try-catch-finally-如何使用"><span>4. try-catch-finally 如何使用？</span></a></h3><ul><li><strong>try</strong>：包含可能抛出异常的代码。</li><li><strong>catch</strong>：用于捕获并处理异常。</li><li><strong>finally</strong>：无论是否有异常，<code>finally</code> 中的代码始终会执行。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 将会抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;捕获到异常: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是 finally 块，始终执行&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-finally-中的代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#_5-finally-中的代码一定会执行吗"><span>5. finally 中的代码一定会执行吗？</span></a></h3><ul><li><strong>通常会执行</strong>，即使 <code>try</code> 或 <code>catch</code> 块有 <code>return</code> 语句。</li><li><strong>特殊情况</strong>：JVM 崩溃或执行 <code>System.exit()</code> 会导致 <code>finally</code> 不执行。</li></ul><h3 id="_6-如何使用-try-with-resources-代替-try-catch-finally" tabindex="-1"><a class="header-anchor" href="#_6-如何使用-try-with-resources-代替-try-catch-finally"><span>6. 如何使用 try-with-resources 代替 try-catch-finally？</span></a></h3><ul><li><strong>try-with-resources</strong>：自动关闭实现了 <code>AutoCloseable</code> 接口的资源，如文件、数据库连接等。相比手动关闭资源更安全。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BufferedReader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BufferedReader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;file.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">))) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;文件读取失败&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-异常使用有哪些需要注意的地方" tabindex="-1"><a class="header-anchor" href="#_7-异常使用有哪些需要注意的地方"><span>7. 异常使用有哪些需要注意的地方？</span></a></h3><ul><li>避免使用 <code>catch(Exception e)</code> 捕获所有异常，因为这可能掩盖程序中的错误。</li><li>捕获后尽量提供有用的信息，而不是简单地打印异常信息。</li></ul><hr><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="_1-什么是泛型-有什么作用" tabindex="-1"><a class="header-anchor" href="#_1-什么是泛型-有什么作用"><span>1. 什么是泛型？有什么作用？</span></a></h3><ul><li><strong>泛型</strong>：允许类和方法可以操作各种不同数据类型，而不必指定特定的类型，保证代码的复用性和类型安全性。</li></ul><h3 id="_2-泛型的使用方式有哪几种" tabindex="-1"><a class="header-anchor" href="#_2-泛型的使用方式有哪几种"><span>2. 泛型的使用方式有哪几种？</span></a></h3><ul><li><strong>泛型类</strong>：例如 <code>List&lt;T&gt;</code>。</li><li><strong>泛型方法</strong>：如 <code>&lt;T&gt; T getData(T data)</code>。</li><li><strong>泛型接口</strong>：如 <code>Comparable&lt;T&gt;</code>。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 泛型类示例</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> content; }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> content; }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Box</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> integerBox </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">integerBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">integerBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-项目中哪里用到了泛型" tabindex="-1"><a class="header-anchor" href="#_3-项目中哪里用到了泛型"><span>3. 项目中哪里用到了泛型？</span></a></h3><ul><li>泛型在 Java 集合框架中大量使用，如 <code>List&lt;T&gt;</code>、<code>Map&lt;K, V&gt;</code>，可以确保集合中的元素类型一致，避免类型转换错误。</li></ul><hr><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><h3 id="_1-何谓反射" tabindex="-1"><a class="header-anchor" href="#_1-何谓反射"><span>1. 何谓反射？</span></a></h3><ul><li><strong>反射</strong>：Java 的一种机制，允许在运行时检查和修改类、方法和属性的信息。</li></ul><h3 id="_2-反射的优缺点" tabindex="-1"><a class="header-anchor" href="#_2-反射的优缺点"><span>2. 反射的优缺点？</span></a></h3><ul><li><strong>优点</strong>：提高灵活性，可以动态加载类，适合编写框架、插件等。</li><li><strong>缺点</strong>：性能开销较大，不安全（可以访问私有成员），代码可读性差。</li></ul><h3 id="_3-反射的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-反射的应用场景"><span>3. 反射的应用场景？</span></a></h3><ul><li>框架（如 Spring）、动态代理、依赖注入（如注解驱动）等。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.util.ArrayList&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> addMethod </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;add&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">addMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;反射添加的元素&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="_1-何谓注解" tabindex="-1"><a class="header-anchor" href="#_1-何谓注解"><span>1. 何谓注解？</span></a></h3><ul><li><strong>注解</strong>：用于给代码提供元数据的标记，注解信息可用于编译检查或运行时处理。</li></ul><h3 id="_2-注解的解析方法有哪几种" tabindex="-1"><a class="header-anchor" href="#_2-注解的解析方法有哪几种"><span>2. 注解的解析方法有哪几种？</span></a></h3><ul><li><strong>编译时解析</strong>：通过注解处理器（APT）在编译阶段解析。</li><li><strong>运行时解析</strong>：通过反射机制读取和解析注解。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> MyAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MyAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;这是一个自定义注解&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi"><span>SPI</span></a></h2><h3 id="_1-何谓-spi" tabindex="-1"><a class="header-anchor" href="#_1-何谓-spi"><span>1. 何谓 SPI？</span></a></h3><ul><li><strong>SPI</strong>（Service Provider Interface）：Java 提供的一种服务提供机制，允许在运行时动态加载实现类。</li></ul><h3 id="_2-spi-和-api-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-spi-和-api-有什么区别"><span>2. SPI 和 API 有什么区别？</span></a></h3><ul><li><strong>API</strong>：定义程序调用的接口。</li><li><strong>SPI</strong>：定义服务提供者接口，便于实现多态和扩展。</li></ul><h3 id="_3-spi-的优缺点" tabindex="-1"><a class="header-anchor" href="#_3-spi-的优缺点"><span>3. SPI 的优缺点？</span></a></h3><ul><li><strong>优点</strong>：插件化设计，提高扩展性。</li><li><strong>缺点</strong>：加载实现类时有性能开销，配置较复杂。</li></ul><hr><h2 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化"><span>序列化和反序列化</span></a></h2><h3 id="_1-什么是序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_1-什么是序列化和反序列化"><span>1. 什么是序列化和反序列化？</span></a></h3><ul><li><strong>序列化</strong>：将对象转换为字节流，以便存储或传输。</li><li><strong>反序列化</strong>：将字节流转换回对象。</li></ul><h3 id="_2-如果有些字段不想进行序列化怎么办" tabindex="-1"><a class="header-anchor" href="#_2-如果有些字段不想进行序列化怎么办"><span>2. 如果有些字段不想进行序列化怎么办？</span></a></h3><ul><li>使用 <code>transient</code> 关键字标记不参与序列化的字段。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transient</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // age 字段不会被序列化</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-常见序列化协议有哪些" tabindex="-1"><a class="header-anchor" href="#_3-常见序列化协议有哪些"><span>3. 常见序列化协议有哪些？</span></a></h3><ul><li>Java 序列化、JSON、XML、Protocol Buffers、Kryo 等。</li></ul><h3 id="_4-为什么不推荐使用-jdk-自带的序列化" tabindex="-1"><a class="header-anchor" href="#_4-为什么不推荐使用-jdk-自带的序列化"><span>4. 为什么不推荐使用 JDK 自带的序列化？</span></a></h3><ul><li><strong>效率低下</strong>，生成的字节流较大，存在安全漏洞，推荐使用其他序列化方式。</li></ul><hr><h2 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o"><span>I/O</span></a></h2><h3 id="_1-java-io-流了解吗" tabindex="-1"><a class="header-anchor" href="#_1-java-io-流了解吗"><span>1. Java IO 流了解吗？</span></a></h3><ul><li>Java I/O 提供了多种输入输出流操作，支持文件读写、网络通信等。</li></ul><h3 id="_2-i-o-流为什么要分为字节流和字符流呢" tabindex="-1"><a class="header-anchor" href="#_2-i-o-流为什么要分为字节流和字符流呢"><span>2. I/O 流为什么要分为字节流和字符流呢？</span></a></h3><ul><li><strong>字节流</strong>：处理二进制数据，如图片、视频。</li><li><strong>字符流</strong>：处理文本文件，自动处理 Unicode 字符。</li></ul><h3 id="_3-java-io-中的设计模式有哪些" tabindex="-1"><a class="header-anchor" href="#_3-java-io-中的设计模式有哪些"><span>3. Java IO 中的设计模式有哪些？</span></a></h3><ul><li><strong>装饰器模式</strong>：增强流的功能，例如 <code>BufferedReader</code> 装饰 <code>FileReader</code>。</li><li><strong>适配器模式</strong>：<code>InputStreamReader</code> 将字节流适配为字符流。</li></ul><h3 id="_4-bio、nio-和-aio-的区别" tabindex="-1"><a class="header-anchor" href="#_4-bio、nio-和-aio-的区别"><span>4. BIO、NIO 和 AIO 的区别？</span></a></h3><ul><li><strong>BIO</strong>：每个连接对应一个线程，适合少量连接。</li><li><strong>NIO</strong>：一个线程管理多个连接，适合高并发场景。</li><li><strong>AIO</strong>：异步操作，支持超高并发，适合大规模 I/O 处理。</li></ul><hr><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><h3 id="_1-什么是语法糖" tabindex="-1"><a class="header-anchor" href="#_1-什么是语法糖"><span>1. 什么是语法糖？</span></a></h3><ul><li><strong>语法糖</strong>：使代码更简洁、可读的语言特性，本质不改变代码功能。</li></ul><h3 id="_2-java-中有哪些常见的语法糖" tabindex="-1"><a class="header-anchor" href="#_2-java-中有哪些常见的语法糖"><span>2. Java 中有哪些常见的语法糖？</span></a></h3><ul><li><strong>自动装箱/拆箱</strong>：<code>Integer i = 10;</code> 实际上编译器将 int 自动转换为 Integer。</li><li><strong>泛型</strong>：<code>List&lt;String&gt; list = new ArrayList&lt;&gt;();</code>。</li><li><strong>增强 for 循环</strong>：<code>for (String s : list)</code>。</li><li><strong>可变参数</strong>：<code>public void method(String... args)</code>。</li></ul><hr>',83)],e={},t=(0,a(6262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8B.html","title":"Java基础面试题下","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-10T00:00:00.000Z","category":["后端"],"tag":["Java","后端开发技巧"],"description":"Java基础面试题下 Java 基础知识面试问题详解 异常处理 1. Exception 和 Error 有什么区别？ Exception：表示程序在运行时的非严重问题，是可以捕获并处理的异常。如文件未找到（FileNotFoundException）或数组越界（ArrayIndexOutOfBoundsException）。 Error：表示系统级的...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Java基础面试题下"}],["meta",{"property":"og:description","content":"Java基础面试题下 Java 基础知识面试问题详解 异常处理 1. Exception 和 Error 有什么区别？ Exception：表示程序在运行时的非严重问题，是可以捕获并处理的异常。如文件未找到（FileNotFoundException）或数组越界（ArrayIndexOutOfBoundsException）。 Error：表示系统级的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"后端开发技巧"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础面试题下\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"1. Exception 和 Error 有什么区别？","slug":"_1-exception-和-error-有什么区别","link":"#_1-exception-和-error-有什么区别","children":[]},{"level":3,"title":"2. Checked Exception 和 Unchecked Exception 有什么区别？","slug":"_2-checked-exception-和-unchecked-exception-有什么区别","link":"#_2-checked-exception-和-unchecked-exception-有什么区别","children":[]},{"level":3,"title":"3. Throwable 类常用方法有哪些？","slug":"_3-throwable-类常用方法有哪些","link":"#_3-throwable-类常用方法有哪些","children":[]},{"level":3,"title":"4. try-catch-finally 如何使用？","slug":"_4-try-catch-finally-如何使用","link":"#_4-try-catch-finally-如何使用","children":[]},{"level":3,"title":"5. finally 中的代码一定会执行吗？","slug":"_5-finally-中的代码一定会执行吗","link":"#_5-finally-中的代码一定会执行吗","children":[]},{"level":3,"title":"6. 如何使用 try-with-resources 代替 try-catch-finally？","slug":"_6-如何使用-try-with-resources-代替-try-catch-finally","link":"#_6-如何使用-try-with-resources-代替-try-catch-finally","children":[]},{"level":3,"title":"7. 异常使用有哪些需要注意的地方？","slug":"_7-异常使用有哪些需要注意的地方","link":"#_7-异常使用有哪些需要注意的地方","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"1. 什么是泛型？有什么作用？","slug":"_1-什么是泛型-有什么作用","link":"#_1-什么是泛型-有什么作用","children":[]},{"level":3,"title":"2. 泛型的使用方式有哪几种？","slug":"_2-泛型的使用方式有哪几种","link":"#_2-泛型的使用方式有哪几种","children":[]},{"level":3,"title":"3. 项目中哪里用到了泛型？","slug":"_3-项目中哪里用到了泛型","link":"#_3-项目中哪里用到了泛型","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"1. 何谓反射？","slug":"_1-何谓反射","link":"#_1-何谓反射","children":[]},{"level":3,"title":"2. 反射的优缺点？","slug":"_2-反射的优缺点","link":"#_2-反射的优缺点","children":[]},{"level":3,"title":"3. 反射的应用场景？","slug":"_3-反射的应用场景","link":"#_3-反射的应用场景","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"1. 何谓注解？","slug":"_1-何谓注解","link":"#_1-何谓注解","children":[]},{"level":3,"title":"2. 注解的解析方法有哪几种？","slug":"_2-注解的解析方法有哪几种","link":"#_2-注解的解析方法有哪几种","children":[]}]},{"level":2,"title":"SPI","slug":"spi","link":"#spi","children":[{"level":3,"title":"1. 何谓 SPI？","slug":"_1-何谓-spi","link":"#_1-何谓-spi","children":[]},{"level":3,"title":"2. SPI 和 API 有什么区别？","slug":"_2-spi-和-api-有什么区别","link":"#_2-spi-和-api-有什么区别","children":[]},{"level":3,"title":"3. SPI 的优缺点？","slug":"_3-spi-的优缺点","link":"#_3-spi-的优缺点","children":[]}]},{"level":2,"title":"序列化和反序列化","slug":"序列化和反序列化","link":"#序列化和反序列化","children":[{"level":3,"title":"1. 什么是序列化和反序列化？","slug":"_1-什么是序列化和反序列化","link":"#_1-什么是序列化和反序列化","children":[]},{"level":3,"title":"2. 如果有些字段不想进行序列化怎么办？","slug":"_2-如果有些字段不想进行序列化怎么办","link":"#_2-如果有些字段不想进行序列化怎么办","children":[]},{"level":3,"title":"3. 常见序列化协议有哪些？","slug":"_3-常见序列化协议有哪些","link":"#_3-常见序列化协议有哪些","children":[]},{"level":3,"title":"4. 为什么不推荐使用 JDK 自带的序列化？","slug":"_4-为什么不推荐使用-jdk-自带的序列化","link":"#_4-为什么不推荐使用-jdk-自带的序列化","children":[]}]},{"level":2,"title":"I/O","slug":"i-o","link":"#i-o","children":[{"level":3,"title":"1. Java IO 流了解吗？","slug":"_1-java-io-流了解吗","link":"#_1-java-io-流了解吗","children":[]},{"level":3,"title":"2. I/O 流为什么要分为字节流和字符流呢？","slug":"_2-i-o-流为什么要分为字节流和字符流呢","link":"#_2-i-o-流为什么要分为字节流和字符流呢","children":[]},{"level":3,"title":"3. Java IO 中的设计模式有哪些？","slug":"_3-java-io-中的设计模式有哪些","link":"#_3-java-io-中的设计模式有哪些","children":[]},{"level":3,"title":"4. BIO、NIO 和 AIO 的区别？","slug":"_4-bio、nio-和-aio-的区别","link":"#_4-bio、nio-和-aio-的区别","children":[]}]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[{"level":3,"title":"1. 什么是语法糖？","slug":"_1-什么是语法糖","link":"#_1-什么是语法糖","children":[]},{"level":3,"title":"2. Java 中有哪些常见的语法糖？","slug":"_2-java-中有哪些常见的语法糖","link":"#_2-java-中有哪些常见的语法糖","children":[]}]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":5.16,"words":1547},"filePathRelative":"Java八股/Java/Java基础/Java基础下.md","localizedDate":"2024年11月10日","excerpt":"\\n<hr>\\n<h1>Java 基础知识面试问题详解</h1>\\n<h2>异常处理</h2>\\n<h3>1. Exception 和 Error 有什么区别？</h3>\\n<ul>\\n<li><strong>Exception</strong>：表示程序在运行时的非严重问题，是可以捕获并处理的异常。如文件未找到（<code>FileNotFoundException</code>）或数组越界（<code>ArrayIndexOutOfBoundsException</code>）。</li>\\n<li><strong>Error</strong>：表示系统级的严重错误，通常无法恢复或处理，如内存不足（<code>OutOfMemoryError</code>）。程序一般不需要处理 <code>Error</code>。</li>\\n</ul>","autoDesc":true}')}}]);