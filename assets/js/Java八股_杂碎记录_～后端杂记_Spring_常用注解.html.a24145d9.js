"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[9848],{6262:(t,e)=>{e.A=(t,e)=>{const d=t.__vccOpts||t;for(const[t,o]of e)d[t]=o;return d}},936:(t,e,d)=>{d.r(e),d.d(e,{comp:()=>n,data:()=>a});var o=d(641);const r=[(0,o.Fv)('<h1 id="✅-spring-boot-常用注解" tabindex="-1"><a class="header-anchor" href="#✅-spring-boot-常用注解"><span>✅ Spring Boot 常用注解</span></a></h1><hr><h3 id="🌐-一、web-层请求处理注解" tabindex="-1"><a class="header-anchor" href="#🌐-一、web-层请求处理注解"><span>🌐 一、Web 层请求处理注解</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@RestController</code></td><td>组合注解：<code>@Controller</code> + <code>@ResponseBody</code>，返回 JSON</td></tr><tr><td><code>@Controller</code></td><td>返回视图名称，用于页面跳转</td></tr><tr><td><code>@ResponseBody</code></td><td>方法返回 JSON 体</td></tr><tr><td><code>@RequestMapping</code></td><td>通用路由映射，支持所有 HTTP 方法</td></tr><tr><td><code>@GetMapping</code> / <code>@PostMapping</code> / <code>@PutMapping</code> / <code>@DeleteMapping</code> / <code>@PatchMapping</code></td><td>映射具体 HTTP 方法请求</td></tr><tr><td><code>@PathVariable</code></td><td>获取 URL 路径变量 <code>/user/{id}</code></td></tr><tr><td><code>@RequestParam</code></td><td>获取 query 参数 <code>/search?name=Tom</code></td></tr><tr><td><code>@RequestHeader</code></td><td>获取请求头信息</td></tr><tr><td><code>@RequestBody</code></td><td>接收 JSON 对象并绑定到 Java Bean</td></tr><tr><td><code>@ResponseStatus</code></td><td>设置响应状态码，如 201 Created</td></tr><tr><td><code>@CrossOrigin</code></td><td>启用跨域请求支持</td></tr><tr><td><code>@ExceptionHandler</code></td><td>局部异常处理方法</td></tr><tr><td><code>@RestControllerAdvice</code></td><td>全局异常处理类（结合 <code>@ExceptionHandler</code> 使用）</td></tr></tbody></table><hr><h3 id="🧩-二、依赖注入与-bean-管理注解" tabindex="-1"><a class="header-anchor" href="#🧩-二、依赖注入与-bean-管理注解"><span>🧩 二、依赖注入与 Bean 管理注解</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Autowired</code></td><td>按类型注入 Bean</td></tr><tr><td><code>@Qualifier</code></td><td>配合 <code>@Autowired</code>，指定注入 Bean 名称</td></tr><tr><td><code>@Resource</code></td><td>JSR-250，默认按名称注入</td></tr><tr><td><code>@Inject</code></td><td>JSR-330，按类型注入（等价于 <code>@Autowired</code>）</td></tr><tr><td><code>@Component</code></td><td>通用组件注解</td></tr><tr><td><code>@Service</code></td><td>服务层组件（语义化）</td></tr><tr><td><code>@Repository</code></td><td>DAO 层组件，支持异常转换</td></tr><tr><td><code>@ControllerAdvice</code></td><td>全局异常处理控制器</td></tr><tr><td><code>@Configuration</code></td><td>Java 配置类</td></tr><tr><td><code>@Bean</code></td><td>定义一个 Bean 方法（常用于手动构造实例）</td></tr><tr><td><code>@Primary</code></td><td>当存在多个候选 Bean 时被优先注入</td></tr><tr><td><code>@Lazy</code></td><td>延迟初始化 Bean</td></tr><tr><td><code>@Scope</code></td><td>设置 Bean 的作用域：singleton、prototype、request、session 等</td></tr></tbody></table><hr><h3 id="🛠-三、配置与属性注入注解" tabindex="-1"><a class="header-anchor" href="#🛠-三、配置与属性注入注解"><span>🛠 三、配置与属性注入注解</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Value</code></td><td>注入配置项值 <code>@Value(\\&quot;${app.name}\\&quot;)</code></td></tr><tr><td><code>@ConfigurationProperties</code></td><td>将配置文件映射到类上，支持批量注入</td></tr><tr><td><code>@PropertySource</code></td><td>指定额外的配置文件（如非 application.properties）</td></tr><tr><td><code>@EnableConfigurationProperties</code></td><td>启用 <code>@ConfigurationProperties</code> 的类注入</td></tr><tr><td><code>@Profile</code></td><td>激活某个环境配置（如 dev、test、prod）</td></tr><tr><td><code>@PropertySources</code></td><td>多个 <code>@PropertySource</code> 组合</td></tr></tbody></table><hr><h3 id="⚙️-四、自动配置与应用入口注解" tabindex="-1"><a class="header-anchor" href="#⚙️-四、自动配置与应用入口注解"><span>⚙️ 四、自动配置与应用入口注解</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@SpringBootApplication</code></td><td>启动类注解（组合注解）</td></tr><tr><td><code>@SpringBootConfiguration</code></td><td>Spring Boot 的配置类</td></tr><tr><td><code>@EnableAutoConfiguration</code></td><td>开启自动配置</td></tr><tr><td><code>@ComponentScan</code></td><td>指定组件扫描路径</td></tr><tr><td><code>@Import</code></td><td>导入配置类或 Bean</td></tr><tr><td><code>@ImportResource</code></td><td>导入 XML 配置文件</td></tr></tbody></table><hr><h3 id="🌀-五、aop、事件监听与生命周期" tabindex="-1"><a class="header-anchor" href="#🌀-五、aop、事件监听与生命周期"><span>🌀 五、AOP、事件监听与生命周期</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Aspect</code></td><td>AOP 切面类（配合 <code>@Before</code>, <code>@After</code>, <code>@Around</code>）</td></tr><tr><td><code>@Before</code> / <code>@After</code> / <code>@Around</code> / <code>@AfterReturning</code> / <code>@AfterThrowing</code></td><td>AOP 切入点逻辑控制</td></tr><tr><td><code>@PostConstruct</code></td><td>Bean 初始化后执行的方法</td></tr><tr><td><code>@PreDestroy</code></td><td>Bean 销毁前执行的方法</td></tr><tr><td><code>@EventListener</code></td><td>监听 Spring 事件（如 <code>ApplicationReadyEvent</code>）</td></tr></tbody></table><hr><h3 id="🔐-六、安全与认证相关注解-spring-security" tabindex="-1"><a class="header-anchor" href="#🔐-六、安全与认证相关注解-spring-security"><span>🔐 六、安全与认证相关注解（Spring Security）</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Secured</code></td><td>指定角色访问控制（Spring Security）</td></tr><tr><td><code>@PreAuthorize</code></td><td>方法执行前鉴权</td></tr><tr><td><code>@PostAuthorize</code></td><td>方法执行后鉴权</td></tr><tr><td><code>@EnableGlobalMethodSecurity</code></td><td>启用方法级安全注解</td></tr><tr><td><code>@WithMockUser</code></td><td>测试时模拟登录用户</td></tr></tbody></table><hr><h3 id="🧪-七、测试相关注解" tabindex="-1"><a class="header-anchor" href="#🧪-七、测试相关注解"><span>🧪 七、测试相关注解</span></a></h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@SpringBootTest</code></td><td>启动完整应用上下文</td></tr><tr><td><code>@WebMvcTest</code></td><td>启动 Web 层测试</td></tr><tr><td><code>@DataJpaTest</code></td><td>启动 JPA 层测试</td></tr><tr><td><code>@MockBean</code></td><td>注入 mock 对象替换真实 Bean</td></tr><tr><td><code>@TestConfiguration</code></td><td>专用于测试类的配置</td></tr><tr><td><code>@ContextConfiguration</code></td><td>加载测试上下文配置</td></tr></tbody></table><hr>',23)],c={},n=(0,d(6262).A)(c,[["render",function(t,e){return(0,o.uX)(),(0,o.CE)("div",null,r)}]]),a=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","title":"✅ Spring Boot 常用注解","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-08-11T00:00:00.000Z","category":["后端"],"tag":["Spring","后端开发技巧"],"sticky":true,"star":true,"description":"✅ Spring Boot 常用注解 🌐 一、Web 层请求处理注解 🧩 二、依赖注入与 Bean 管理注解 🛠 三、配置与属性注入注解 ⚙️ 四、自动配置与应用入口注解 🌀 五、AOP、事件监听与生命周期 🔐 六、安全与认证相关注解（Spring Security） 🧪 七、测试相关注解","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"✅ Spring Boot 常用注解"}],["meta",{"property":"og:description","content":"✅ Spring Boot 常用注解 🌐 一、Web 层请求处理注解 🧩 二、依赖注入与 Bean 管理注解 🛠 三、配置与属性注入注解 ⚙️ 四、自动配置与应用入口注解 🌀 五、AOP、事件监听与生命周期 🔐 六、安全与认证相关注解（Spring Security） 🧪 七、测试相关注解"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"后端开发技巧"}],["meta",{"property":"article:published_time","content":"2024-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"✅ Spring Boot 常用注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"🌐 一、Web 层请求处理注解","slug":"🌐-一、web-层请求处理注解","link":"#🌐-一、web-层请求处理注解","children":[]},{"level":3,"title":"🧩 二、依赖注入与 Bean 管理注解","slug":"🧩-二、依赖注入与-bean-管理注解","link":"#🧩-二、依赖注入与-bean-管理注解","children":[]},{"level":3,"title":"🛠 三、配置与属性注入注解","slug":"🛠-三、配置与属性注入注解","link":"#🛠-三、配置与属性注入注解","children":[]},{"level":3,"title":"⚙️ 四、自动配置与应用入口注解","slug":"⚙️-四、自动配置与应用入口注解","link":"#⚙️-四、自动配置与应用入口注解","children":[]},{"level":3,"title":"🌀 五、AOP、事件监听与生命周期","slug":"🌀-五、aop、事件监听与生命周期","link":"#🌀-五、aop、事件监听与生命周期","children":[]},{"level":3,"title":"🔐 六、安全与认证相关注解（Spring Security）","slug":"🔐-六、安全与认证相关注解-spring-security","link":"#🔐-六、安全与认证相关注解-spring-security","children":[]},{"level":3,"title":"🧪 七、测试相关注解","slug":"🧪-七、测试相关注解","link":"#🧪-七、测试相关注解","children":[]}],"git":{"createdTime":1749191081000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"Java八股/杂碎记录/～后端杂记/Spring/常用注解.md","localizedDate":"2024年8月11日","excerpt":"\\n<hr>\\n<h3>🌐 一、Web 层请求处理注解</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>注解</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>@RestController</code></td>\\n<td>组合注解：<code>@Controller</code> + <code>@ResponseBody</code>，返回 JSON</td>\\n</tr>\\n<tr>\\n<td><code>@Controller</code></td>\\n<td>返回视图名称，用于页面跳转</td>\\n</tr>\\n<tr>\\n<td><code>@ResponseBody</code></td>\\n<td>方法返回 JSON 体</td>\\n</tr>\\n<tr>\\n<td><code>@RequestMapping</code></td>\\n<td>通用路由映射，支持所有 HTTP 方法</td>\\n</tr>\\n<tr>\\n<td><code>@GetMapping</code> / <code>@PostMapping</code> / <code>@PutMapping</code> / <code>@DeleteMapping</code> / <code>@PatchMapping</code></td>\\n<td>映射具体 HTTP 方法请求</td>\\n</tr>\\n<tr>\\n<td><code>@PathVariable</code></td>\\n<td>获取 URL 路径变量 <code>/user/{id}</code></td>\\n</tr>\\n<tr>\\n<td><code>@RequestParam</code></td>\\n<td>获取 query 参数 <code>/search?name=Tom</code></td>\\n</tr>\\n<tr>\\n<td><code>@RequestHeader</code></td>\\n<td>获取请求头信息</td>\\n</tr>\\n<tr>\\n<td><code>@RequestBody</code></td>\\n<td>接收 JSON 对象并绑定到 Java Bean</td>\\n</tr>\\n<tr>\\n<td><code>@ResponseStatus</code></td>\\n<td>设置响应状态码，如 201 Created</td>\\n</tr>\\n<tr>\\n<td><code>@CrossOrigin</code></td>\\n<td>启用跨域请求支持</td>\\n</tr>\\n<tr>\\n<td><code>@ExceptionHandler</code></td>\\n<td>局部异常处理方法</td>\\n</tr>\\n<tr>\\n<td><code>@RestControllerAdvice</code></td>\\n<td>全局异常处理类（结合 <code>@ExceptionHandler</code> 使用）</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);