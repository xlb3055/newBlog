"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[3188],{6262:(t,n)=>{n.A=(t,n)=>{const s=t.__vccOpts||t;for(const[t,l]of n)s[t]=l;return s}},5753:(t,n,s)=>{s.r(n),s.d(n,{comp:()=>a,data:()=>i});var l=s(641);const r=[(0,l.Fv)('<h1 id="mysql常见面试题" tabindex="-1"><a class="header-anchor" href="#mysql常见面试题"><span>MySQL常见面试题</span></a></h1><hr><h2 id="_1-mysql-基础" tabindex="-1"><a class="header-anchor" href="#_1-mysql-基础"><span><strong>1. MySQL 基础</strong></span></a></h2><h3 id="_1-1-什么是关系型数据库" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是关系型数据库"><span><strong>1.1 什么是关系型数据库？</strong></span></a></h3><p>关系型数据库是一种使用 <strong>行和列的表格结构</strong> 存储和管理数据的数据库模型，数据之间通过关系（如主键和外键）关联。</p><ul><li>常见的关系型数据库有：MySQL、PostgreSQL、Oracle、SQL Server 等。</li></ul><hr><h3 id="_1-2-什么是-sql" tabindex="-1"><a class="header-anchor" href="#_1-2-什么是-sql"><span><strong>1.2 什么是 SQL？</strong></span></a></h3><p>SQL（Structured Query Language）是用于操作和查询关系型数据库的标准语言，包括数据定义、查询、更新和控制。</p><hr><h3 id="_1-3-什么是-mysql" tabindex="-1"><a class="header-anchor" href="#_1-3-什么是-mysql"><span><strong>1.3 什么是 MySQL？</strong></span></a></h3><p>MySQL 是一种 <strong>开源的关系型数据库管理系统</strong>，由 Oracle 公司维护，广泛应用于小型到大型项目的数据库管理。</p><hr><h3 id="_1-4-mysql-有什么优点" tabindex="-1"><a class="header-anchor" href="#_1-4-mysql-有什么优点"><span><strong>1.4 MySQL 有什么优点？</strong></span></a></h3><ul><li><strong>高性能</strong>：支持高并发，满足多数业务需求。</li><li><strong>可扩展性强</strong>：支持分布式存储和读写分离。</li><li><strong>支持多种存储引擎</strong>：如 InnoDB、MyISAM。</li><li><strong>开源和免费</strong>：拥有广泛的社区支持。</li><li><strong>支持多种操作系统</strong>：如 Windows、Linux、MacOS。</li></ul><hr><h3 id="_1-5-mysql-字段类型" tabindex="-1"><a class="header-anchor" href="#_1-5-mysql-字段类型"><span><strong>1.5 MySQL 字段类型</strong></span></a></h3><h4 id="_1-5-1-整数类型的-unsigned-属性有什么用" tabindex="-1"><a class="header-anchor" href="#_1-5-1-整数类型的-unsigned-属性有什么用"><span><strong>1.5.1 整数类型的 UNSIGNED 属性有什么用？</strong></span></a></h4><ul><li>UNSIGNED 表示无符号整数，范围为正数。</li><li><strong>用途</strong>：避免负值，提高存储范围。 <ul><li>示例：<code>TINYINT UNSIGNED</code> 的范围为 <code>0 ~ 255</code>，而 <code>TINYINT</code> 为 <code>-128 ~ 127</code>。</li></ul></li></ul><h4 id="_1-5-2-char-和-varchar-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-2-char-和-varchar-的区别是什么"><span><strong>1.5.2 CHAR 和 VARCHAR 的区别是什么？</strong></span></a></h4><ul><li><strong>CHAR</strong>：固定长度，存储定长数据，效率高。</li><li><strong>VARCHAR</strong>：可变长度，存储变长数据，节省空间。</li><li><strong>用法场景</strong>： <ul><li>CHAR：适合存储长度固定的数据（如身份证号）。</li><li>VARCHAR：适合存储长度不确定的数据（如用户名）。</li></ul></li></ul><h4 id="_1-5-3-varchar-100-和-varchar-10-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-3-varchar-100-和-varchar-10-的区别是什么"><span><strong>1.5.3 VARCHAR(100) 和 VARCHAR(10) 的区别是什么？</strong></span></a></h4><ul><li>VARCHAR(100) 表示最多可存储 100 个字符，VARCHAR(10) 最多存储 10 个字符。</li><li><strong>注意</strong>：VARCHAR 不会占用多余的存储空间，仅根据实际字符分配。</li></ul><h4 id="_1-5-4-decimal-和-float-double-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-4-decimal-和-float-double-的区别是什么"><span><strong>1.5.4 DECIMAL 和 FLOAT/DOUBLE 的区别是什么？</strong></span></a></h4><ul><li><strong>DECIMAL</strong>：精确存储，用于财务计算。</li><li><strong>FLOAT/DOUBLE</strong>：近似存储，速度快，但可能有精度损失。</li><li><strong>用法场景</strong>：涉及金额等场景时推荐使用 DECIMAL。</li></ul><h4 id="_1-5-5-为什么不推荐使用-text-和-blob" tabindex="-1"><a class="header-anchor" href="#_1-5-5-为什么不推荐使用-text-和-blob"><span><strong>1.5.5 为什么不推荐使用 TEXT 和 BLOB？</strong></span></a></h4><ul><li>不支持索引，查询性能差。</li><li>每次存取都需要额外的磁盘 I/O。</li><li>替代方案：尽量使用 VARCHAR 或 JSON 存储文本数据。</li></ul><h4 id="_1-5-6-datetime-和-timestamp-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-6-datetime-和-timestamp-的区别是什么"><span><strong>1.5.6 DATETIME 和 TIMESTAMP 的区别是什么？</strong></span></a></h4><ul><li><strong>DATETIME</strong>：存储绝对时间，不受时区影响。</li><li><strong>TIMESTAMP</strong>：存储相对时间，受时区影响，适合记录日志。</li></ul><h4 id="_1-5-7-null-和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-7-null-和-的区别是什么"><span><strong>1.5.7 NULL 和 &#39;&#39; 的区别是什么？</strong></span></a></h4><ul><li><strong>NULL</strong>：表示数据缺失或未知。</li><li><strong>&#39;&#39;</strong>：表示空字符串，长度为 0。</li><li><strong>注意</strong>：NULL 需要额外存储空间，尽量避免大量使用。</li></ul><h4 id="_1-5-8-boolean-类型如何表示" tabindex="-1"><a class="header-anchor" href="#_1-5-8-boolean-类型如何表示"><span><strong>1.5.8 Boolean 类型如何表示？</strong></span></a></h4><ul><li>MySQL 中没有 Boolean 类型，可以用 <strong>TINYINT(1)</strong> 表示： <ul><li>1：表示 TRUE。</li><li>0：表示 FALSE。</li></ul></li></ul><hr><h2 id="_2-mysql-存储引擎" tabindex="-1"><a class="header-anchor" href="#_2-mysql-存储引擎"><span><strong>2. MySQL 存储引擎</strong></span></a></h2><h3 id="_2-1-mysql-支持哪些存储引擎-默认使用哪个" tabindex="-1"><a class="header-anchor" href="#_2-1-mysql-支持哪些存储引擎-默认使用哪个"><span><strong>2.1 MySQL 支持哪些存储引擎？默认使用哪个？</strong></span></a></h3><ul><li>支持的引擎包括： <ul><li><strong>InnoDB</strong>：支持事务、行级锁、高并发，默认引擎。</li><li><strong>MyISAM</strong>：不支持事务，支持表级锁，适合只读场景。</li><li><strong>Memory</strong>：数据存储在内存中，速度快，数据不持久化。</li><li><strong>Archive</strong>：适合存储历史数据，支持高压缩率。</li></ul></li><li><strong>默认引擎</strong>：从 MySQL 5.5 开始，默认使用 InnoDB。</li></ul><hr><h3 id="_2-2-myisam-和-innodb-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-2-myisam-和-innodb-有什么区别"><span><strong>2.2 MyISAM 和 InnoDB 有什么区别？</strong></span></a></h3><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td><strong>事务支持</strong></td><td>不支持</td><td>支持</td></tr><tr><td><strong>锁类型</strong></td><td>表级锁</td><td>行级锁</td></tr><tr><td><strong>外键支持</strong></td><td>不支持</td><td>支持</td></tr><tr><td><strong>适用场景</strong></td><td>只读、大量查询</td><td>写多、事务、多用户并发</td></tr><tr><td><strong>崩溃恢复</strong></td><td>不支持</td><td>支持</td></tr></tbody></table><hr><h2 id="_3-mysql-事务" tabindex="-1"><a class="header-anchor" href="#_3-mysql-事务"><span><strong>3. MySQL 事务</strong></span></a></h2><h3 id="_3-1-何谓事务" tabindex="-1"><a class="header-anchor" href="#_3-1-何谓事务"><span><strong>3.1 何谓事务？</strong></span></a></h3><p>事务是指一组 SQL 操作的集合，这些操作要么全部执行成功，要么全部失败回滚。</p><h3 id="_3-2-并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#_3-2-并发事务带来的问题"><span><strong>3.2 并发事务带来的问题</strong></span></a></h3><ul><li><strong>脏读</strong>：读取了未提交的事务数据。</li><li><strong>不可重复读</strong>：同一事务中多次读取的数据不一致。</li><li><strong>幻读</strong>：事务中读取了新增的数据行。</li></ul><h3 id="_3-3-sql-标准的事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-3-sql-标准的事务隔离级别"><span><strong>3.3 SQL 标准的事务隔离级别</strong></span></a></h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>读未提交</strong></td><td>是</td><td>是</td><td>是</td></tr><tr><td><strong>读已提交</strong></td><td>否</td><td>是</td><td>是</td></tr><tr><td><strong>可重复读</strong></td><td>否</td><td>否</td><td>是</td></tr><tr><td><strong>串行化</strong></td><td>否</td><td>否</td><td>否</td></tr></tbody></table><ul><li><strong>MySQL 默认隔离级别</strong>：可重复读（REPEATABLE READ）。</li></ul><hr><h2 id="_4-mysql-锁" tabindex="-1"><a class="header-anchor" href="#_4-mysql-锁"><span><strong>4. MySQL 锁</strong></span></a></h2><h3 id="_4-1-表级锁和行级锁的区别" tabindex="-1"><a class="header-anchor" href="#_4-1-表级锁和行级锁的区别"><span><strong>4.1 表级锁和行级锁的区别</strong></span></a></h3><ul><li><strong>表级锁</strong>：锁住整张表，开销小，适合查询多的场景。</li><li><strong>行级锁</strong>：锁住指定的行，开销大，适合写多的场景。</li></ul><h3 id="_4-2-innodb-的行锁" tabindex="-1"><a class="header-anchor" href="#_4-2-innodb-的行锁"><span><strong>4.2 InnoDB 的行锁</strong></span></a></h3><ul><li><strong>共享锁</strong>：允许并发读取。</li><li><strong>排他锁</strong>：阻止其他事务访问。</li></ul><h3 id="_4-3-当前读和快照读" tabindex="-1"><a class="header-anchor" href="#_4-3-当前读和快照读"><span><strong>4.3 当前读和快照读</strong></span></a></h3><ul><li><strong>当前读</strong>：读取最新版本的数据，使用锁。</li><li><strong>快照读</strong>：读取历史版本数据，无锁操作，适合 MVCC。</li></ul><hr><h2 id="_5-mysql-性能优化" tabindex="-1"><a class="header-anchor" href="#_5-mysql-性能优化"><span><strong>5. MySQL 性能优化</strong></span></a></h2><h3 id="_5-1-常见-sql-优化手段" tabindex="-1"><a class="header-anchor" href="#_5-1-常见-sql-优化手段"><span><strong>5.1 常见 SQL 优化手段</strong></span></a></h3><ul><li><strong>使用索引</strong>：提高查询效率。</li><li>**避免 SELECT ***：只查询必要字段。</li><li><strong>减少 JOIN 的使用</strong>：尤其是多表连接。</li><li><strong>分区分表</strong>：优化大表查询性能。</li></ul><h3 id="_5-2-深度分页优化" tabindex="-1"><a class="header-anchor" href="#_5-2-深度分页优化"><span><strong>5.2 深度分页优化</strong></span></a></h3><ul><li>使用覆盖索引替代传统的 OFFSET。</li><li>示例：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIMIT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-3-数据冷热分离" tabindex="-1"><a class="header-anchor" href="#_5-3-数据冷热分离"><span><strong>5.3 数据冷热分离</strong></span></a></h3><ul><li><strong>热数据</strong>：高频访问的数据，存储在性能高的硬件中。</li><li><strong>冷数据</strong>：低频访问的数据，存储在廉价硬件或分库中。</li></ul><hr><h2 id="_6-学习资料推荐" tabindex="-1"><a class="header-anchor" href="#_6-学习资料推荐"><span><strong>6. 学习资料推荐</strong></span></a></h2><ol><li>官方文档：<a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener noreferrer">MySQL Reference Manual</a></li><li>《高性能 MySQL》—— 深入学习优化。</li><li>在线学习平台，如 LeetCode 的 SQL 题库。</li></ol><hr>',69)],e={},a=(0,s(6262).A)(e,[["render",function(t,n){return(0,l.uX)(),(0,l.CE)("div",null,r)}]]),i=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"MySQL常见面试题","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-22T00:00:00.000Z","category":["后端"],"tag":["MySQL","数据库"],"description":"MySQL常见面试题 1. MySQL 基础 1.1 什么是关系型数据库？ 关系型数据库是一种使用 行和列的表格结构 存储和管理数据的数据库模型，数据之间通过关系（如主键和外键）关联。 常见的关系型数据库有：MySQL、PostgreSQL、Oracle、SQL Server 等。 1.2 什么是 SQL？ SQL（Structured Query L...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"MySQL常见面试题"}],["meta",{"property":"og:description","content":"MySQL常见面试题 1. MySQL 基础 1.1 什么是关系型数据库？ 关系型数据库是一种使用 行和列的表格结构 存储和管理数据的数据库模型，数据之间通过关系（如主键和外键）关联。 常见的关系型数据库有：MySQL、PostgreSQL、Oracle、SQL Server 等。 1.2 什么是 SQL？ SQL（Structured Query L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL常见面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"1. MySQL 基础","slug":"_1-mysql-基础","link":"#_1-mysql-基础","children":[{"level":3,"title":"1.1 什么是关系型数据库？","slug":"_1-1-什么是关系型数据库","link":"#_1-1-什么是关系型数据库","children":[]},{"level":3,"title":"1.2 什么是 SQL？","slug":"_1-2-什么是-sql","link":"#_1-2-什么是-sql","children":[]},{"level":3,"title":"1.3 什么是 MySQL？","slug":"_1-3-什么是-mysql","link":"#_1-3-什么是-mysql","children":[]},{"level":3,"title":"1.4 MySQL 有什么优点？","slug":"_1-4-mysql-有什么优点","link":"#_1-4-mysql-有什么优点","children":[]},{"level":3,"title":"1.5 MySQL 字段类型","slug":"_1-5-mysql-字段类型","link":"#_1-5-mysql-字段类型","children":[]}]},{"level":2,"title":"2. MySQL 存储引擎","slug":"_2-mysql-存储引擎","link":"#_2-mysql-存储引擎","children":[{"level":3,"title":"2.1 MySQL 支持哪些存储引擎？默认使用哪个？","slug":"_2-1-mysql-支持哪些存储引擎-默认使用哪个","link":"#_2-1-mysql-支持哪些存储引擎-默认使用哪个","children":[]},{"level":3,"title":"2.2 MyISAM 和 InnoDB 有什么区别？","slug":"_2-2-myisam-和-innodb-有什么区别","link":"#_2-2-myisam-和-innodb-有什么区别","children":[]}]},{"level":2,"title":"3. MySQL 事务","slug":"_3-mysql-事务","link":"#_3-mysql-事务","children":[{"level":3,"title":"3.1 何谓事务？","slug":"_3-1-何谓事务","link":"#_3-1-何谓事务","children":[]},{"level":3,"title":"3.2 并发事务带来的问题","slug":"_3-2-并发事务带来的问题","link":"#_3-2-并发事务带来的问题","children":[]},{"level":3,"title":"3.3 SQL 标准的事务隔离级别","slug":"_3-3-sql-标准的事务隔离级别","link":"#_3-3-sql-标准的事务隔离级别","children":[]}]},{"level":2,"title":"4. MySQL 锁","slug":"_4-mysql-锁","link":"#_4-mysql-锁","children":[{"level":3,"title":"4.1 表级锁和行级锁的区别","slug":"_4-1-表级锁和行级锁的区别","link":"#_4-1-表级锁和行级锁的区别","children":[]},{"level":3,"title":"4.2 InnoDB 的行锁","slug":"_4-2-innodb-的行锁","link":"#_4-2-innodb-的行锁","children":[]},{"level":3,"title":"4.3 当前读和快照读","slug":"_4-3-当前读和快照读","link":"#_4-3-当前读和快照读","children":[]}]},{"level":2,"title":"5. MySQL 性能优化","slug":"_5-mysql-性能优化","link":"#_5-mysql-性能优化","children":[{"level":3,"title":"5.1 常见 SQL 优化手段","slug":"_5-1-常见-sql-优化手段","link":"#_5-1-常见-sql-优化手段","children":[]},{"level":3,"title":"5.2 深度分页优化","slug":"_5-2-深度分页优化","link":"#_5-2-深度分页优化","children":[]},{"level":3,"title":"5.3 数据冷热分离","slug":"_5-3-数据冷热分离","link":"#_5-3-数据冷热分离","children":[]}]},{"level":2,"title":"6. 学习资料推荐","slug":"_6-学习资料推荐","link":"#_6-学习资料推荐","children":[]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.4,"words":1319},"filePathRelative":"Java八股/数据库/MySQL/MySQL常见面试题.md","localizedDate":"2024年11月22日","excerpt":"\\n<hr>\\n<h2><strong>1. MySQL 基础</strong></h2>\\n<h3><strong>1.1 什么是关系型数据库？</strong></h3>\\n<p>关系型数据库是一种使用 <strong>行和列的表格结构</strong> 存储和管理数据的数据库模型，数据之间通过关系（如主键和外键）关联。</p>\\n<ul>\\n<li>常见的关系型数据库有：MySQL、PostgreSQL、Oracle、SQL Server 等。</li>\\n</ul>\\n<hr>\\n<h3><strong>1.2 什么是 SQL？</strong></h3>\\n<p>SQL（Structured Query Language）是用于操作和查询关系型数据库的标准语言，包括数据定义、查询、更新和控制。</p>","autoDesc":true}')}}]);