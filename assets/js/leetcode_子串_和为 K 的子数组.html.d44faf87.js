"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[4882],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},7258:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const l=[(0,n.Fv)('<h1 id="和为-k-的子数组" tabindex="-1"><a class="header-anchor" href="#和为-k-的子数组"><span>和为 K 的子数组</span></a></h1><hr><h3 id="问题理解" tabindex="-1"><a class="header-anchor" href="#问题理解"><span><strong>问题理解</strong></span></a></h3><p>我们需要找到 <strong>连续子数组</strong> 的和等于给定值 <code>k</code> 的个数。</p><p><strong>定义子数组</strong>：</p><ul><li>子数组是数组中任意连续的一段。</li><li>比如，对于数组 <code>[1, 2, 3, 4]</code>，长度为 3 的子数组有 <code>[1, 2, 3]</code> 和 <code>[2, 3, 4]</code>。</li></ul><hr><h3 id="解题核心-前缀和-哈希表" tabindex="-1"><a class="header-anchor" href="#解题核心-前缀和-哈希表"><span><strong>解题核心：前缀和 + 哈希表</strong></span></a></h3><h4 id="什么是前缀和" tabindex="-1"><a class="header-anchor" href="#什么是前缀和"><span><strong>什么是前缀和？</strong></span></a></h4><p>前缀和是一种用来快速计算子数组和的技巧。对于数组 <code>nums</code>，我们定义前缀和数组 <code>sum</code>：</p><ul><li><code>sum[i]</code> 表示从数组开始到第 <code>i</code> 个元素的累积和：<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum[i] = nums[0] + nums[1] + ... + nums[i]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="用前缀和计算任意子数组的和" tabindex="-1"><a class="header-anchor" href="#用前缀和计算任意子数组的和"><span><strong>用前缀和计算任意子数组的和</strong></span></a></h4><p>假设数组中有两个前缀和：</p><ul><li><code>sum[j]</code> 表示从开始到位置 <code>j</code> 的累积和。</li><li><code>sum[i-1]</code> 表示从开始到位置 <code>i-1</code> 的累积和。</li></ul><p>那么，从位置 <code>i</code> 到 <code>j</code> 的子数组和为：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>subarraySum(i, j) = sum[j] - sum[i-1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果这个和等于 <code>k</code>：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum[j] - sum[i-1] = k</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以转化为：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum[i-1] = sum[j] - k</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="用哈希表存储前缀和" tabindex="-1"><a class="header-anchor" href="#用哈希表存储前缀和"><span><strong>用哈希表存储前缀和</strong></span></a></h4><p>为了快速找到满足 <code>sum[i-1] = sum[j] - k</code> 的情况，我们使用一个哈希表 <code>map</code>：</p><ul><li><strong>键</strong>：前缀和 <code>sum[i]</code> 的值。</li><li><strong>值</strong>：当前前缀和出现的次数。</li></ul><p>每次计算到 <code>sum[j]</code> 时，检查哈希表中是否有 <code>sum[j] - k</code>：</p><ul><li>如果存在，则说明从某个位置到 <code>j</code> 的子数组和等于 <code>k</code>。</li><li>然后将当前的 <code>sum[j]</code> 添加到哈希表中，更新其出现的次数。</li></ul><hr><h3 id="算法详细步骤" tabindex="-1"><a class="header-anchor" href="#算法详细步骤"><span><strong>算法详细步骤</strong></span></a></h3><ol><li>初始化一个哈希表 <code>map</code>，存储前缀和： <ul><li>初始放入 <code>(0, 1)</code>，表示前缀和为 <code>0</code> 的情况出现过 1 次（便于处理边界情况）。</li></ul></li><li>遍历数组 <code>nums</code>，逐步计算前缀和 <code>sum[j]</code>。</li><li>对于每个前缀和 <code>sum[j]</code>： <ul><li>计算目标前缀和 <code>target = sum[j] - k</code>。</li><li>检查哈希表中是否存在 <code>target</code>： <ul><li>如果存在，累加 <code>target</code> 的出现次数到结果中。</li></ul></li><li>更新哈希表中 <code>sum[j]</code> 的出现次数。</li></ul></li><li>遍历完成后，返回结果。</li></ol><hr><h3 id="详细代码实现" tabindex="-1"><a class="header-anchor" href="#详细代码实现"><span><strong>详细代码实现</strong></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SubarraySumEqualsK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subarraySum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 初始化哈希表，记录前缀和出现次数</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 初始值：前缀和为 0 出现 1 次</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 当前的前缀和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 和为 k 的子数组个数</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 遍历数组</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 更新前缀和</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 计算当前前缀和是否存在目标前缀和</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">containsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(target)) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(target); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 累加目标前缀和的出现次数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 更新当前前缀和的出现次数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sum, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOrDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sum, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SubarraySumEqualsK</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solution</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SubarraySumEqualsK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 示例1</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nums1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> k1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subarraySum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums1, k1)); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: 2</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 示例2</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nums2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> k2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subarraySum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums2, k2)); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: 2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析"><span><strong>案例分析</strong></span></a></h3><h4 id="输入-nums-1-2-3-k-3" tabindex="-1"><a class="header-anchor" href="#输入-nums-1-2-3-k-3"><span>输入：<code>nums = [1, 2, 3], k = 3</code></span></a></h4><p><strong>步骤</strong>：</p><ol><li><p>初始化：</p><ul><li><code>sum = 0</code>，<code>count = 0</code>，<code>map = {0: 1}</code>。</li></ul></li><li><p>遍历数组：</p><ul><li><p>第 1 个元素 <code>num = 1</code>：</p><ul><li><code>sum = sum + num = 0 + 1 = 1</code>。</li><li>目标前缀和 <code>target = sum - k = 1 - 3 = -2</code> 不在 <code>map</code> 中。</li><li>更新 <code>map = {0: 1, 1: 1}</code>。</li></ul></li><li><p>第 2 个元素 <code>num = 2</code>：</p><ul><li><code>sum = sum + num = 1 + 2 = 3</code>。</li><li>目标前缀和 <code>target = sum - k = 3 - 3 = 0</code> 在 <code>map</code> 中，出现次数为 1。</li><li><code>count = count + map.get(target) = 0 + 1 = 1</code>。</li><li>更新 <code>map = {0: 1, 1: 1, 3: 1}</code>。</li></ul></li><li><p>第 3 个元素 <code>num = 3</code>：</p><ul><li><code>sum = sum + num = 3 + 3 = 6</code>。</li><li>目标前缀和 <code>target = sum - k = 6 - 3 = 3</code> 在 <code>map</code> 中，出现次数为 1。</li><li><code>count = count + map.get(target) = 1 + 1 = 2</code>。</li><li>更新 <code>map = {0: 1, 1: 1, 3: 1, 6: 1}</code>。</li></ul></li></ul></li></ol><p><strong>最终结果</strong>：<code>count = 2</code>。</p><hr><h3 id="时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#时间复杂度分析"><span><strong>时间复杂度分析</strong></span></a></h3><ol><li><p><strong>时间复杂度</strong>：</p><ul><li>遍历数组一次，时间复杂度为 <code>O(n)</code>。</li><li>哈希表的插入和查找操作为 <code>O(1)</code>。</li><li>总时间复杂度：<code>O(n)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：</p><ul><li>使用了一个哈希表存储前缀和，空间复杂度为 <code>O(n)</code>。</li></ul></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ol><li><p><strong>核心点</strong>：</p><ul><li>通过前缀和和哈希表，我们能快速找到符合条件的子数组。</li><li>哈希表的作用是记住已经计算过的前缀和，避免重复计算。</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>本算法适合处理大规模数组数据，效率较高。</li><li>当需要快速找到和为特定值的子数组时，非常有效。</li><li>适用于需要频繁查询和更新前缀和的场景。</li></ul></li></ol>',44)],e={},t=(0,a(6262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/leetcode/%E5%AD%90%E4%B8%B2/%E5%92%8C%E4%B8%BA%20K%20%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html","title":"和为 K 的子数组","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-19T00:00:00.000Z","category":["后端"],"tag":["子串","前缀和","leecode"],"description":"和为 K 的子数组 问题理解 我们需要找到 连续子数组 的和等于给定值 k 的个数。 定义子数组： 子数组是数组中任意连续的一段。 比如，对于数组 [1, 2, 3, 4]，长度为 3 的子数组有 [1, 2, 3] 和 [2, 3, 4]。 解题核心：前缀和 + 哈希表 什么是前缀和？ 前缀和是一种用来快速计算子数组和的技巧。对于数组 nums，我们...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/leetcode/%E5%AD%90%E4%B8%B2/%E5%92%8C%E4%B8%BA%20K%20%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"和为 K 的子数组"}],["meta",{"property":"og:description","content":"和为 K 的子数组 问题理解 我们需要找到 连续子数组 的和等于给定值 k 的个数。 定义子数组： 子数组是数组中任意连续的一段。 比如，对于数组 [1, 2, 3, 4]，长度为 3 的子数组有 [1, 2, 3] 和 [2, 3, 4]。 解题核心：前缀和 + 哈希表 什么是前缀和？ 前缀和是一种用来快速计算子数组和的技巧。对于数组 nums，我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T11:31:23.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"子串"}],["meta",{"property":"article:tag","content":"前缀和"}],["meta",{"property":"article:tag","content":"leecode"}],["meta",{"property":"article:published_time","content":"2024-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T11:31:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"和为 K 的子数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-22T11:31:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"问题理解","slug":"问题理解","link":"#问题理解","children":[]},{"level":3,"title":"解题核心：前缀和 + 哈希表","slug":"解题核心-前缀和-哈希表","link":"#解题核心-前缀和-哈希表","children":[]},{"level":3,"title":"算法详细步骤","slug":"算法详细步骤","link":"#算法详细步骤","children":[]},{"level":3,"title":"详细代码实现","slug":"详细代码实现","link":"#详细代码实现","children":[]},{"level":3,"title":"案例分析","slug":"案例分析","link":"#案例分析","children":[]},{"level":3,"title":"时间复杂度分析","slug":"时间复杂度分析","link":"#时间复杂度分析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1732275083000,"updatedTime":1732275083000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.7,"words":1110},"filePathRelative":"leetcode/子串/和为 K 的子数组.md","localizedDate":"2024年11月19日","excerpt":"\\n<hr>\\n<h3><strong>问题理解</strong></h3>\\n<p>我们需要找到 <strong>连续子数组</strong> 的和等于给定值 <code>k</code> 的个数。</p>\\n<p><strong>定义子数组</strong>：</p>\\n<ul>\\n<li>子数组是数组中任意连续的一段。</li>\\n<li>比如，对于数组 <code>[1, 2, 3, 4]</code>，长度为 3 的子数组有 <code>[1, 2, 3]</code> 和 <code>[2, 3, 4]</code>。</li>\\n</ul>\\n<hr>\\n<h3><strong>解题核心：前缀和 + 哈希表</strong></h3>","autoDesc":true}')}}]);