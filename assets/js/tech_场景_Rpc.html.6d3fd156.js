"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[2812],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},2148:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>h});var e=a(641);const l=[(0,e.Fv)('<h1 id="🧠-如果让你设计一个-rpc-框架-你该怎么做" tabindex="-1"><a class="header-anchor" href="#🧠-如果让你设计一个-rpc-框架-你该怎么做"><span>🧠 如果让你设计一个 RPC 框架，你该怎么做？</span></a></h1><hr><h2 id="🧯-前言-什么是-rpc-为啥要它" tabindex="-1"><a class="header-anchor" href="#🧯-前言-什么是-rpc-为啥要它"><span>🧯 前言：什么是 RPC？为啥要它？</span></a></h2><p>先打个比方：</p><p>👉 你去餐厅点菜，你只负责“点”，不关心厨师怎么做、厨房在哪。你说：“我要一份麻辣烫”，然后等着吃。</p><p><strong>RPC（Remote Procedure Call，远程过程调用）</strong> 就像这样：</p><ul><li>你是客户端</li><li>餐厅是服务器</li><li>厨房逻辑封装好了</li><li>你用“本地方式”发出“远程请求”，结果返回到你手里</li></ul><p><strong>一句话理解：</strong></p><blockquote><p>RPC 让你像调用本地函数一样，去调用另一台服务器上的服务。</p></blockquote><hr><h2 id="🎯-面试官要你设计一个-rpc-框架-他想看什么" tabindex="-1"><a class="header-anchor" href="#🎯-面试官要你设计一个-rpc-框架-他想看什么"><span>🎯 面试官要你设计一个 RPC 框架，他想看什么？</span></a></h2><p>面试官并不指望你造一个「阿里 Dubbo」，而是考你：</p><ul><li>懂不懂调用链流程？</li><li>知不知道服务注册、调用、返回里有什么坑？</li><li>能不能把复杂的系统拆成模块说清楚？</li></ul><hr><h2 id="💡-一个简单-rpc-框架-需要有哪些模块" tabindex="-1"><a class="header-anchor" href="#💡-一个简单-rpc-框架-需要有哪些模块"><span>💡 一个简单 RPC 框架，需要有哪些模块？</span></a></h2><p>我们来对标快递流程：</p><table><thead><tr><th>模块</th><th>对应快递场景</th><th>功能说明</th></tr></thead><tbody><tr><td>服务注册中心</td><td>菜鸟驿站</td><td>记录服务在哪里（ip+端口）</td></tr><tr><td>客户端代理</td><td>快递代寄点</td><td>你不走到厨房也能点菜</td></tr><tr><td>网络传输层</td><td>快递小哥</td><td>把调用打包送到服务端</td></tr><tr><td>编解码（序列化）</td><td>快递打包箱 + 拆箱</td><td>对象转字节流，传输后还原</td></tr><tr><td>负载均衡模块</td><td>多个厨师，选谁做菜？</td><td>服务实例很多时怎么选</td></tr><tr><td>服务端处理器</td><td>厨房</td><td>真正执行函数逻辑</td></tr></tbody></table><hr><h2 id="🛠️-分步骤详细实现讲解" tabindex="-1"><a class="header-anchor" href="#🛠️-分步骤详细实现讲解"><span>🛠️ 分步骤详细实现讲解</span></a></h2><h3 id="第-1-步-接口定义-说好你想干嘛" tabindex="-1"><a class="header-anchor" href="#第-1-步-接口定义-说好你想干嘛"><span>第 1 步：接口定义（说好你想干嘛）</span></a></h3><p>双方必须约定接口，不然你喊“来份麻辣烫”，后厨不知道配料表。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUserById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="第-2-步-服务注册中心" tabindex="-1"><a class="header-anchor" href="#第-2-步-服务注册中心"><span>第 2 步：服务注册中心</span></a></h3><ul><li>假设我们用 Nacos/Zookeeper 来注册服务</li><li>服务启动时上报自身地址：<code>192.168.1.10:8001</code></li><li>客户端拉取服务列表做调用</li></ul><p>注册中心就是<strong>服务的通讯录</strong>。</p><hr><h3 id="第-3-步-代理层-让本地调用看起来像远程调用" tabindex="-1"><a class="header-anchor" href="#第-3-步-代理层-让本地调用看起来像远程调用"><span>第 3 步：代理层（让本地调用看起来像远程调用）</span></a></h3><p>JDK 动态代理机制：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userService </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RpcClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUserById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 看起来像本地，其实底层发起远程请求</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你点“getUserById”，其实内部：</p><ul><li>构造一个 RPC 请求对象</li><li>序列化成字节流</li><li>网络发送给服务端</li><li>等服务端返回结果</li></ul><hr><h3 id="第-4-步-序列化传输" tabindex="-1"><a class="header-anchor" href="#第-4-步-序列化传输"><span>第 4 步：序列化传输</span></a></h3><p>Java 对象在 JVM 里不能直接过网线，要序列化。</p><p>我们推荐：</p><ul><li>Protobuf（二进制高性能）</li><li>JSON（人类友好但慢）</li><li>Kryo（比 Java 序列化快）</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> serializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">serialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Request</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> req </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> serializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">deserialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="第-5-步-通信层-发送数据" tabindex="-1"><a class="header-anchor" href="#第-5-步-通信层-发送数据"><span>第 5 步：通信层（发送数据）</span></a></h3><p>你需要：</p><ul><li>客户端建立连接（Netty 或 Socket）</li><li>服务端监听端口接收请求</li></ul><p>客户端代码（伪代码）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Socket</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> socket </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Socket</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(serverIp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> port)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端代码监听接收、解码、执行方法并返回。</p><hr><h3 id="第-6-步-协议设计-发什么内容" tabindex="-1"><a class="header-anchor" href="#第-6-步-协议设计-发什么内容"><span>第 6 步：协议设计（发什么内容？）</span></a></h3><p>一个 RPC 协议包，建议这样设计：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+------------+----------+-------------+--------+</span></span>\n<span class="line"><span>| 魔数 4字节 | 类型 1字节 | 请求ID 8字节 | 数据体 |</span></span>\n<span class="line"><span>+------------+----------+-------------+--------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样方便调试、扩展和解析。</p><hr><h3 id="第-7-步-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#第-7-步-负载均衡策略"><span>第 7 步：负载均衡策略</span></a></h3><p>假设注册中心有多个实例：</p><ul><li><code>192.168.1.10:8001</code></li><li><code>192.168.1.11:8001</code></li><li><code>192.168.1.12:8001</code></li></ul><p>怎么选？</p><ul><li>随机：Random</li><li>轮询：RoundRobin</li><li>一致性哈希：ConsistentHash</li></ul><p>写个简单轮询类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RoundRobinLoadBalancer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AtomicInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AtomicInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">servers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAndIncrement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔄-一次调用全过程回顾" tabindex="-1"><a class="header-anchor" href="#🔄-一次调用全过程回顾"><span>🔄 一次调用全过程回顾</span></a></h2><ol><li>用户调用代理对象 <code>userService.getUserById(1)</code></li><li>代理将请求封装成 Request 对象</li><li>使用 Protobuf 序列化请求</li><li>Netty 客户端将数据发送</li><li>服务端接收到数据后解码</li><li>找到目标方法并执行</li><li>将结果序列化并返回给客户端</li><li>客户端反序列化成 User 对象返回</li></ol><hr>',62)],t={},n=(0,a(6262).A)(t,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/tech/%E5%9C%BA%E6%99%AF/Rpc.html","title":"🧠 如果让你设计一个 RPC 框架，你该怎么做？","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["后端"],"tag":["Java","面试","场景"],"description":"🧠 如果让你设计一个 RPC 框架，你该怎么做？ 🧯 前言：什么是 RPC？为啥要它？ 先打个比方： 👉 你去餐厅点菜，你只负责“点”，不关心厨师怎么做、厨房在哪。你说：“我要一份麻辣烫”，然后等着吃。 RPC（Remote Procedure Call，远程过程调用） 就像这样： 你是客户端 餐厅是服务器 厨房逻辑封装好了 你用“本地方式”发出...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/tech/%E5%9C%BA%E6%99%AF/Rpc.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"🧠 如果让你设计一个 RPC 框架，你该怎么做？"}],["meta",{"property":"og:description","content":"🧠 如果让你设计一个 RPC 框架，你该怎么做？ 🧯 前言：什么是 RPC？为啥要它？ 先打个比方： 👉 你去餐厅点菜，你只负责“点”，不关心厨师怎么做、厨房在哪。你说：“我要一份麻辣烫”，然后等着吃。 RPC（Remote Procedure Call，远程过程调用） 就像这样： 你是客户端 餐厅是服务器 厨房逻辑封装好了 你用“本地方式”发出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T09:36:33.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"场景"}],["meta",{"property":"article:modified_time","content":"2025-07-09T09:36:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🧠 如果让你设计一个 RPC 框架，你该怎么做？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-09T09:36:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"🧯 前言：什么是 RPC？为啥要它？","slug":"🧯-前言-什么是-rpc-为啥要它","link":"#🧯-前言-什么是-rpc-为啥要它","children":[]},{"level":2,"title":"🎯 面试官要你设计一个 RPC 框架，他想看什么？","slug":"🎯-面试官要你设计一个-rpc-框架-他想看什么","link":"#🎯-面试官要你设计一个-rpc-框架-他想看什么","children":[]},{"level":2,"title":"💡 一个简单 RPC 框架，需要有哪些模块？","slug":"💡-一个简单-rpc-框架-需要有哪些模块","link":"#💡-一个简单-rpc-框架-需要有哪些模块","children":[]},{"level":2,"title":"🛠️ 分步骤详细实现讲解","slug":"🛠️-分步骤详细实现讲解","link":"#🛠️-分步骤详细实现讲解","children":[{"level":3,"title":"第 1 步：接口定义（说好你想干嘛）","slug":"第-1-步-接口定义-说好你想干嘛","link":"#第-1-步-接口定义-说好你想干嘛","children":[]},{"level":3,"title":"第 2 步：服务注册中心","slug":"第-2-步-服务注册中心","link":"#第-2-步-服务注册中心","children":[]},{"level":3,"title":"第 3 步：代理层（让本地调用看起来像远程调用）","slug":"第-3-步-代理层-让本地调用看起来像远程调用","link":"#第-3-步-代理层-让本地调用看起来像远程调用","children":[]},{"level":3,"title":"第 4 步：序列化传输","slug":"第-4-步-序列化传输","link":"#第-4-步-序列化传输","children":[]},{"level":3,"title":"第 5 步：通信层（发送数据）","slug":"第-5-步-通信层-发送数据","link":"#第-5-步-通信层-发送数据","children":[]},{"level":3,"title":"第 6 步：协议设计（发什么内容？）","slug":"第-6-步-协议设计-发什么内容","link":"#第-6-步-协议设计-发什么内容","children":[]},{"level":3,"title":"第 7 步：负载均衡策略","slug":"第-7-步-负载均衡策略","link":"#第-7-步-负载均衡策略","children":[]}]},{"level":2,"title":"🔄 一次调用全过程回顾","slug":"🔄-一次调用全过程回顾","link":"#🔄-一次调用全过程回顾","children":[]}],"git":{"createdTime":1752053793000,"updatedTime":1752053793000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.19,"words":956},"filePathRelative":"tech/场景/Rpc.md","localizedDate":"2025年7月9日","excerpt":"\\n<hr>\\n<h2>🧯 前言：什么是 RPC？为啥要它？</h2>\\n<p>先打个比方：</p>\\n<p>👉 你去餐厅点菜，你只负责“点”，不关心厨师怎么做、厨房在哪。你说：“我要一份麻辣烫”，然后等着吃。</p>\\n<p><strong>RPC（Remote Procedure Call，远程过程调用）</strong> 就像这样：</p>\\n<ul>\\n<li>你是客户端</li>\\n<li>餐厅是服务器</li>\\n<li>厨房逻辑封装好了</li>\\n<li>你用“本地方式”发出“远程请求”，结果返回到你手里</li>\\n</ul>\\n<p><strong>一句话理解：</strong></p>\\n<blockquote>\\n<p>RPC 让你像调用本地函数一样，去调用另一台服务器上的服务。</p>\\n</blockquote>","autoDesc":true}')}}]);