"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[9801],{6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,s]of t)i[e]=s;return i}},3770:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>n,data:()=>o});var s=i(641);const r=[(0,s.Fv)('<h1 id="redis-5-种基本数据类型" tabindex="-1"><a class="header-anchor" href="#redis-5-种基本数据类型"><span>Redis 5 种基本数据类型</span></a></h1><p>Redis 是一个开源的、高性能的键值对存储系统，支持丰富的数据结构。Redis 提供了 5 种基本的数据类型，每种数据类型都具有独特的特性和使用场景。下面详细讲解 Redis 的 5 种基本数据类型，包括 <code>String</code>（字符串）、<code>List</code>（列表）、<code>Hash</code>（哈希）、<code>Set</code>（集合）和 <code>Sorted Set</code>（有序集合）。</p><hr><h3 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串"><span>1. String（字符串）</span></a></h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><ul><li>Redis 的 <code>String</code> 是最基本的数据类型，可以包含任何数据，如 JPG 图像或序列化的对象。</li><li>字符串类型是二进制安全的，意味着你可以存储任何形式的数据，例如，数字、JSON 字符串、二进制数据等。</li><li>Redis 中的字符串最大可以存储 512 MB 的数据。</li></ul><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h4><ul><li><strong>SET key value</strong>：设置字符串类型的值。</li><li><strong>GET key</strong>：获取字符串类型的值。</li><li><strong>INCR key</strong>：将字符串值按数字递增 1。</li><li><strong>DECR key</strong>：将字符串值按数字递减 1。</li><li><strong>APPEND key value</strong>：将给定的值追加到字符串的末尾。</li><li><strong>MSET key1 value1 key2 value2 ...</strong>：同时设置多个键值对。</li><li><strong>MGET key1 key2 ...</strong>：同时获取多个键的值。</li></ul><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ul><li><strong>缓存存储</strong>：最常见的应用场景是作为缓存层，将计算或查询结果缓存到 Redis 中，以提高性能。</li><li><strong>计数器</strong>：可以用 <code>INCR</code> 和 <code>DECR</code> 命令来实现高效的计数器功能（例如，点击量、访问量等）。</li><li><strong>会话管理</strong>：使用字符串存储用户会话信息，如存储用户的登录状态、token 等。</li></ul><hr><h3 id="_2-list-列表" tabindex="-1"><a class="header-anchor" href="#_2-list-列表"><span>2. List（列表）</span></a></h3><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h4><ul><li>Redis 中的 <code>List</code> 是一个简单的字符串列表，按插入顺序排序，可以包含重复的元素。</li><li>列表支持两端操作：左侧插入和右侧插入。</li><li>在 Redis 中，列表的长度可以动态扩展，可以存储任意数量的元素。</li></ul><h4 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1"><span>常用命令</span></a></h4><ul><li><strong>LPUSH key value</strong>：将一个元素插入到列表的左端。</li><li><strong>RPUSH key value</strong>：将一个元素插入到列表的右端。</li><li><strong>LPOP key</strong>：移除并返回列表左端的元素。</li><li><strong>RPOP key</strong>：移除并返回列表右端的元素。</li><li><strong>LRANGE key start stop</strong>：返回列表中指定区间内的元素，区间以 0 为开始。</li><li><strong>LLEN key</strong>：获取列表的长度。</li><li><strong>LINSERT key before|after pivot value</strong>：在列表中插入一个新元素。</li></ul><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h4><ul><li><strong>消息队列</strong>：Redis 的 <code>List</code> 可以作为简单的消息队列，实现生产者消费者模型。</li><li><strong>任务排队</strong>：用于存储待处理任务列表，任务可以由多个消费者并发处理。</li><li><strong>缓存数据</strong>：用于存储一些顺序相关的数据，如日志、活动记录等。</li></ul><hr><h3 id="_3-hash-哈希" tabindex="-1"><a class="header-anchor" href="#_3-hash-哈希"><span>3. Hash（哈希）</span></a></h3><h4 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2"><span>介绍</span></a></h4><ul><li>Redis 中的 <code>Hash</code> 类型可以存储多个键值对（field-value），非常适合用来存储对象。</li><li>每个哈希对象的大小是动态的，可以存储大量的键值对。</li><li>Redis 提供了丰富的命令来对哈希数据进行操作，非常适合存储用户信息等结构化数据。</li></ul><h4 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2"><span>常用命令</span></a></h4><ul><li><strong>HSET key field value</strong>：设置哈希表中指定 field 的值。</li><li><strong>HGET key field</strong>：获取哈希表中指定 field 的值。</li><li><strong>HMSET key field1 value1 field2 value2 ...</strong>：设置哈希表中多个字段的值。</li><li><strong>HMGET key field1 field2 ...</strong>：获取哈希表中多个字段的值。</li><li><strong>HDEL key field</strong>：删除哈希表中指定的 field。</li><li><strong>HGETALL key</strong>：获取哈希表中所有字段和值。</li><li><strong>HKEYS key</strong>：获取哈希表中的所有字段名。</li><li><strong>HVALS key</strong>：获取哈希表中的所有值。</li></ul><h4 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2"><span>应用场景</span></a></h4><ul><li><strong>存储用户信息</strong>：可以将用户的属性（如用户名、密码、邮箱等）存储在哈希中。</li><li><strong>商品详情</strong>：可以用哈希存储商品的各个属性（如名称、价格、库存等）。</li><li><strong>结构化数据</strong>：任何有字段和值的数据都可以用哈希存储，减少存储空间。</li></ul><hr><h3 id="_4-set-集合" tabindex="-1"><a class="header-anchor" href="#_4-set-集合"><span>4. Set（集合）</span></a></h3><h4 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3"><span>介绍</span></a></h4><ul><li>Redis 中的 <code>Set</code> 是一个无序的集合，元素唯一，不允许重复。</li><li>主要用于存储多个不重复的元素，且集合不关心元素的顺序。</li><li>Redis 提供了针对 Set 的高效操作，可以执行集合的交集、并集和差集等操作。</li></ul><h4 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3"><span>常用命令</span></a></h4><ul><li><strong>SADD key member</strong>：将元素添加到集合中。</li><li><strong>SREM key member</strong>：从集合中移除元素。</li><li><strong>SMEMBERS key</strong>：获取集合中的所有元素。</li><li><strong>SISMEMBER key member</strong>：检查元素是否是集合的成员。</li><li><strong>SPOP key</strong>：随机移除并返回集合中的一个元素。</li><li><strong>SCARD key</strong>：获取集合的元素个数。</li><li><strong>SUNION key1 key2 ...</strong>：返回多个集合的并集。</li><li><strong>SINTER key1 key2 ...</strong>：返回多个集合的交集。</li></ul><h4 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3"><span>应用场景</span></a></h4><ul><li><strong>标签系统</strong>：用于存储一组标签或类别（例如，博客文章的标签）。</li><li><strong>去重功能</strong>：可以通过 Set 存储唯一的元素，避免重复数据。</li><li><strong>推荐系统</strong>：基于用户兴趣集合，通过交集、并集等操作实现个性化推荐。</li></ul><hr><h3 id="_5-sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#_5-sorted-set-有序集合"><span>5. Sorted Set（有序集合）</span></a></h3><h4 id="介绍-4" tabindex="-1"><a class="header-anchor" href="#介绍-4"><span>介绍</span></a></h4><ul><li>Redis 中的 <code>Sorted Set</code> 与 Set 相似，不同之处在于它的元素是有序的。每个元素关联一个浮动类型的分数（score），Redis 会根据这个分数对元素进行排序。</li><li>Sorted Set 中的每个元素都是唯一的，但分数可以相同。</li><li>Redis 可以非常高效地进行排名、范围查询等操作。</li></ul><h4 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4"><span>常用命令</span></a></h4><ul><li><strong>ZADD key score member</strong>：向有序集合中添加元素，分数为 score。</li><li><strong>ZRANGE key start stop</strong>：返回有序集合中指定区间内的元素，按分数升序排列。</li><li><strong>ZREVRANGE key start stop</strong>：返回有序集合中指定区间内的元素，按分数降序排列。</li><li><strong>ZREM key member</strong>：从有序集合中移除元素。</li><li><strong>ZINCRBY key increment member</strong>：为有序集合中指定成员的分数加上增量。</li><li><strong>ZRANK key member</strong>：返回有序集合中成员的排名（从 0 开始，分数越小排名越靠前）。</li><li><strong>ZCARD key</strong>：返回有序集合的元素个数。</li><li><strong>ZCOUNT key min max</strong>：返回有序集合中分数在指定区间内的元素个数。</li></ul><h4 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4"><span>应用场景</span></a></h4><ul><li><strong>排行榜</strong>：可以使用有序集合存储用户得分（如游戏、社交应用中的排行榜）。</li><li><strong>实时推荐</strong>：可以使用有序集合根据用户行为的分数对其进行排序，推荐相关内容。</li><li><strong>延迟队列</strong>：通过有序集合的分数来控制任务的延迟时间。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Redis 提供的五种基本数据类型——<code>String</code>、<code>List</code>、<code>Hash</code>、<code>Set</code>、<code>Sorted Set</code>——在不同的应用场景中各有优势。根据实际需求选择合适的数据类型，可以极大提升应用的性能和效率。例如，使用 <code>String</code> 来存储缓存数据，使用 <code>List</code> 来实现消息队列，使用 <code>Hash</code> 存储结构化数据，使用 <code>Set</code> 进行去重，使用 <code>Sorted Set</code> 来实现排行榜等。</p><p>Redis 的高效操作和灵活性，使得它不仅适用于缓存场景，还可以作为分布式系统中的数据存储和协作工具。</p>',46)],l={},n=(0,i(6262).A)(l,[["render",function(e,t){return(0,s.uX)(),(0,s.CE)("div",null,r)}]]),o=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%205%20%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"Redis 5 种基本数据类型","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-30T00:00:00.000Z","category":["后端"],"tag":["Redis","数据库"],"description":"Redis 5 种基本数据类型 Redis 是一个开源的、高性能的键值对存储系统，支持丰富的数据结构。Redis 提供了 5 种基本的数据类型，每种数据类型都具有独特的特性和使用场景。下面详细讲解 Redis 的 5 种基本数据类型，包括 String（字符串）、List（列表）、Hash（哈希）、Set（集合）和 Sorted Set（有序集合）。 ...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%205%20%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Redis 5 种基本数据类型"}],["meta",{"property":"og:description","content":"Redis 5 种基本数据类型 Redis 是一个开源的、高性能的键值对存储系统，支持丰富的数据结构。Redis 提供了 5 种基本的数据类型，每种数据类型都具有独特的特性和使用场景。下面详细讲解 Redis 的 5 种基本数据类型，包括 String（字符串）、List（列表）、Hash（哈希）、Set（集合）和 Sorted Set（有序集合）。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 5 种基本数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"1. String（字符串）","slug":"_1-string-字符串","link":"#_1-string-字符串","children":[]},{"level":3,"title":"2. List（列表）","slug":"_2-list-列表","link":"#_2-list-列表","children":[]},{"level":3,"title":"3. Hash（哈希）","slug":"_3-hash-哈希","link":"#_3-hash-哈希","children":[]},{"level":3,"title":"4. Set（集合）","slug":"_4-set-集合","link":"#_4-set-集合","children":[]},{"level":3,"title":"5. Sorted Set（有序集合）","slug":"_5-sorted-set-有序集合","link":"#_5-sorted-set-有序集合","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1733029796000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":5.94,"words":1782},"filePathRelative":"Java八股/数据库/Redis/重要知识点/Redis 5 种基本数据类型.md","localizedDate":"2024年11月30日","excerpt":"\\n<p>Redis 是一个开源的、高性能的键值对存储系统，支持丰富的数据结构。Redis 提供了 5 种基本的数据类型，每种数据类型都具有独特的特性和使用场景。下面详细讲解 Redis 的 5 种基本数据类型，包括 <code>String</code>（字符串）、<code>List</code>（列表）、<code>Hash</code>（哈希）、<code>Set</code>（集合）和 <code>Sorted Set</code>（有序集合）。</p>\\n<hr>\\n<h3>1. String（字符串）</h3>\\n<h4>介绍</h4>\\n<ul>\\n<li>Redis 的 <code>String</code> 是最基本的数据类型，可以包含任何数据，如 JPG 图像或序列化的对象。</li>\\n<li>字符串类型是二进制安全的，意味着你可以存储任何形式的数据，例如，数字、JSON 字符串、二进制数据等。</li>\\n<li>Redis 中的字符串最大可以存储 512 MB 的数据。</li>\\n</ul>","autoDesc":true}')}}]);