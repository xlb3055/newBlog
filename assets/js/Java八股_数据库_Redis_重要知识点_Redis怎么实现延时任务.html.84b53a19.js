"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[2347],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},3084:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>h});var n=a(641);const e=[(0,n.Fv)('<h1 id="redis怎么实现延时任务" tabindex="-1"><a class="header-anchor" href="#redis怎么实现延时任务"><span>Redis怎么实现延时任务</span></a></h1><h2 id="如何基于-redis-实现延时任务" tabindex="-1"><a class="header-anchor" href="#如何基于-redis-实现延时任务"><span><strong>如何基于 Redis 实现延时任务</strong></span></a></h2><p>在分布式系统中，延时任务是一种常见需求。Redis 作为高性能的内存数据库，可以用来实现延时任务。下面详细介绍几种基于 Redis 实现延时任务的方法，包括过期事件监听、Redisson 延迟队列，并分析它们的原理、优势和缺陷。</p><hr><h3 id="_1-redis-过期事件监听实现延时任务" tabindex="-1"><a class="header-anchor" href="#_1-redis-过期事件监听实现延时任务"><span><strong>1. Redis 过期事件监听实现延时任务</strong></span></a></h3><h4 id="_1-1-原理" tabindex="-1"><a class="header-anchor" href="#_1-1-原理"><span><strong>1.1 原理</strong></span></a></h4><p>利用 Redis 的键过期机制和过期事件通知，可以实现延时任务。当一个键设置了过期时间后，到期时 Redis 会自动删除该键，并可以通过配置发送过期事件通知。我们可以监听这些过期事件来触发相应的延时任务。</p><h4 id="_1-2-实现步骤" tabindex="-1"><a class="header-anchor" href="#_1-2-实现步骤"><span><strong>1.2 实现步骤</strong></span></a></h4><ol><li><p><strong>开启过期事件通知</strong>：</p><ul><li>配置 Redis 发送过期事件通知。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> notify-keyspace-events</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Ex</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>设置带过期时间的键</strong>：</p><ul><li>为每个延时任务设置一个带过期时间的键，值为任务内容。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> task:1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;send_email&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ex</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>监听过期事件</strong>：</p><ul><li>使用 Redis 订阅发布模式监听过期事件，触发相应的延时任务。</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> redis</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle_expired_event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    task </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Executing task: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">task</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> redis.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">StrictRedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pubsub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> client.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pubsub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pubsub.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">psubscribe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(**{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__keyevent@0__:expired&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: handle_expired_event})</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pubsub.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run_in_thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sleep_time</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_1-3-缺陷" tabindex="-1"><a class="header-anchor" href="#_1-3-缺陷"><span><strong>1.3 缺陷</strong></span></a></h4><ol><li><p><strong>延迟不精确</strong>：</p><ul><li>Redis 的过期事件处理是惰性删除或定期删除，延迟任务的执行时间可能会有一定误差。</li></ul></li><li><p><strong>持久性问题</strong>：</p><ul><li>Redis 是内存数据库，服务器重启或故障可能导致任务丢失。</li></ul></li><li><p><strong>性能问题</strong>：</p><ul><li>大量过期事件可能导致 Redis 性能下降，尤其是有大量延时任务时。</li></ul></li></ol><hr><h3 id="_2-redisson-延迟队列" tabindex="-1"><a class="header-anchor" href="#_2-redisson-延迟队列"><span><strong>2. Redisson 延迟队列</strong></span></a></h3><h4 id="_2-1-原理" tabindex="-1"><a class="header-anchor" href="#_2-1-原理"><span><strong>2.1 原理</strong></span></a></h4><p>Redisson 是 Redis 的 Java 客户端，提供了丰富的分布式数据结构和工具，其中包括延迟队列。Redisson 延迟队列基于 Redis 的 <code>Sorted Set</code>（有序集合）实现，通过定时任务扫描集合中的元素，触发延时任务。</p><h4 id="_2-2-实现步骤" tabindex="-1"><a class="header-anchor" href="#_2-2-实现步骤"><span><strong>2.2 实现步骤</strong></span></a></h4><ol><li><p><strong>引入 Redisson 依赖</strong>：</p><ul><li>在项目中引入 Redisson 依赖。</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.redisson&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;redisson&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.15.3&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>配置 Redisson 客户端</strong>：</p><ul><li>配置 Redisson 客户端连接 Redis。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Config</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">useSingleServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis://127.0.0.1:6379&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RedissonClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redissonClient </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Redisson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(config);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建延迟队列</strong>：</p><ul><li>使用 Redisson 提供的延迟队列数据结构。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RBlockingQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> blockingQueue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redissonClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;delayQueue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RDelayedQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> delayedQueue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redissonClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDelayedQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(blockingQueue);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 添加延时任务</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">delayedQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;task1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 消费任务</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> task </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> blockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Executing task: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> task);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_2-3-优势" tabindex="-1"><a class="header-anchor" href="#_2-3-优势"><span><strong>2.3 优势</strong></span></a></h4><ol><li><p><strong>延迟精确</strong>：</p><ul><li>Redisson 使用 <code>Sorted Set</code> 存储任务，精确到毫秒级别。</li></ul></li><li><p><strong>高可用</strong>：</p><ul><li>Redisson 提供了分布式锁、集群支持，任务处理更加可靠。</li></ul></li><li><p><strong>易用性</strong>：</p><ul><li>Redisson 封装了 Redis 的复杂操作，提供简单的 API 使用延迟队列。</li></ul></li></ol><h4 id="_2-4-缺陷" tabindex="-1"><a class="header-anchor" href="#_2-4-缺陷"><span><strong>2.4 缺陷</strong></span></a></h4><ol><li><p><strong>依赖 Java 环境</strong>：</p><ul><li>Redisson 是 Java 客户端，其他语言需要实现类似功能可能比较复杂。</li></ul></li><li><p><strong>需要额外的线程</strong>：</p><ul><li>需要后台线程不断扫描 <code>Sorted Set</code>，对实时性要求高的场景可能有一定延迟。</li></ul></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ol><li><p><strong>Redis 过期事件监听</strong>：</p><ul><li><strong>原理</strong>：利用 Redis 键过期机制和事件通知。</li><li><strong>优点</strong>：实现简单，不依赖第三方库。</li><li><strong>缺点</strong>：延迟不精确、持久性和性能问题。</li></ul></li><li><p><strong>Redisson 延迟队列</strong>：</p><ul><li><strong>原理</strong>：基于 Redis 的 <code>Sorted Set</code> 实现延迟任务。</li><li><strong>优点</strong>：延迟精确、高可用、易用。</li><li><strong>缺点</strong>：依赖 Java 环境，需要额外线程扫描。</li></ul></li></ol>',24)],l={},t=(0,a(6262).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1.html","title":"Redis怎么实现延时任务","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-24T00:00:00.000Z","category":["后端"],"tag":["Redis","数据库"],"description":"Redis怎么实现延时任务 如何基于 Redis 实现延时任务 在分布式系统中，延时任务是一种常见需求。Redis 作为高性能的内存数据库，可以用来实现延时任务。下面详细介绍几种基于 Redis 实现延时任务的方法，包括过期事件监听、Redisson 延迟队列，并分析它们的原理、优势和缺陷。 1. Redis 过期事件监听实现延时任务 1.1 原理 利...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Redis怎么实现延时任务"}],["meta",{"property":"og:description","content":"Redis怎么实现延时任务 如何基于 Redis 实现延时任务 在分布式系统中，延时任务是一种常见需求。Redis 作为高性能的内存数据库，可以用来实现延时任务。下面详细介绍几种基于 Redis 实现延时任务的方法，包括过期事件监听、Redisson 延迟队列，并分析它们的原理、优势和缺陷。 1. Redis 过期事件监听实现延时任务 1.1 原理 利..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis怎么实现延时任务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"如何基于 Redis 实现延时任务","slug":"如何基于-redis-实现延时任务","link":"#如何基于-redis-实现延时任务","children":[{"level":3,"title":"1. Redis 过期事件监听实现延时任务","slug":"_1-redis-过期事件监听实现延时任务","link":"#_1-redis-过期事件监听实现延时任务","children":[]},{"level":3,"title":"2. Redisson 延迟队列","slug":"_2-redisson-延迟队列","link":"#_2-redisson-延迟队列","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1733029796000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.01,"words":904},"filePathRelative":"Java八股/数据库/Redis/重要知识点/Redis怎么实现延时任务.md","localizedDate":"2024年11月24日","excerpt":"\\n<h2><strong>如何基于 Redis 实现延时任务</strong></h2>\\n<p>在分布式系统中，延时任务是一种常见需求。Redis 作为高性能的内存数据库，可以用来实现延时任务。下面详细介绍几种基于 Redis 实现延时任务的方法，包括过期事件监听、Redisson 延迟队列，并分析它们的原理、优势和缺陷。</p>\\n<hr>\\n<h3><strong>1. Redis 过期事件监听实现延时任务</strong></h3>\\n<h4><strong>1.1 原理</strong></h4>\\n<p>利用 Redis 的键过期机制和过期事件通知，可以实现延时任务。当一个键设置了过期时间后，到期时 Redis 会自动删除该键，并可以通过配置发送过期事件通知。我们可以监听这些过期事件来触发相应的延时任务。</p>","autoDesc":true}')}}]);