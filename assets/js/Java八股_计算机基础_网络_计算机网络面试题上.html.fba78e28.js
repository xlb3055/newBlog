"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[5644],{6262:(e,t)=>{t.A=(e,t)=>{const l=e.__vccOpts||e;for(const[e,n]of t)l[e]=n;return l}},4323:(e,t,l)=>{l.r(t),l.d(t,{comp:()=>r,data:()=>a});var n=l(641);const i=[(0,n.Fv)('<hr><h1 id="计算机网络基础面试题上" tabindex="-1"><a class="header-anchor" href="#计算机网络基础面试题上"><span>计算机网络基础面试题上</span></a></h1><h2 id="网络分层模型" tabindex="-1"><a class="header-anchor" href="#网络分层模型"><span>网络分层模型</span></a></h2><ul><li><strong>OSI 模型</strong>（七层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li><li><strong>TCP/IP 模型</strong>（四层）：网络接口层、网络层、传输层、应用层。</li></ul><p><strong>例子</strong>：发送一个网页请求时，数据从应用层逐层向下传输，到达物理层后进行传输，然后逐层向上传输到服务器的应用层，完成一次完整的数据交换。</p><hr><h2 id="常见网络协议" tabindex="-1"><a class="header-anchor" href="#常见网络协议"><span>常见网络协议</span></a></h2><ul><li><strong>TCP</strong>：面向连接的可靠传输协议，适合文件传输、电子邮件等需要可靠性的数据传输。</li><li><strong>UDP</strong>：面向无连接、不可靠的数据传输协议，适合视频流、实时语音等需要快速传输的应用。</li><li><strong>HTTP</strong>：超文本传输协议，无状态的应用层协议，用于网页数据传输。</li></ul><hr><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><h3 id="_1-从输入-url-到页面展示到底发生了什么" tabindex="-1"><a class="header-anchor" href="#_1-从输入-url-到页面展示到底发生了什么"><span>1. 从输入 URL 到页面展示到底发生了什么？</span></a></h3><ol><li><strong>DNS 解析</strong>：将域名解析为 IP 地址。</li><li><strong>TCP 连接</strong>：客户端与服务器建立 TCP 三次握手连接。</li><li><strong>发送 HTTP 请求</strong>：客户端向服务器发送 HTTP 请求（包括方法、路径、Header 等）。</li><li><strong>服务器处理请求并返回响应</strong>：服务器处理请求，返回页面内容。</li><li><strong>渲染页面</strong>：浏览器解析 HTML、CSS、JS，渲染页面。</li><li><strong>关闭连接</strong>：浏览器可能保持 TCP 连接以重用，或在空闲后关闭。</li></ol><h3 id="_2-http-状态码有哪些" tabindex="-1"><a class="header-anchor" href="#_2-http-状态码有哪些"><span>2. HTTP 状态码有哪些？</span></a></h3><ul><li><strong>2xx</strong>：成功，常见的有 200（请求成功）。</li><li><strong>3xx</strong>：重定向，常见的有 301（永久重定向）、302（临时重定向）。</li><li><strong>4xx</strong>：客户端错误，常见的有 404（未找到资源）、403（禁止访问）。</li><li><strong>5xx</strong>：服务器错误，常见的有 500（内部服务器错误）、503（服务不可用）。</li></ul><h3 id="_3-http-header-中常见的字段有哪些" tabindex="-1"><a class="header-anchor" href="#_3-http-header-中常见的字段有哪些"><span>3. HTTP Header 中常见的字段有哪些？</span></a></h3><ul><li><strong>请求头</strong>： <ul><li><code>Host</code>：目标主机地址。</li><li><code>User-Agent</code>：用户代理（浏览器信息）。</li><li><code>Accept</code>：客户端接收的内容类型。</li></ul></li><li><strong>响应头</strong>： <ul><li><code>Content-Type</code>：返回内容的类型，如 <code>text/html</code>。</li><li><code>Set-Cookie</code>：设置 Cookie。</li><li><code>Cache-Control</code>：缓存控制策略。</li></ul></li></ul><h3 id="_4-http-和-https-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-http-和-https-有什么区别"><span>4. HTTP 和 HTTPS 有什么区别？</span></a></h3><ul><li><strong>HTTP</strong>：不加密，数据明文传输，容易被窃听和篡改。</li><li><strong>HTTPS</strong>：通过 SSL/TLS 加密，保证数据安全性和完整性。</li></ul><h3 id="_5-http-1-0-和-http-1-1-有什么区别" tabindex="-1"><a class="header-anchor" href="#_5-http-1-0-和-http-1-1-有什么区别"><span>5. HTTP/1.0 和 HTTP/1.1 有什么区别？</span></a></h3><ul><li>HTTP/1.0 默认不支持持久连接（每次请求重新连接）。</li><li>HTTP/1.1 引入持久连接（默认开启），支持管线化请求，节省资源。</li></ul><h3 id="_6-http-1-1-和-http-2-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#_6-http-1-1-和-http-2-0-有什么区别"><span>6. HTTP/1.1 和 HTTP/2.0 有什么区别？</span></a></h3><ul><li><strong>HTTP/2.0</strong> 支持多路复用，同一连接下可以并发多个请求，减少了延迟。</li><li><strong>头部压缩</strong>：HTTP/2.0 支持 HPACK 头部压缩，降低带宽需求。</li></ul><h3 id="_7-http-2-0-和-http-3-0-有什么区别" tabindex="-1"><a class="header-anchor" href="#_7-http-2-0-和-http-3-0-有什么区别"><span>7. HTTP/2.0 和 HTTP/3.0 有什么区别？</span></a></h3><ul><li><strong>HTTP/3.0</strong> 基于 UDP 进行传输，使用 QUIC 协议，减少了连接延迟，提高了速度。</li></ul><h3 id="_8-http-是不保存状态的协议-如何保存用户状态" tabindex="-1"><a class="header-anchor" href="#_8-http-是不保存状态的协议-如何保存用户状态"><span>8. HTTP 是不保存状态的协议, 如何保存用户状态？</span></a></h3><ul><li><strong>Cookie</strong>：客户端存储少量数据，自动随请求发送。</li><li><strong>Session</strong>：服务器端存储用户数据，通过 Session ID 标识用户。</li><li><strong>Token</strong>：客户端存储的认证令牌，用于用户验证。</li></ul><h3 id="_9-uri-和-url-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_9-uri-和-url-的区别是什么"><span>9. URI 和 URL 的区别是什么？</span></a></h3><ul><li><strong>URI</strong>（统一资源标识符）：用于唯一标识资源。</li><li><strong>URL</strong>（统一资源定位符）：一种 URI，包含了资源的具体地址。</li></ul><h3 id="_10-cookie-和-session-有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-cookie-和-session-有什么区别"><span>10. Cookie 和 Session 有什么区别？</span></a></h3><ul><li><strong>Cookie</strong>：存储在客户端，数据量小，不安全。</li><li><strong>Session</strong>：存储在服务器端，安全性更高。</li></ul><h3 id="_11-get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#_11-get-和-post-的区别"><span>11. GET 和 POST 的区别</span></a></h3><ul><li><strong>GET</strong>：用于请求数据，参数在 URL 中传递，不安全且数据量有限。</li><li><strong>POST</strong>：用于提交数据，参数在请求体中传递，更安全且数据量不受限。</li></ul><hr><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h2><h3 id="_1-什么是-websocket" tabindex="-1"><a class="header-anchor" href="#_1-什么是-websocket"><span>1. 什么是 WebSocket？</span></a></h3><ul><li><strong>WebSocket</strong> 是一种双向通信协议，允许服务器和客户端实时交换数据。</li></ul><h3 id="_2-websocket-和-http-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-websocket-和-http-有什么区别"><span>2. WebSocket 和 HTTP 有什么区别？</span></a></h3><ul><li>WebSocket 是基于 TCP 的协议，一旦连接建立，可双向持续通信；而 HTTP 是请求-响应模式的单向协议。</li></ul><h3 id="_3-websocket-的工作过程是什么样的" tabindex="-1"><a class="header-anchor" href="#_3-websocket-的工作过程是什么样的"><span>3. WebSocket 的工作过程是什么样的？</span></a></h3><ol><li><strong>握手</strong>：客户端发送 HTTP 请求以发起 WebSocket 连接。</li><li><strong>协议升级</strong>：服务器同意连接后，将协议升级为 WebSocket。</li><li><strong>双向通信</strong>：建立连接后，双方可以任意时刻发送数据。</li><li><strong>关闭连接</strong>：客户端或服务器主动关闭连接。</li></ol><h3 id="_4-sse-与-websocket-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-sse-与-websocket-有什么区别"><span>4. SSE 与 WebSocket 有什么区别？</span></a></h3><ul><li><strong>SSE</strong>（服务器发送事件）：只支持服务器到客户端的单向通信。</li><li><strong>WebSocket</strong>：支持双向通信，适合实时交互应用。</li></ul><hr><h2 id="ping" tabindex="-1"><a class="header-anchor" href="#ping"><span>PING</span></a></h2><h3 id="_1-ping-命令的作用是什么" tabindex="-1"><a class="header-anchor" href="#_1-ping-命令的作用是什么"><span>1. PING 命令的作用是什么？</span></a></h3><ul><li><strong>PING</strong> 用于测试网络连通性和延迟，检查两个主机之间的连接质量。</li></ul><h3 id="_2-ping-命令的工作原理是什么" tabindex="-1"><a class="header-anchor" href="#_2-ping-命令的工作原理是什么"><span>2. PING 命令的工作原理是什么？</span></a></h3><ul><li>PING 基于 ICMP 协议，向目标主机发送回显请求（Echo Request）数据包，目标主机回应回显响应（Echo Reply）数据包，以此来测试连通性和响应时间。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> google.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h2><h3 id="_1-dns-的作用是什么" tabindex="-1"><a class="header-anchor" href="#_1-dns-的作用是什么"><span>1. DNS 的作用是什么？</span></a></h3><ul><li><strong>DNS</strong>（域名系统）：将域名转换为 IP 地址，使得用户可以通过易记的域名访问网站。</li></ul><h3 id="_2-dns-服务器有哪些" tabindex="-1"><a class="header-anchor" href="#_2-dns-服务器有哪些"><span>2. DNS 服务器有哪些？</span></a></h3><ul><li><strong>根 DNS 服务器</strong>：管理顶级域，如 <code>.com</code>、<code>.org</code> 等。</li><li><strong>顶级域名服务器</strong>：管理特定顶级域下的域名，如 <code>.com</code> 的域名。</li><li><strong>权威 DNS 服务器</strong>：存储域名和 IP 的映射记录，提供最终的解析服务。</li><li><strong>本地域名服务器</strong>：负责处理客户端的 DNS 请求，缓存常用域名的解析结果。</li></ul><h3 id="_3-根服务器有多少个" tabindex="-1"><a class="header-anchor" href="#_3-根服务器有多少个"><span>3. 根服务器有多少个？</span></a></h3><ul><li>全球有 <strong>13 台根 DNS 服务器</strong>，分别标记为 A 到 M。</li></ul><h3 id="_4-dns-解析的过程是什么样的" tabindex="-1"><a class="header-anchor" href="#_4-dns-解析的过程是什么样的"><span>4. DNS 解析的过程是什么样的？</span></a></h3><ol><li><strong>查询本地缓存</strong>：检查本地是否已有域名的 IP 地址。</li><li><strong>递归查询</strong>：若本地无缓存，向本地域名服务器发送请求。</li><li><strong>迭代查询</strong>：本地域名服务器按层级向上查询，直至找到权威 DNS 服务器。</li><li><strong>返回 IP 地址</strong>：找到 IP 地址后逐层返回，客户端连接目标 IP。</li></ol><h3 id="_5-dns-劫持了解吗-如何应对" tabindex="-1"><a class="header-anchor" href="#_5-dns-劫持了解吗-如何应对"><span>5. DNS 劫持了解吗？如何应对？</span></a></h3><ul><li><strong>DNS 劫持</strong>：攻击者在 DNS 解析过程中将域名解析结果篡改，导致用户访问错误的 IP 地址。</li><li><strong>应对方法</strong>： <ul><li>使用加密的 <code>DNS over HTTPS</code>（DoH）或 <code>DNS over TLS</code>（DoT）。</li><li>使用可信的 DNS 服务提供商，定期检查 DNS 配置。</li></ul></li></ul><hr>',62)],s={},r=(0,l(6262).A)(s,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,i)}]]),a=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","title":"计算机网络基础面试题上","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-10T00:00:00.000Z","category":["计算机基础"],"tag":["计算机网络"],"description":"计算机网络基础面试题上 网络分层模型 OSI 模型（七层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 TCP/IP 模型（四层）：网络接口层、网络层、传输层、应用层。 例子：发送一个网页请求时，数据从应用层逐层向下传输，到达物理层后进行传输，然后逐层向上传输到服务器的应用层，完成一次完整的数据交换。 常见网络协议 TCP：面向连接的...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"计算机网络基础面试题上"}],["meta",{"property":"og:description","content":"计算机网络基础面试题上 网络分层模型 OSI 模型（七层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 TCP/IP 模型（四层）：网络接口层、网络层、传输层、应用层。 例子：发送一个网页请求时，数据从应用层逐层向下传输，到达物理层后进行传输，然后逐层向上传输到服务器的应用层，完成一次完整的数据交换。 常见网络协议 TCP：面向连接的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络基础面试题上\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"网络分层模型","slug":"网络分层模型","link":"#网络分层模型","children":[]},{"level":2,"title":"常见网络协议","slug":"常见网络协议","link":"#常见网络协议","children":[]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[{"level":3,"title":"1. 从输入 URL 到页面展示到底发生了什么？","slug":"_1-从输入-url-到页面展示到底发生了什么","link":"#_1-从输入-url-到页面展示到底发生了什么","children":[]},{"level":3,"title":"2. HTTP 状态码有哪些？","slug":"_2-http-状态码有哪些","link":"#_2-http-状态码有哪些","children":[]},{"level":3,"title":"3. HTTP Header 中常见的字段有哪些？","slug":"_3-http-header-中常见的字段有哪些","link":"#_3-http-header-中常见的字段有哪些","children":[]},{"level":3,"title":"4. HTTP 和 HTTPS 有什么区别？","slug":"_4-http-和-https-有什么区别","link":"#_4-http-和-https-有什么区别","children":[]},{"level":3,"title":"5. HTTP/1.0 和 HTTP/1.1 有什么区别？","slug":"_5-http-1-0-和-http-1-1-有什么区别","link":"#_5-http-1-0-和-http-1-1-有什么区别","children":[]},{"level":3,"title":"6. HTTP/1.1 和 HTTP/2.0 有什么区别？","slug":"_6-http-1-1-和-http-2-0-有什么区别","link":"#_6-http-1-1-和-http-2-0-有什么区别","children":[]},{"level":3,"title":"7. HTTP/2.0 和 HTTP/3.0 有什么区别？","slug":"_7-http-2-0-和-http-3-0-有什么区别","link":"#_7-http-2-0-和-http-3-0-有什么区别","children":[]},{"level":3,"title":"8. HTTP 是不保存状态的协议, 如何保存用户状态？","slug":"_8-http-是不保存状态的协议-如何保存用户状态","link":"#_8-http-是不保存状态的协议-如何保存用户状态","children":[]},{"level":3,"title":"9. URI 和 URL 的区别是什么？","slug":"_9-uri-和-url-的区别是什么","link":"#_9-uri-和-url-的区别是什么","children":[]},{"level":3,"title":"10. Cookie 和 Session 有什么区别？","slug":"_10-cookie-和-session-有什么区别","link":"#_10-cookie-和-session-有什么区别","children":[]},{"level":3,"title":"11. GET 和 POST 的区别","slug":"_11-get-和-post-的区别","link":"#_11-get-和-post-的区别","children":[]}]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[{"level":3,"title":"1. 什么是 WebSocket？","slug":"_1-什么是-websocket","link":"#_1-什么是-websocket","children":[]},{"level":3,"title":"2. WebSocket 和 HTTP 有什么区别？","slug":"_2-websocket-和-http-有什么区别","link":"#_2-websocket-和-http-有什么区别","children":[]},{"level":3,"title":"3. WebSocket 的工作过程是什么样的？","slug":"_3-websocket-的工作过程是什么样的","link":"#_3-websocket-的工作过程是什么样的","children":[]},{"level":3,"title":"4. SSE 与 WebSocket 有什么区别？","slug":"_4-sse-与-websocket-有什么区别","link":"#_4-sse-与-websocket-有什么区别","children":[]}]},{"level":2,"title":"PING","slug":"ping","link":"#ping","children":[{"level":3,"title":"1. PING 命令的作用是什么？","slug":"_1-ping-命令的作用是什么","link":"#_1-ping-命令的作用是什么","children":[]},{"level":3,"title":"2. PING 命令的工作原理是什么？","slug":"_2-ping-命令的工作原理是什么","link":"#_2-ping-命令的工作原理是什么","children":[]}]},{"level":2,"title":"DNS","slug":"dns","link":"#dns","children":[{"level":3,"title":"1. DNS 的作用是什么？","slug":"_1-dns-的作用是什么","link":"#_1-dns-的作用是什么","children":[]},{"level":3,"title":"2. DNS 服务器有哪些？","slug":"_2-dns-服务器有哪些","link":"#_2-dns-服务器有哪些","children":[]},{"level":3,"title":"3. 根服务器有多少个？","slug":"_3-根服务器有多少个","link":"#_3-根服务器有多少个","children":[]},{"level":3,"title":"4. DNS 解析的过程是什么样的？","slug":"_4-dns-解析的过程是什么样的","link":"#_4-dns-解析的过程是什么样的","children":[]},{"level":3,"title":"5. DNS 劫持了解吗？如何应对？","slug":"_5-dns-劫持了解吗-如何应对","link":"#_5-dns-劫持了解吗-如何应对","children":[]}]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":5.35,"words":1604},"filePathRelative":"Java八股/计算机基础/网络/计算机网络面试题上.md","localizedDate":"2024年11月10日","excerpt":"<hr>\\n<h1>计算机网络基础面试题上</h1>\\n<h2>网络分层模型</h2>\\n<ul>\\n<li><strong>OSI 模型</strong>（七层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li>\\n<li><strong>TCP/IP 模型</strong>（四层）：网络接口层、网络层、传输层、应用层。</li>\\n</ul>\\n<p><strong>例子</strong>：发送一个网页请求时，数据从应用层逐层向下传输，到达物理层后进行传输，然后逐层向上传输到服务器的应用层，完成一次完整的数据交换。</p>\\n<hr>\\n<h2>常见网络协议</h2>\\n<ul>\\n<li><strong>TCP</strong>：面向连接的可靠传输协议，适合文件传输、电子邮件等需要可靠性的数据传输。</li>\\n<li><strong>UDP</strong>：面向无连接、不可靠的数据传输协议，适合视频流、实时语音等需要快速传输的应用。</li>\\n<li><strong>HTTP</strong>：超文本传输协议，无状态的应用层协议，用于网页数据传输。</li>\\n</ul>","autoDesc":true}')}}]);