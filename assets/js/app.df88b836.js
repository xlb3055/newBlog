"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[3524],{1709:(s,i,a)=>{a.d(i,{l:()=>n});const n={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},后端:{path:"/category/%E5%90%8E%E7%AB%AF/",indexes:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]},算法:{path:"/category/%E7%AE%97%E6%B3%95/",indexes:[117]},开发工具:{path:"/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",indexes:[118,119,120,121]},计算机基础:{path:"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",indexes:[122,123,124,125,126,127]},前端:{path:"/category/%E5%89%8D%E7%AB%AF/",indexes:[128,129,130,131,132]}}}},tag:{"/":{path:"/tag/",map:{Markdown:{path:"/tag/markdown/",indexes:[133]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},双指针:{path:"/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",indexes:[77,79,80,81]},leecode:{path:"/tag/leecode/",indexes:[22,26,40,41,42,43,44,45,46,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84]},哈希:{path:"/tag/%E5%93%88%E5%B8%8C/",indexes:[82,83,84]},子串:{path:"/tag/%E5%AD%90%E4%B8%B2/",indexes:[72,73,74]},前缀和:{path:"/tag/%E5%89%8D%E7%BC%80%E5%92%8C/",indexes:[72]},滑动窗口:{path:"/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",indexes:[73,74,76,78]},数组:{path:"/tag/%E6%95%B0%E7%BB%84/",indexes:[67,68,69,70,75]},矩阵:{path:"/tag/%E7%9F%A9%E9%98%B5/",indexes:[40,41,46,71]},链表:{path:"/tag/%E9%93%BE%E8%A1%A8/",indexes:[117,22,26,42,43,44,45]},快慢指针:{path:"/tag/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",indexes:[22,26,43,44]},leetcode:{path:"/tag/leetcode/",indexes:[117]},Java:{path:"/tag/java/",indexes:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,27,28,29,30,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,112,113,114,115,116]},面试:{path:"/tag/%E9%9D%A2%E8%AF%95/",indexes:[4,5,6,7,8,9,10,11,12]},场景:{path:"/tag/%E5%9C%BA%E6%99%AF/",indexes:[4,5,6,7,8,9,10,11,12]},奶奶八股:{path:"/tag/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/",indexes:[2,3]},后端开发技巧:{path:"/tag/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/",indexes:[1,13,14,15,16,17,18,19,20,21,23,24,25,27,28,29,30,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]},并发:{path:"/tag/%E5%B9%B6%E5%8F%91/",indexes:[13,14,85]},集合:{path:"/tag/%E9%9B%86%E5%90%88/",indexes:[86,87,89]},MongoDB:{path:"/tag/mongodb/",indexes:[31,32]},数据库:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",indexes:[31,32,33,34,35,36,37,38,39,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,94]},MySQL:{path:"/tag/mysql/",indexes:[50,51,52,53,54,55,56,57,58,59,60,61,62]},Redis:{path:"/tag/redis/",indexes:[33,34,35,36,37,38,39,47,48,49]},开发工具:{path:"/tag/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",indexes:[118,119,120,121]},Linux:{path:"/tag/linux/",indexes:[122]},Shell:{path:"/tag/shell/",indexes:[123]},操作系统:{path:"/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",indexes:[124,125]},计算机网络:{path:"/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",indexes:[126,127]},源码分析:{path:"/tag/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",indexes:[15,16,17,18,19,20,21,88]},Js:{path:"/tag/js/",indexes:[128]},前端开发技巧:{path:"/tag/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/",indexes:[128,129,130,131]},"Node.js":{path:"/tag/node.js/",indexes:[129,130]},Vue:{path:"/tag/vue/",indexes:[131]},前端:{path:"/tag/%E5%89%8D%E7%AB%AF/",indexes:[132]},"Mybatis-plus":{path:"/tag/mybatis-plus/",indexes:[105,106,107,108,109,110]},Spring:{path:"/tag/spring/",indexes:[1,111]}}}}}},4776:(s,i,a)=>{a.d(i,{M:()=>n});const n=["/demo/page.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%8F%91%E7%94%9F%E4%BA%86%E5%B4%A9%E6%BA%83%EF%BC%8C%E5%B7%B2%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%90%97_.html","/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E9%94%AE%E7%9B%98%E6%95%B2%E5%85%A5%E5%AD%97%E6%AF%8D%E6%97%B6%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_.html","/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E4%BE%8B.html","/tech/%E5%9C%BA%E6%99%AF/%E7%9F%AD%E9%93%BE%E6%8E%A5.html","/tech/%E5%9C%BA%E6%99%AF/mq.html","/tech/%E5%9C%BA%E6%99%AF/mq%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F.html","/tech/%E5%9C%BA%E6%99%AF/%E5%B9%B6%E5%8F%91%E6%B5%81%E7%BB%9F%E8%AE%A1.html","/tech/%E5%9C%BA%E6%99%AF/%E7%A7%92%E6%9D%80.html","/tech/%E5%9C%BA%E6%99%AF/Rpc.html","/tech/%E5%9C%BA%E6%99%AF/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8Cdfa%E7%AE%97%E6%B3%95%E8%84%B1%E6%95%8F.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%AD.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayBlockingQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/CopyOnWriteArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/DelayQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/LinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ConcurrentHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/HashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/LinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/leetcode/%E9%93%BE%E8%A1%A8/%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20SPI%20%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E8%AF%AD%E6%B3%95%E7%B3%96%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E9%AD%94%E6%B3%95%E7%B1%BB%20Unsafe%20%E8%AF%A6%E8%A7%A3.html","/leetcode/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/BigDecimal%20%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/MongoDB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/MongoDB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E8%B7%B3%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E5%B8%B8%E8%A7%81%E9%98%BB%E5%A1%9E%E5%8E%9F%E5%9B%A0.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%203%20%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%205%20%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/3%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E8%AF%BB%E5%86%99%E7%AD%96%E7%95%A5.html","/leetcode/%E7%9F%A9%E9%98%B5/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html","/leetcode/%E7%9F%A9%E9%98%B5/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.html","/leetcode/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html","/leetcode/%E9%93%BE%E8%A1%A8/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html","/leetcode/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html","/leetcode/%E9%93%BE%E8%A1%A8/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.html","/leetcode/%E7%9F%A9%E9%98%B5/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93(%E4%B8%8A).html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%AF%B9MVCC%E7%9A%84%E5%AE%9E%E7%8E%B0.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%20%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/SQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E9%AB%98%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%BBmarkdown.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/NoSQl.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html","/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/SQL/SQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","/leetcode/%E6%95%B0%E7%BB%84/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html","/leetcode/%E6%95%B0%E7%BB%84/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0.html","/leetcode/%E6%95%B0%E7%BB%84/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84.html","/leetcode/%E6%95%B0%E7%BB%84/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF.html","/leetcode/%E7%9F%A9%E9%98%B5/%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6.html","/leetcode/%E5%AD%90%E4%B8%B2/%E5%92%8C%E4%B8%BA%20K%20%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html","/leetcode/%E5%AD%90%E4%B8%B2/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.html","/leetcode/%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html","/leetcode/%E6%95%B0%E7%BB%84/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C.html","/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html","/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E6%8E%A5%E9%9B%A8%E6%B0%B4.html","/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html","/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html","/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html","/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6.html","/leetcode/%E5%93%88%E5%B8%8C/%E4%BF%A9%E6%95%B0%E4%B9%8B%E5%92%8C.html","/leetcode/%E5%93%88%E5%B8%8C/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html","/leetcode/%E5%93%88%E5%B8%8C/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8A.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8B.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%AD.html","/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E8%AF%A6%E8%A7%A3.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%82%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E6%8B%A6%E6%88%AA%E5%99%A8.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BB%A7%E6%89%BF.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%80%92%E5%BD%92.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%87%8D%E8%BD%BD.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/insert.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/mybatis-plus%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/select.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/update.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/%E4%B9%90%E8%A7%82%E9%94%81.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/AOP.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84%E4%B8%BB%E8%A6%81API.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96Class%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E6%B5%8B%E8%AF%95class%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E8%8E%B7%E5%BE%97%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html","/leetcode/%E9%93%BE%E8%A1%A8/%E4%BF%A9%E6%95%B0%E7%9B%B8%E5%8A%A0.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/Mysql%E5%AE%89%E8%A3%85.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/Navicat16%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/chocolatey%E7%9A%84%E5%AE%89%E8%A3%85.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/fnm%E7%9A%84%E5%AE%89%E8%A3%85.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JS/js%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%A4%9F%E4%B8%BA%E7%A9%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Node/fnm%E6%8C%87%E4%BB%A4.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Node/http-server.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Vue/vue%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E5%8F%B7.html","/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E7%BB%BC%E5%90%88/%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90.html","/demo/markdown.html","/intro.html","/demo/","/demo/disable.html","/demo/encrypt.html","/demo/layout.html"]},3781:(s,i,a)=>{a.d(i,{U:()=>n});const n={article:{"/":{path:"/article/",indexes:[1,2,3,4,5,6,7,8,9,10,11,12,117,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,134,135,136,137,138,133,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,122,123,124,125,90,91,92,126,127,93,118,119,120,121,94,128,129,130,131,132,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,0]}},star:{"/":{path:"/star/",indexes:[1]}},timeline:{"/":{path:"/timeline/",indexes:[2,3,4,5,6,7,8,9,10,11,12,117,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,134,135,136,137,138,133,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,122,123,124,125,90,91,92,126,127,93,118,119,120,121,94,128,129,130,131,132,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,1,112,113,114,115,116,0]}}}},3600:(s,i,a)=>{a.d(i,{B:()=>I});var n={};a.r(n);var e={};a.r(e);var l={};a.r(l),a.d(l,{default:()=>B});var t={};a.r(t),a.d(t,{default:()=>S});var h={};a.r(h),a.d(h,{default:()=>Q});var p=a(8278),E=a(3812),d=a(3073),k=a(9403),r=a(596),A=a(8831);const B=(0,p.re)({enhance:({app:s})=>{(0,E.L4)("FontIcon")||s.component("FontIcon",k.A),(0,E.L4)("Badge")||s.component("Badge",r.A),(0,E.L4)("VPCard")||s.component("VPCard",A.A)},setup:()=>{(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var o=a(6358),g=a(9588),c=a(355),y=a(1599),v=a(5496),F=a(457),u=a(7152),m=a(5214),b=a(1219),C=a(3027),D=a(2763),f=a(6427),J=a(4864);const S=(0,p.re)({enhance:({app:s})=>{s.component("CodeTabs",u.A),(0,E.L4)("CodeGroup",s)||s.component("CodeGroup",m.lF),(0,E.L4)("CodeGroupItem",s)||s.component("CodeGroupItem",m.E7),s.component("CodeDemo",b.A),s.component("MdDemo",C.A),(0,J.tQ)(s),s.component("Mermaid",f.A)},setup:()=>{(0,D.p)()}});var M=a(3004),x=a(783),L=a(8465),w=a(641),q=a(8030),R=a(9920);(0,L.M_)((s=>{const i=s.t,a=!1!==s.I,n=s.i;return a?{title:i,content:n?()=>[(0,w.h)(x.GB,{icon:n}),i]:null,order:s.O,index:s.I}:null}));const Q=(0,p.re)({enhance:({app:s,router:i})=>{const{scrollBehavior:a}=i.options;i.options.scrollBehavior=async(...s)=>(await x.lE.wait(),a(...s)),(0,x.fk)(s),s.component("HopeIcon",x.GB),s.component("BloggerInfo",q.tI),s.component("SocialMedias",q.rS),s.component("GlobalEncrypt",R.J),s.component("LocalEncrypt",R.n)},setup:()=>{(0,x.PV)(),(0,x.i$)(),(0,q.su)()},layouts:{Layout:x.PE,NotFound:x.Mk,BlogCategory:q.Pn,BlogHome:q.qX,BlogType:q.z7,Timeline:q.Kf}}),I=[n,e,l,o,g,c,y,v,F,t,M,h].map((s=>s.default)).filter(Boolean)},8164:(s,i,a)=>{a.d(i,{J:()=>e,c:()=>n});const n=JSON.parse('{"/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%8F%91%E7%94%9F%E4%BA%86%E5%B4%A9%E6%BA%83%EF%BC%8C%E5%B7%B2%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%90%97?.html":"/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%8F%91%E7%94%9F%E4%BA%86%E5%B4%A9%E6%BA%83%EF%BC%8C%E5%B7%B2%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%90%97_.html","/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E9%94%AE%E7%9B%98%E6%95%B2%E5%85%A5%E5%AD%97%E6%AF%8D%E6%97%B6%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?.html":"/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E9%94%AE%E7%9B%98%E6%95%B2%E5%85%A5%E5%AD%97%E6%AF%8D%E6%97%B6%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_.html"}'),e=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,4298)),meta:{t:"博客主页",i:"home"}}],["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,2959)),meta:{d:1732275083e3,v:"/assets/images/cover3.jpg",e:"\n<p>一个平平无奇努力学习的全栈人。</p>\n",r:{minutes:.07,words:22},t:"我是谁",i:"circle-info",y:"a"}}],["/demo/",{loader:()=>a.e(3320).then(a.bind(a,2410)),meta:{d:1732275083e3,r:{minutes:.06,words:17},t:"主要功能与配置演示",i:"laptop-code",y:"a"}}],["/demo/disable.html",{loader:()=>a.e(2756).then(a.bind(a,7383)),meta:{d:1732275083e3,e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.4,words:120},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/encrypt.html",{loader:()=>a.e(2581).then(a.bind(a,4429)),meta:{d:1732275083e3,n:!0,r:{minutes:.49,words:146},t:"密码加密的文章",i:"lock",y:"a"}}],["/demo/layout.html",{loader:()=>a.e(6216).then(a.bind(a,6361)),meta:{d:1732275083e3,e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.51,words:153},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>a.e(8711).then(a.bind(a,1808)),meta:{d:1732275083e3,g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.5,words:1049},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>a.e(645).then(a.bind(a,2242)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!1,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html",{loader:()=>a.e(6900).then(a.bind(a,312)),meta:{d:17317152e5,l:"2024年11月16日",c:["后端"],g:["双指针","leecode"],e:"\n<h3><strong>题目：三数之和</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个整数数组 <code>nums</code>，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足以下条件：</p>\n<ul>\n<li><code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>。</li>\n<li><code>nums[i] + nums[j] + nums[k] == 0</code>。</li>\n</ul>\n<p>请返回所有和为 <code>0</code> 且不重复的三元组。</p>",r:{minutes:2.28,words:685},t:"三数之和",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E6%8E%A5%E9%9B%A8%E6%B0%B4.html",{loader:()=>a.e(5663).then(a.bind(a,1210)),meta:{d:1731888e6,l:"2024年11月18日",c:["后端"],g:["双指针","leecode"],e:'\n<h3><strong>题目：接雨水</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定 <code>n</code> 个非负整数表示每个宽度为 1 的柱子的高度图，计算它们能接住多少雨水。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span></span>\n<span class="line"><span>输出：6</span></span>\n<span class="line"><span>解释：在这种情况下，计算能接的雨水总量为 6。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:5.93,words:1780},t:"接雨水",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html",{loader:()=>a.e(410).then(a.bind(a,7708)),meta:{d:17316288e5,l:"2024年11月15日",c:["后端"],g:["双指针","leecode"],e:"\n<h3><strong>题目：盛最多水的容器</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code>，数组中的每个元素 <code>height[i]</code> 表示第 <code>i</code> 条垂线的高度。第 <code>i</code> 条垂线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code>。</p>\n<p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n",r:{minutes:2.39,words:717},t:"盛最多水的容器",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/%E7%A7%BB%E5%8A%A8%E9%9B%B6.html",{loader:()=>a.e(4499).then(a.bind(a,1565)),meta:{d:17316288e5,l:"2024年11月15日",c:["后端"],g:["双指针","leecode"],e:'\n<h3><strong>题目：移动零</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>必须在不复制数组的情况下原地对数组进行操作。</li>\n</ul>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [0, 1, 0, 3, 12]</span></span>\n<span class="line"><span>输出: [1, 3, 12, 0, 0]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.91,words:574},t:"移动零",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%93%88%E5%B8%8C/%E4%BF%A9%E6%95%B0%E4%B9%8B%E5%92%8C.html",{loader:()=>a.e(3139).then(a.bind(a,5106)),meta:{d:17316288e5,l:"2024年11月15日",c:["后端"],g:["哈希","leecode"],e:"\n<h3><strong>题目：两数之和</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <code>target</code> 的两个数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会有 <strong>一个解</strong>，并且同样的元素不能被重复利用。</p>\n<p><strong>你可以按任意顺序返回答案。</strong></p>\n<hr>\n<h3><strong>示例：</strong></h3>",r:{minutes:2.3,words:690},t:"两数之和",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%93%88%E5%B8%8C/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html",{loader:()=>a.e(507).then(a.bind(a,7207)),meta:{d:17316288e5,l:"2024年11月15日",c:["后端"],g:["哈希","leecode"],e:'\n<h3><strong>题目：字母异位词分组</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个字符串数组 <code>strs</code>，将字母异位词组合在一起。字母异位词是由重新排列源单词的所有字母得到的一个新单词。</p>\n<p><strong>示例：</strong></p>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]</span></span>\n<span class="line"><span>输出: [["eat", "tea", "ate"], ["tan", "nat"], ["bat"]]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.45,words:735},t:"字母异位词分组",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%93%88%E5%B8%8C/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97.html",{loader:()=>a.e(1623).then(a.bind(a,2470)),meta:{d:17316288e5,l:"2024年11月15日",c:["后端"],g:["哈希","leecode"],e:'\n<h3><strong>题目：最长连续序列</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个未排序的整数数组 <code>nums</code>，找出数字连续的最长序列的长度。<strong>不要求序列元素在原数组中连续</strong>。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [100, 4, 200, 1, 3, 2]</span></span>\n<span class="line"><span>输出: 4</span></span>\n<span class="line"><span>解释: 最长连续序列是 [1, 2, 3, 4]，长度为 4。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.23,words:669},t:"最长连续序列",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%AD%90%E4%B8%B2/%E5%92%8C%E4%B8%BA%20K%20%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html",{loader:()=>a.e(4882).then(a.bind(a,7258)),meta:{d:17319744e5,l:"2024年11月19日",c:["后端"],g:["子串","前缀和","leecode"],e:"\n<hr>\n<h3><strong>问题理解</strong></h3>\n<p>我们需要找到 <strong>连续子数组</strong> 的和等于给定值 <code>k</code> 的个数。</p>\n<p><strong>定义子数组</strong>：</p>\n<ul>\n<li>子数组是数组中任意连续的一段。</li>\n<li>比如，对于数组 <code>[1, 2, 3, 4]</code>，长度为 3 的子数组有 <code>[1, 2, 3]</code> 和 <code>[2, 3, 4]</code>。</li>\n</ul>\n<hr>\n<h3><strong>解题核心：前缀和 + 哈希表</strong></h3>",r:{minutes:3.7,words:1110},t:"和为 K 的子数组",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%AD%90%E4%B8%B2/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.html",{loader:()=>a.e(9020).then(a.bind(a,14)),meta:{d:17319744e5,l:"2024年11月19日",c:["后端"],g:["子串","滑动窗口","leecode"],e:'\n<h3><strong>题目：最小覆盖子串</strong></h3>\n<h4><strong>描述：</strong></h4>\n<p>给定两个字符串 <code>s</code> 和 <code>t</code>，返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>""</code>。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: s = "ADOBECODEBANC", t = "ABC"</span></span>\n<span class="line"><span>输出: "BANC"</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.14,words:1241},t:"最小覆盖子串",i:"pen-to-square",y:"a"}}],["/leetcode/%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html",{loader:()=>a.e(7333).then(a.bind(a,8249)),meta:{d:17319744e5,l:"2024年11月19日",c:["后端"],g:["子串","滑动窗口","leecode"],e:'\n<h3><strong>题目：滑动窗口最大值</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个整数数组 <code>nums</code>，和一个整数 <code>k</code>，表示滑动窗口的大小。滑动窗口从数组的最左侧向最右侧移动，每次移动一位。</p>\n<p>要求：返回每次滑动窗口中的最大值。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,3,-1,-3,5,3,6,7], k = 3</span></span>\n<span class="line"><span>输出: [3,3,5,5,6,7]</span></span>\n<span class="line"><span>解释: </span></span>\n<span class="line"><span>滑动窗口的位置                最大值</span></span>\n<span class="line"><span>---------------               -----</span></span>\n<span class="line"><span>[1  3  -1] -3  5  3  6  7       3</span></span>\n<span class="line"><span> 1 [3  -1  -3] 5  3  6  7       3</span></span>\n<span class="line"><span> 1  3 [-1  -3   5] 3  6  7       5</span></span>\n<span class="line"><span> 1  3  -1 [-3   5   3] 6  7       5</span></span>\n<span class="line"><span> 1  3  -1  -3 [5   3   6] 7       6</span></span>\n<span class="line"><span> 1  3  -1  -3   5 [3   6   7]      7</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.84,words:1452},t:"滑动窗口最大值",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%95%B0%E7%BB%84/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html",{loader:()=>a.e(5013).then(a.bind(a,1889)),meta:{d:17320608e5,l:"2024年11月20日",c:["后端"],g:["数组","leecode"],e:'\n<h3><strong>题目：合并区间</strong></h3>\n<h4><strong>描述：</strong></h4>\n<p>给定一个区间集合 <code>intervals</code>，每个区间用 <code>[starti, endi]</code> 表示。需要合并所有 <strong>重叠</strong> 的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: intervals = [[1,3],[2,6],[8,10],[15,18]]</span></span>\n<span class="line"><span>输出: [[1,6],[8,10],[15,18]]</span></span>\n<span class="line"><span>解释: 区间 [1,3] 和 [2,6] 重叠, 合并为 [1,6].</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.42,words:1025},t:"合并区间",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%95%B0%E7%BB%84/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C.html",{loader:()=>a.e(9336).then(a.bind(a,3049)),meta:{d:17319744e5,l:"2024年11月19日",c:["后端"],g:["数组","leecode"],e:'\n<h3><strong>题目：最大子数组和</strong></h3>\n<h4><strong>描述：</strong></h4>\n<p>给定一个整数数组 <code>nums</code>，请找出一个具有最大和的连续子数组（子数组最少包含一个元素），并返回其最大和。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [-2,1,-3,4,-1,2,1,-5,4]</span></span>\n<span class="line"><span>输出: 6</span></span>\n<span class="line"><span>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.68,words:803},t:"最大子数组和",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%95%B0%E7%BB%84/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0.html",{loader:()=>a.e(6293).then(a.bind(a,8725)),meta:{d:17320608e5,l:"2024年11月20日",c:["后端"],g:["数组","leecode"],e:'\n<h3><strong>题目：缺失的第一个正数</strong></h3>\n<h4><strong>描述</strong></h4>\n<p>给定一个未排序的整数数组 <code>nums</code>，请找出其中没有出现的最小的正整数。</p>\n<p>要求：</p>\n<ul>\n<li>时间复杂度为 <code>O(n)</code>。</li>\n<li>只使用常数级别的额外空间。</li>\n</ul>\n<hr>\n<h3><strong>示例</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,2,0]</span></span>\n<span class="line"><span>输出: 3</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.14,words:1242},t:"缺失的第一个正数",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%95%B0%E7%BB%84/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84.html",{loader:()=>a.e(3955).then(a.bind(a,5327)),meta:{d:17320608e5,l:"2024年11月20日",c:["后端"],g:["数组","leecode"],e:'\n<h3><strong>题目：轮转数组</strong></h3>\n<h4><strong>描述：</strong></h4>\n<p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,2,3,4,5,6,7], k = 3</span></span>\n<span class="line"><span>输出: [5,6,7,1,2,3,4]</span></span>\n<span class="line"><span>解释:</span></span>\n<span class="line"><span>向右轮转 1 步: [7,1,2,3,4,5,6]</span></span>\n<span class="line"><span>向右轮转 2 步: [6,7,1,2,3,4,5]</span></span>\n<span class="line"><span>向右轮转 3 步: [5,6,7,1,2,3,4]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.82,words:846},t:"轮转数组",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%95%B0%E7%BB%84/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF.html",{loader:()=>a.e(6076).then(a.bind(a,8255)),meta:{d:17320608e5,l:"2024年11月20日",c:["后端"],g:["数组","leecode"],e:"\n<h3><strong>题目：除自身以外数组的乘积</strong></h3>\n<h4><strong>描述</strong></h4>\n<p>给定一个整数数组 <code>nums</code>，返回数组 <code>answer</code>，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。</p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>不允许使用除法。</li>\n<li>时间复杂度要求为 <code>O(n)</code>。</li>\n</ul>",r:{minutes:2.74,words:822},t:"除自身以外数组的乘积",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html",{loader:()=>a.e(2841).then(a.bind(a,376)),meta:{d:17319744e5,l:"2024年11月19日",c:["后端"],g:["滑动窗口","leecode"],e:'\n<h3><strong>题目：找到字符串中所有字母异位词</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到字符串 <code>s</code> 中所有 <code>p</code> 的异位词的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: s = "cbaebabacd", p = "abc"</span></span>\n<span class="line"><span>输出: [0, 6]</span></span>\n<span class="line"><span>解释:</span></span>\n<span class="line"><span>起始索引 0 的子串是 "cba"，是 "abc" 的异位词。</span></span>\n<span class="line"><span>起始索引 6 的子串是 "bac"，是 "abc" 的异位词。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.93,words:880},t:"找到字符串中所有字母异位词",i:"pen-to-square",y:"a"}}],["/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.html",{loader:()=>a.e(4338).then(a.bind(a,2469)),meta:{d:1731888e6,l:"2024年11月18日",c:["后端"],g:["滑动窗口","leecode"],e:'\n<h3><strong>题目：无重复字符的最长子串</strong></h3>\n<p><strong>描述：</strong></p>\n<p>给定一个字符串 <code>s</code>，找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<hr>\n<h3><strong>示例：</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: s = "abcabcbb"</span></span>\n<span class="line"><span>输出: 3</span></span>\n<span class="line"><span>解释: 最长子串是 "abc"，其长度为 3。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.76,words:829},t:"无重复字符的最长子串",i:"pen-to-square",y:"a"}}],["/leetcode/%E7%9F%A9%E9%98%B5/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html",{loader:()=>a.e(7527).then(a.bind(a,1026)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["矩阵","leecode"],e:'\n<h4>题目描述</h4>\n<p>编写一个高效的算法来搜索 <code>m x n</code> 矩阵 <code>matrix</code> 中的一个目标值 <code>target</code>。</p>\n<p>矩阵具有以下特性：</p>\n<ol>\n<li>每行的元素从左到右升序排列。</li>\n<li>每列的元素从上到下升序排列。</li>\n</ol>\n<hr>\n<h4>示例</h4>\n<p><strong>示例 1：</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：matrix = [</span></span>\n<span class="line"><span>  [1, 4, 7, 11, 15],</span></span>\n<span class="line"><span>  [2, 5, 8, 12, 19],</span></span>\n<span class="line"><span>  [3, 6, 9, 16, 22],</span></span>\n<span class="line"><span>  [10, 13, 14, 17, 24],</span></span>\n<span class="line"><span>  [18, 21, 23, 26, 30]</span></span>\n<span class="line"><span>], target = 5</span></span>\n<span class="line"><span>输出：true</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.9,words:869},t:"搜索二维矩阵",i:"pen-to-square",y:"a"}}],["/leetcode/%E7%9F%A9%E9%98%B5/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.html",{loader:()=>a.e(3159).then(a.bind(a,891)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["矩阵","leecode"],e:'\n<h4>题目描述</h4>\n<p>给定一个 <code>n × n</code> 的二维矩阵 <code>matrix</code> 表示一个图像。将图像顺时针旋转 90 度，要求：</p>\n<ul>\n<li>必须<strong>原地</strong>旋转，即直接修改输入的二维矩阵。</li>\n<li>不允许使用额外的矩阵辅助旋转。</li>\n</ul>\n<h4>示例</h4>\n<p><strong>示例 1：</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>\n<span class="line"><span>matrix = [</span></span>\n<span class="line"><span>  [1, 2, 3],</span></span>\n<span class="line"><span>  [4, 5, 6],</span></span>\n<span class="line"><span>  [7, 8, 9]</span></span>\n<span class="line"><span>]</span></span>\n<span class="line"><span>输出：</span></span>\n<span class="line"><span>[</span></span>\n<span class="line"><span>  [7, 4, 1],</span></span>\n<span class="line"><span>  [8, 5, 2],</span></span>\n<span class="line"><span>  [9, 6, 3]</span></span>\n<span class="line"><span>]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.67,words:802},t:"旋转图像",i:"pen-to-square",y:"a"}}],["/leetcode/%E7%9F%A9%E9%98%B5/%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6.html",{loader:()=>a.e(8641).then(a.bind(a,755)),meta:{d:17320608e5,l:"2024年11月20日",c:["后端"],g:["矩阵","leecode"],e:'\n<h3><strong>题目：矩阵置零</strong></h3>\n<h4><strong>描述</strong></h4>\n<p>给定一个 <code>m x n</code> 的矩阵，如果其中一个元素为 <code>0</code>，则将其所在行和列的所有元素都设置为 <code>0</code>。要求使用 <strong>原地算法</strong>，即在不使用额外空间的情况下完成操作。</p>\n<hr>\n<h3><strong>示例</strong></h3>\n<p><strong>示例 1</strong>：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span></span>\n<span class="line"><span>输出：[[1,0,1],[0,0,0],[1,0,1]]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.55,words:1064},t:"矩阵置零",i:"pen-to-square",y:"a"}}],["/leetcode/%E7%9F%A9%E9%98%B5/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html",{loader:()=>a.e(5126).then(a.bind(a,1187)),meta:{d:17324064e5,l:"2024年11月24日",c:["后端"],g:["矩阵","leecode"],e:'\n<hr>\n<h3>题目：54. 螺旋矩阵</h3>\n<h4>题目描述</h4>\n<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code>，请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p>\n<h4>示例</h4>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: matrix = [</span></span>\n<span class="line"><span>  [1, 2, 3],</span></span>\n<span class="line"><span>  [4, 5, 6],</span></span>\n<span class="line"><span>  [7, 8, 9]</span></span>\n<span class="line"><span>]</span></span>\n<span class="line"><span>输出: [1, 2, 3, 6, 9, 8, 7, 4, 5]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.2,words:1260},t:"螺旋矩阵",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html",{loader:()=>a.e(4045).then(a.bind(a,7893)),meta:{d:1733184e6,l:"2024年12月3日",c:["后端"],g:["链表","快慢指针","leecode"],e:'\n<h3>合并两个有序链表</h3>\n<h4>题目描述</h4>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<p><strong>示例 1：</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：l1 = [1,2,4], l2 = [1,3,4]</span></span>\n<span class="line"><span>输出：[1,1,2,3,4,4]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.34,words:1003},t:"合并两个有序链表",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E4%BF%A9%E6%95%B0%E7%9B%B8%E5%8A%A0.html",{loader:()=>a.e(6606).then(a.bind(a,5632)),meta:{d:1749186205e3,c:["算法"],g:["链表","leetcode"],e:'\n<h3><strong>题目：两数相加</strong></h3>\n<h4><strong>描述</strong></h4>\n<p>给定两个非空链表，表示两个非负整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<hr>\n<h3><strong>示例</strong></h3>\n<p><strong>示例 1:</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: l1 = [2,4,3], l2 = [5,6,4]</span></span>\n<span class="line"><span>输出: [7,0,8]</span></span>\n<span class="line"><span>解释: 342 + 465 = 807</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.99,words:1198},t:"两数相加",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html",{loader:()=>a.e(5396).then(a.bind(a,8759)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["链表","leecode"],e:'\n<h4>题目描述</h4>\n<p>给定单链表的头节点 <code>head</code>，请你反转链表，并返回反转后的链表。</p>\n<hr>\n<h4>示例</h4>\n<p><strong>示例 1</strong>：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：head = [1, 2, 3, 4, 5]</span></span>\n<span class="line"><span>输出：[5, 4, 3, 2, 1]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.29,words:988},t:"反转链表",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8.html",{loader:()=>a.e(2018).then(a.bind(a,4798)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["链表","快慢指针","leecode"],e:'\n<h4>题目描述</h4>\n<p>给定一个单链表的头节点 <code>head</code>，判断该链表是否为<strong>回文链表</strong>。如果是，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n<hr>\n<h4>示例</h4>\n<p><strong>示例 1</strong>：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：head = [1,2,2,1]</span></span>\n<span class="line"><span>输出：true</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.06,words:918},t:"回文链表",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II.html",{loader:()=>a.e(9164).then(a.bind(a,939)),meta:{d:17330976e5,l:"2024年12月2日",c:["后端"],g:["链表","快慢指针","leecode"],e:"\n<h4>题目描述</h4>\n<p>给定一个链表的头节点 <code>head</code>，返回链表开始入环的第一个节点。如果链表无环，则返回 <code>null</code>。</p>\n<ul>\n<li><strong>链表中有环</strong>：链表的某个节点的 <code>next</code> 指针指向了链表中某个先前的节点，形成一个环。即从某个节点开始，你可以一直沿着 <code>next</code> 指针循环回到该节点。</li>\n<li><strong>链表中没有环</strong>：链表的每个节点的 <code>next</code> 指针指向 <code>null</code>，并且遍历完链表后会到达末尾。</li>\n</ul>",r:{minutes:4.28,words:1283},t:"环形链表 II",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html",{loader:()=>a.e(6376).then(a.bind(a,8919)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["链表","快慢指针","leecode"],e:"\n<h4>题目描述</h4>\n<p>给定一个链表的头节点 <code>head</code>，判断链表中是否存在环。</p>\n<ul>\n<li><strong>链表中有环</strong>：链表的某个节点的 <code>next</code> 指针指向了链表中某个先前的节点，形成一个环。即从某个节点开始，你可以一直沿着 <code>next</code> 指针循环回到该节点。</li>\n<li><strong>链表中没有环</strong>：链表的每个节点的 <code>next</code> 指针指向 <code>null</code>，并且遍历完链表后会到达末尾。</li>\n</ul>\n<p>你需要实现一个高效的算法，判断链表是否有环。</p>",r:{minutes:3.39,words:1016},t:"环形链表",i:"pen-to-square",y:"a"}}],["/leetcode/%E9%93%BE%E8%A1%A8/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.html",{loader:()=>a.e(2253).then(a.bind(a,3701)),meta:{d:17324928e5,l:"2024年11月25日",c:["后端"],g:["链表","leecode"],e:'\n<h4>题目描述</h4>\n<p>给定两个单链表的头节点 <code>headA</code> 和 <code>headB</code>，找出并返回两个链表相交的起始节点。如果两个链表不存在相交节点，则返回 <code>null</code>。</p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>整个链表结构中不存在环。</li>\n<li>返回的节点需要是两个链表实际相交的节点，而不是一个新的节点。</li>\n<li>不可以破坏链表的原始结构。</li>\n</ul>\n<hr>\n<h4>示例</h4>\n<p><strong>示例 1</strong>：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：headA = [4,1,8,4,5], headB = [5,0,1,8,4,5]</span></span>\n<span class="line"><span>输出：Intersected at \'8\'</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.31,words:992},t:"相交链表",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/Rpc.html",{loader:()=>a.e(2812).then(a.bind(a,2148)),meta:{d:1752053793e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>🧯 前言：什么是 RPC？为啥要它？</h2>\n<p>先打个比方：</p>\n<p>👉 你去餐厅点菜，你只负责“点”，不关心厨师怎么做、厨房在哪。你说：“我要一份麻辣烫”，然后等着吃。</p>\n<p><strong>RPC（Remote Procedure Call，远程过程调用）</strong> 就像这样：</p>\n<ul>\n<li>你是客户端</li>\n<li>餐厅是服务器</li>\n<li>厨房逻辑封装好了</li>\n<li>你用“本地方式”发出“远程请求”，结果返回到你手里</li>\n</ul>\n<p><strong>一句话理解：</strong></p>\n<blockquote>\n<p>RPC 让你像调用本地函数一样，去调用另一台服务器上的服务。</p>\n</blockquote>",r:{minutes:3.19,words:956},t:"🧠 如果让你设计一个 RPC 框架，你该怎么做？",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/mq.html",{loader:()=>a.e(4261).then(a.bind(a,9600)),meta:{d:1752325831e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>📌 什么是消息队列？一句话说清楚</h2>\n<blockquote>\n<p>消息队列（Message Queue）是一个系统中用来传话的“快递中转站”。</p>\n</blockquote>\n<p>它负责把“消息”从发送方（生产者）<strong>传递</strong>到接收方（消费者）——\n而且还能：</p>\n<ul>\n<li>保证不会丢件（消息不丢失）✅</li>\n<li>顺序到达（支持顺序消费）✅</li>\n<li>如果收件人晚点来也没关系（异步解耦）✅</li>\n</ul>\n<h3>🧠 举个例子：</h3>\n<p>淘宝订单支付成功后，会发生很多事：</p>\n<ul>\n<li>给你发短信</li>\n<li>给仓库发发货请求</li>\n<li>给商家发账单</li>\n</ul>",r:{minutes:4.01,words:1203},t:"🚀 从零开始教你设计一个消息队列系统（MQ）：通俗易懂、细节到位",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/mq%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F.html",{loader:()=>a.e(2216).then(a.bind(a,5607)),meta:{d:1752325831e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>🎯 为什么这个问题很重要？</h2>\n<p>面试官问这个问题，其实是想考你两个核心能力：</p>\n<ol>\n<li><strong>对消息消费流程是否熟悉？</strong></li>\n<li><strong>能否根据业务需求选择合适的方式？</strong></li>\n</ol>\n<p>但很多人回答都是一句话：“Kafka 用拉，RabbitMQ 用推”，没有深入细节、没有类比解释、没有系统思考。</p>\n<p>本篇我们从 0 到 1，搞清楚以下问题：</p>\n<ul>\n<li>推模式 vs 拉模式到底差在哪？</li>\n<li>各有什么优缺点？</li>\n<li>哪些场景适合推？哪些适合拉？</li>\n<li>Kafka、RabbitMQ 等主流 MQ 怎么选的？</li>\n<li>实战中如何设计出一个可控的消费流程？</li>\n</ul>",r:{minutes:3.7,words:1109},t:"📮 消息队列到底该用推（Push）还是拉（Pull）？一文吃透两种模式！",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E4%BE%8B.html",{loader:()=>a.e(4555).then(a.bind(a,8034)),meta:{d:1752425897e3,c:["后端"],g:["Java","面试","场景"],e:'\n<hr>\n<h2>🧩 1. 什么是单例？什么是分布式单例？</h2>\n<p>我们先说说**单例模式（Singleton）**是干嘛的。</p>\n<p>👉 在 Java 里，我们希望一个类的对象<strong>只存在一份实例</strong>，整个程序都共享这个对象，这就是单例模式。你可能写过这样的代码：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> INSTANCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Singleton</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> INSTANCE;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.41,words:1023},t:"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>a.e(8672).then(a.bind(a,9880)),meta:{d:1752509415e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>🧱 背景介绍：为什么需要分布式锁？</h2>\n<p>先看常见场景：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多服务部署的库存扣减</td>\n<td>多个服务节点并发更新库存，导致库存为负</td>\n</tr>\n<tr>\n<td>定时任务</td>\n<td>多个实例执行重复任务</td>\n</tr>\n<tr>\n<td>防止重复提交</td>\n<td>用户疯狂点击按钮，创建多个重复订单</td>\n</tr>\n</tbody>\n</table>\n<p><strong>传统锁（如 ReentrantLock）仅在当前进程内有效，无法跨 JVM 实例、跨服务节点协调</strong>。</p>",r:{minutes:2.95,words:885},t:"💡Redis 分布式锁实现原理 + Java 完整实现教程",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E5%B9%B6%E5%8F%91%E6%B5%81%E7%BB%9F%E8%AE%A1.html",{loader:()=>a.e(3375).then(a.bind(a,3197)),meta:{d:1752129326e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>📖 背景场景（题目）</h2>\n<p>有一张数据库表，包含以下字段：</p>\n<ul>\n<li><code>id</code>：主键，自增</li>\n<li><code>start_time</code>：业务开始时间</li>\n<li><code>end_time</code>：业务结束时间</li>\n</ul>\n<p>表中一共有 <strong>5000 万条记录</strong>，每条记录代表一个“时间段”（例如一个用户会话、一次任务执行等）。</p>\n<blockquote>\n<p>💡 问题是：<strong>在所有时间点中，哪一秒并发量最大？最多有多少条记录在该秒同时处于活动状态？</strong></p>\n</blockquote>",r:{minutes:3.1,words:931},t:"🚀 如何用扫描线算法统计最大并发数？以 5000 万条记录为例讲清楚！",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8Cdfa%E7%AE%97%E6%B3%95%E8%84%B1%E6%95%8F.html",{loader:()=>a.e(3346).then(a.bind(a,6691)),meta:{d:1751869331e3,c:["后端"],g:["Java","面试","场景"],e:"\n<h2>1️⃣ 背景介绍</h2>\n<p>在一次支付宝的营销活动中，由于 <strong>运营配置错误</strong>，原本应该给用户发放「满减」优惠券，却被误配成了「8 折优惠」，导致大规模资金损失。</p>\n<p>👉 <strong>核心问题</strong>：运营人员在配置营销模板时，把优惠额度和优惠类型都写错了。</p>\n<p>这类事故提醒我们：<strong>系统要有能力帮助用户防止低级错误，避免人为疏忽带来巨大损失。</strong></p>\n<hr>\n<h2>2️⃣ 事故的本质原因</h2>\n<p>根据公开信息，事故原因是：</p>\n<ul>\n<li>运维或运营人员配置营销活动模板时出错。</li>\n<li>系统缺乏多重防护机制，错误配置直接生效。</li>\n<li>缺乏实时监控与熔断机制。</li>\n</ul>",r:{minutes:3.21,words:963},t:"🚀 支付宝 8 折优惠事故背后的技术反思：如何设计系统避免低级失误？",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E7%9F%AD%E9%93%BE%E6%8E%A5.html",{loader:()=>a.e(4077).then(a.bind(a,2415)),meta:{d:1752425897e3,c:["后端"],g:["Java","面试","场景"],e:'\n<hr>\n<h2>🎯 背景：什么是短链接？为什么要设计它？</h2>\n<p>在实际开发中，我们经常会遇到一些<strong>超长 URL</strong>，例如：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://www.jd.com/special/activity/2024-07-13/ads/campaign?id=987654321&amp;user=abc</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.48,words:1044},t:"🔗 短链接系统全流程设计详解：从原理到落地，一篇看懂！",i:"pen-to-square",y:"a"}}],["/tech/%E5%9C%BA%E6%99%AF/%E7%A7%92%E6%9D%80.html",{loader:()=>a.e(9017).then(a.bind(a,5662)),meta:{d:1752129326e3,c:["后端"],g:["Java","面试","场景"],e:"\n<hr>\n<h2>🧯 一句话介绍什么是秒杀？</h2>\n<blockquote>\n<p>秒杀（flash sale）= 瞬间有大量用户同时请求一个极少的库存资源（比如抢 10 台手机，100 万人点进来）</p>\n</blockquote>\n<p>它是对系统<strong>并发能力、限流策略、数据一致性、业务稳定性</strong>的全方位考验。</p>\n<hr>\n<h2>🎯 秒杀系统的核心难点（你必须解决）</h2>\n<ol>\n<li><strong>瞬时流量暴涨</strong>：百万请求在 1 秒内涌入</li>\n<li><strong>防止超卖</strong>：库存不能卖超</li>\n<li><strong>用户去重</strong>：一个用户只能买一次</li>\n<li><strong>系统抗压</strong>：要保护核心系统不被打挂</li>\n<li><strong>兜底方案</strong>：即使秒杀失败，也能优雅提示</li>\n</ol>",r:{minutes:3.49,words:1046},t:"🚀 从零教你如何设计一个高并发“秒杀”系统？",i:"pen-to-square",y:"a"}}],["/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%8F%91%E7%94%9F%E4%BA%86%E5%B4%A9%E6%BA%83%EF%BC%8C%E5%B7%B2%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%90%97_.html",{loader:()=>a.e(4201).then(a.bind(a,9715)),meta:{d:17597952e5,l:"2025年10月7日",c:["后端"],g:["奶奶八股"],e:'\n<h2>🎯 Page Cache完整教程 - 奶奶都能懂版</h2>\n<h3>📚 第一章：什么是Page Cache？（就像家里的临时储物间）</h3>\n<h4>1.1 Page Cache是什么？</h4>\n<p>根据<a href="https://xiaolincoding.com/os/6_file_system/pagecache.html#page-cache-%E4%B8%8E-buffer-cache" target="_blank" rel="noopener noreferrer">小林coding的文章</a>，Page Cache就像您家里的<strong>临时储物间</strong>：</p>',r:{minutes:9.82,words:2946},t:"进程写文件时，进程发生了崩溃，已写入的数据会丢失吗？",i:"pen-to-square",y:"a"}}],["/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E9%94%AE%E7%9B%98%E6%95%B2%E5%85%A5%E5%AD%97%E6%AF%8D%E6%97%B6%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_.html",{loader:()=>a.e(3417).then(a.bind(a,3175)),meta:{d:17597088e5,l:"2025年10月6日",c:["后端"],g:["奶奶八股"],e:"\n<h2>🎯 键盘输入完整教程 - 奶奶都能懂版</h2>\n<h3>📚 第一章：先了解基本概念（就像认识新朋友）</h3>\n<h4>1.1 什么是操作系统？</h4>\n<p>想象操作系统就像一个<strong>超级管家</strong>，管理着家里的所有电器：</p>\n<ul>\n<li>电灯（显示器）</li>\n<li>电视（应用程序）</li>\n<li>空调（其他设备）</li>\n<li><strong>门铃（键盘）</strong> ← 今天的主角</li>\n</ul>\n<h4>1.2 键盘是什么？</h4>\n<p>键盘就像家里的<strong>门铃按钮</strong>：</p>\n<ul>\n<li>你按一下，门铃就响</li>\n<li>你按键盘，电脑就知道你要输入什么</li>\n</ul>",r:{minutes:7.19,words:2156},t:"键盘敲入字母时，期间发生了什么？",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8A.html",{loader:()=>a.e(7019).then(a.bind(a,5640)),meta:{d:17311968e5,l:"2024年11月10日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<hr>\n<h1>Java 语言基础面试题</h1>\n<h2>1. Java 语言有哪些特点？</h2>\n<ul>\n<li><strong>简洁性</strong>：Java 语言的语法比 C++ 简单，去掉了一些复杂的功能（如指针、头文件）。</li>\n<li><strong>面向对象</strong>：Java 是一种面向对象的语言，所有代码都围绕对象进行设计。</li>\n<li><strong>跨平台性</strong>：Java 程序可以在任何支持 Java 的设备上运行，这得益于 Java 的字节码技术。</li>\n<li><strong>内存管理</strong>：Java 自动管理内存，通过垃圾回收机制（GC）来清理不再使用的对象。</li>\n<li><strong>安全性</strong>：Java 提供了一些安全机制，如 Java 沙箱模型，防止恶意代码访问系统资源。</li>\n</ul>",r:{minutes:5.19,words:1556},t:"Java基础面试题上",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%8B.html",{loader:()=>a.e(1556).then(a.bind(a,7398)),meta:{d:17311968e5,l:"2024年11月10日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<hr>\n<h1>Java 基础知识面试问题详解</h1>\n<h2>异常处理</h2>\n<h3>1. Exception 和 Error 有什么区别？</h3>\n<ul>\n<li><strong>Exception</strong>：表示程序在运行时的非严重问题，是可以捕获并处理的异常。如文件未找到（<code>FileNotFoundException</code>）或数组越界（<code>ArrayIndexOutOfBoundsException</code>）。</li>\n<li><strong>Error</strong>：表示系统级的严重错误，通常无法恢复或处理，如内存不足（<code>OutOfMemoryError</code>）。程序一般不需要处理 <code>Error</code>。</li>\n</ul>",r:{minutes:5.16,words:1547},t:"Java基础面试题下",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E4%B8%AD.html",{loader:()=>a.e(1894).then(a.bind(a,5051)),meta:{d:17311968e5,l:"2024年11月10日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<hr>\n<h1>Java 面向对象基础</h1>\n<h2>1. 面向对象和面向过程的区别</h2>\n<ul>\n<li><strong>面向过程</strong>：注重流程，程序设计就是按步骤实现功能。每一步骤处理不同的任务，适合小型、功能简单的程序。</li>\n<li><strong>面向对象</strong>：注重对象，将现实中的事物抽象为对象，通过对象来管理数据和功能。适合大型、复杂系统，因为面向对象有较好的扩展性和重用性。</li>\n</ul>\n<p><strong>例子</strong>：如果做一个家庭管理系统，面向过程可能是写一系列功能的代码，比如增加家庭成员、计算家庭总开销等。而面向对象会将家庭成员、支出等作为对象，每个对象有自己的属性和方法，更易维护和扩展。</p>",r:{minutes:5.48,words:1644},t:"Java基础面试题中",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html",{loader:()=>a.e(7972).then(a.bind(a,5959)),meta:{d:17315424e5,l:"2024年11月14日",c:["后端"],g:["Java","并发","后端开发技巧"],e:"\n<h3>1. 什么是线程和进程？</h3>\n<ul>\n<li><strong>进程</strong> 是程序的执行实例，具有独立的地址空间和资源。每个进程之间相互隔离，操作系统为每个进程分配独立的内存和资源。</li>\n<li><strong>线程</strong> 是进程中的最小执行单位，多个线程共享进程的内存和资源，因此它们比进程更轻量。线程在同一进程中执行并共享数据。</li>\n</ul>\n<p><strong>区别</strong>:</p>\n<ul>\n<li>进程有独立的内存空间，而线程共享进程的内存。</li>\n<li>线程创建和销毁的开销比进程小。</li>\n<li>线程间的通信比进程间通信更高效。</li>\n</ul>",r:{minutes:4.06,words:1217},t:"Java并发面试题上",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html",{loader:()=>a.e(6187).then(a.bind(a,3432)),meta:{d:17334432e5,l:"2024年12月6日",c:["后端"],g:["Java","并发","后端开发技巧"],e:'\n<hr>\n<h4>1.1 <strong>ThreadLocal 有什么用？</strong></h4>\n<p><code>ThreadLocal</code> 为每个线程提供独立的变量副本，可以避免不同线程之间的共享和竞争，使得每个线程访问的都是自己本地的变量。</p>\n<h4>1.2 <strong>如何使用 ThreadLocal？</strong></h4>\n<p>可以通过以下方式使用 <code>ThreadLocal</code>：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 创建 ThreadLocal 对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ThreadLocal</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> threadLocal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ThreadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 设置值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获取值</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 删除值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:5.52,words:1656},t:"Java并发面试题下",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%AD.html",{loader:()=>a.e(1261).then(a.bind(a,1702)),meta:{d:17334432e5,l:"2024年12月6日",c:["后端"],g:["Java","并发","后端开发技巧"],e:"\n<hr>\n<h3>1. <strong>JMM (Java 内存模型)</strong></h3>\n<h4>1.1 JMM 的作用</h4>\n<p>JMM 是 Java 虚拟机定义的一套内存模型规范，用于屏蔽不同硬件和操作系统的内存访问差异，保证 Java 并发程序的可见性、原子性和有序性。</p>\n<h4>1.2 关键概念</h4>\n<ul>\n<li><strong>主内存</strong>：所有线程共享的内存，所有变量都存储在主内存中。</li>\n<li><strong>工作内存</strong>：每个线程有独立的工作内存，用于存储主内存中变量的副本。</li>\n</ul>\n<h4>1.3 JMM 的三个核心特性</h4>",r:{minutes:5.18,words:1553},t:"Java并发面试题中",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93.html",{loader:()=>a.e(8510).then(a.bind(a,1399)),meta:{d:17315424e5,l:"2024年11月14日",c:["后端"],g:["Java","集合","后端开发技巧"],e:'\n<h3>集合判空</h3>\n<p>判断集合是否为空可以通过 <code>isEmpty()</code> 或 <code>size()</code> 方法：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"集合为空"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.98,words:294},t:"Java集合操作总结",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html",{loader:()=>a.e(7130).then(a.bind(a,4180)),meta:{d:1731456e6,l:"2024年11月13日",c:["后端"],g:["Java","集合","后端开发技巧"],e:"\n<hr>\n<h3>1. <strong>List, Set, Queue, Map 四者的区别</strong>：</h3>\n<ul>\n<li><strong>List</strong>：<code>List</code> 是一个有序集合，允许元素重复，并且可以通过索引访问元素。它实现了 <code>RandomAccess</code> 接口，意味着它支持基于索引的快速访问，因此在频繁进行随机访问时具有优势。常见实现包括 <code>ArrayList</code> 和 <code>LinkedList</code>。\n<ul>\n<li><strong>使用场景</strong>：适合需要频繁随机访问或按顺序处理元素的场景。</li>\n</ul>\n</li>\n<li><strong>Set</strong>：<code>Set</code> 是一个不允许元素重复的集合，元素的顺序通常不确定（对于 <code>HashSet</code> 来说）。<code>TreeSet</code> 提供了按自然顺序或自定义排序的功能。<code>LinkedHashSet</code> 保持插入顺序。\n<ul>\n<li><strong>使用场景</strong>：适合去重操作或需要保证无重复元素的场景。</li>\n</ul>\n</li>\n<li><strong>Queue</strong>：<code>Queue</code> 是一种遵循 FIFO（先进先出）原则的集合，用于在队列中按顺序处理元素。<code>PriorityQueue</code> 根据元素的优先级而非插入顺序出队。\n<ul>\n<li><strong>使用场景</strong>：适用于任务调度、生产者消费者模式等需要顺序处理的场景。</li>\n</ul>\n</li>\n<li><strong>Map</strong>：<code>Map</code> 是一个键值对集合，其中每个键映射到一个唯一的值。<code>HashMap</code> 提供了最快的查找速度，而 <code>TreeMap</code> 按键的自然顺序进行排序，<code>LinkedHashMap</code> 保留插入顺序。\n<ul>\n<li><strong>使用场景</strong>：适用于需要通过键快速查找值的场景。</li>\n</ul>\n</li>\n</ul>",r:{minutes:6.9,words:2069},t:"Java集合面试题上",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html",{loader:()=>a.e(5073).then(a.bind(a,9112)),meta:{d:17315424e5,l:"2024年11月14日",c:["后端"],g:["Java","集合","后端开发技巧"],e:"\n<h3><strong>1. <code>HashMap</code> 和 <code>Hashtable</code> 的区别：</strong></h3>\n<ol>\n<li>\n<p><strong>线程安全性</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 是线程安全的，它的所有方法都被 <code>synchronized</code> 修饰。由于对整个数据结构加锁，性能会有一定的影响，尤其在多线程环境下竞争较激烈时，可能导致较低的效率。</li>\n<li><strong><code>HashMap</code></strong> 是非线程安全的，但性能较高。为了保证线程安全，可以使用 <code>ConcurrentHashMap</code> 代替。</li>\n</ul>\n</li>\n<li>\n<p><strong>对 <code>null</code> 值的支持</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 不允许 <code>null</code> 键和值。若尝试插入 <code>null</code>，会抛出 <code>NullPointerException</code>。</li>\n<li><strong><code>HashMap</code></strong> 允许一个 <code>null</code> 键和多个 <code>null</code> 值。</li>\n</ul>\n</li>\n<li>\n<p><strong>初始化容量和扩容规则</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 默认初始容量为 11，负载因子为 0.75，扩容时将容量变为原来的 2n + 1。</li>\n<li><strong><code>HashMap</code></strong> 默认初始容量为 16，负载因子为 0.75，扩容时将容量翻倍。<code>HashMap</code> 使用 2 的幂次方来扩展容量，这是为了提高性能，避免哈希冲突。</li>\n</ul>\n</li>\n<li>\n<p><strong>继承体系</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 继承自 <code>Dictionary</code> 类，<code>Dictionary</code> 是 JDK 1.0 引入的，已被弃用。</li>\n<li><strong><code>HashMap</code></strong> 继承自 <code>AbstractMap</code>，并实现了 <code>Map</code> 接口。</li>\n</ul>\n</li>\n<li>\n<p><strong>迭代器</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 使用 <code>Enumeration</code> 进行迭代，而 <code>Enumeration</code> 并不支持 fail-fast 机制，即修改集合时不会抛出异常。</li>\n<li><strong><code>HashMap</code></strong> 使用 <code>Iterator</code>，它是 fail-fast 的，如果在迭代过程中修改集合，将抛出 <code>ConcurrentModificationException</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong>底层实现</strong>：</p>\n<ul>\n<li><strong><code>Hashtable</code></strong> 底层使用的是数组加链表来存储数据，但没有进行链表转红黑树的优化。</li>\n<li><strong><code>HashMap</code></strong> 在 JDK 1.8 以后对哈希冲突的处理做了优化，当链表长度超过阈值时（默认为 8），会将链表转换为红黑树以提高查询性能。</li>\n</ul>\n</li>\n</ol>",r:{minutes:3.57,words:1070},t:"Java集合面试题下",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/MongoDB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89.html",{loader:()=>a.e(8285).then(a.bind(a,3882)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["MongoDB","数据库"],e:"\n<p>MongoDB 是一个广泛使用的 NoSQL 数据库，它以高性能、灵活的存储方式和可扩展性在许多应用中占据了重要位置。在面试 MongoDB 相关岗位时，常见的面试题目会涉及其基本概念、存储结构、应用场景、聚合查询、事务等方面。以下是 MongoDB 常见面试题总结（上），将帮助你深入理解 MongoDB 的基本功能和特性。</p>\n<hr>\n<h3>1. <strong>MongoDB 是什么？</strong></h3>\n<p>MongoDB 是一个开源的、基于文档的 NoSQL 数据库。它使用 BSON（Binary JSON）格式存储数据，支持灵活的数据模型。与关系型数据库不同，MongoDB 使用集合（collection）来存储文档（document），并且不需要预定义的模式（schema），这使得它非常适合快速变化的数据结构。</p>",r:{minutes:6.32,words:1896},t:"MongoDB常见面试题（上）",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/MongoDB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89.html",{loader:()=>a.e(3292).then(a.bind(a,4755)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["MongoDB","数据库"],e:"\n<p>在 MongoDB 面试中，除了基本的操作和概念，面试官还会关注 MongoDB 的高级特性和应用场景，特别是在索引、高可用性、分片、复制集等方面。以下是 MongoDB 常见面试题总结（下），涵盖了索引的使用、高可用性配置及其在大规模系统中的应用。</p>\n<hr>\n<h3>1. <strong>MongoDB 索引</strong></h3>\n<h4>1.1 <strong>MongoDB 索引有什么用？</strong></h4>\n<p>索引是提升数据库查询效率的关键数据结构。在 MongoDB 中，索引用于加速数据查询操作，减少全表扫描。没有索引的查询操作可能非常慢，尤其是在数据量大的时候。MongoDB 支持多种索引类型，能够根据不同的应用场景和查询需求进行优化。</p>",r:{minutes:5.41,words:1624},t:"MongoDB常见面试题（下）",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html",{loader:()=>a.e(3188).then(a.bind(a,5753)),meta:{d:17322336e5,l:"2024年11月22日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. MySQL 基础</strong></h2>\n<h3><strong>1.1 什么是关系型数据库？</strong></h3>\n<p>关系型数据库是一种使用 <strong>行和列的表格结构</strong> 存储和管理数据的数据库模型，数据之间通过关系（如主键和外键）关联。</p>\n<ul>\n<li>常见的关系型数据库有：MySQL、PostgreSQL、Oracle、SQL Server 等。</li>\n</ul>\n<hr>\n<h3><strong>1.2 什么是 SQL？</strong></h3>\n<p>SQL（Structured Query Language）是用于操作和查询关系型数据库的标准语言，包括数据定义、查询、更新和控制。</p>",r:{minutes:4.4,words:1319},t:"MySQL常见面试题",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E9%AB%98%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",{loader:()=>a.e(9680).then(a.bind(a,6972)),meta:{d:17322336e5,l:"2024年11月22日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 数据库命名规范</strong></h2>\n<h3><strong>1.1 基础命名规则</strong></h3>\n<ol>\n<li>\n<p><strong>数据库名称</strong>：清晰表达业务含义，禁止使用拼音或缩写。</p>\n<ul>\n<li>示例：<code>user_management</code>（用户管理数据库）</li>\n</ul>\n</li>\n<li>\n<p><strong>表名称</strong>：采用小写字母 + 下划线命名，必须能表达数据内容。</p>\n<ul>\n<li>示例：<code>user_info</code>（用户信息表），<code>order_details</code>（订单详情表）</li>\n</ul>\n</li>\n<li>\n<p><strong>字段名称</strong>：小写字母命名，避免缩写或拼音，需简洁且易懂。</p>\n<ul>\n<li>示例：<code>created_at</code>（创建时间字段），<code>order_id</code>（订单 ID）</li>\n</ul>\n</li>\n<li>\n<p><strong>索引名称</strong>：以 <code>idx_</code> 开头，后跟表名和字段名。</p>\n<ul>\n<li>示例：<code>idx_user_email</code>（表示 <code>user_info</code> 表上的 <code>email</code> 字段索引）</li>\n</ul>\n</li>\n<li>\n<p><strong>约束名称</strong>：使用前缀标明类型：</p>\n<ul>\n<li><code>pk_</code> 表示主键（Primary Key）</li>\n<li><code>fk_</code> 表示外键（Foreign Key）</li>\n<li>示例：<code>pk_user_id</code>，<code>fk_order_user_id</code></li>\n</ul>\n</li>\n</ol>",r:{minutes:4.32,words:1295},t:"MySQL高性能优化",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89.html",{loader:()=>a.e(1102).then(a.bind(a,8036)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["Redis","数据库"],e:"\n<hr>\n<h2><strong>1. Redis 事务</strong></h2>\n<h3><strong>1.1 什么是 Redis 事务？</strong></h3>\n<p>Redis 事务是一组命令的集合，可以一次性按顺序执行。</p>\n<ul>\n<li><strong>事务特点</strong>：\n<ul>\n<li>批量操作按顺序执行。</li>\n<li>不支持部分回滚：即使某个命令失败，其他命令仍然会执行。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><strong>1.2 如何使用 Redis 事务？</strong></h3>\n<ol>\n<li><strong>开启事务</strong>：<code>MULTI</code></li>\n<li><strong>执行命令</strong>：事务中的命令会被加入队列，暂不执行。</li>\n<li><strong>提交事务</strong>：<code>EXEC</code>，批量执行命令。</li>\n<li><strong>放弃事务</strong>：<code>DISCARD</code>，清空队列。</li>\n</ol>",r:{minutes:4.84,words:1453},t:"Redis常见面试题总结(下)",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93(%E4%B8%8A).html",{loader:()=>a.e(7969).then(a.bind(a,7364)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["Redis","数据库"],e:"\n<hr>\n<h2><strong>1. Redis 基础</strong></h2>\n<h3><strong>1.1 什么是 Redis？</strong></h3>\n<p>Redis 是一个开源的 <strong>高性能分布式内存数据库</strong>，支持多种数据结构，用于缓存、消息队列、分布式锁、实时统计等。</p>\n<p><strong>回答方式</strong>：Redis 是内存型数据库，它的核心特性是高性能和多数据结构支持。</p>\n<hr>\n<h3><strong>1.2 Redis 为什么这么快？</strong></h3>\n<ol>\n<li><strong>数据存储在内存</strong>：\n<ul>\n<li>读写操作在内存中完成，访问速度快。</li>\n</ul>\n</li>\n<li><strong>单线程模型</strong>：\n<ul>\n<li>避免了多线程的上下文切换和锁竞争。</li>\n</ul>\n</li>\n<li><strong>高效数据结构</strong>：\n<ul>\n<li>使用优化后的跳表、哈希表等数据结构。</li>\n</ul>\n</li>\n<li><strong>I/O 多路复用</strong>：\n<ul>\n<li>基于 <code>epoll</code> 的非阻塞 I/O 模型，同时处理大量请求。</li>\n</ul>\n</li>\n</ol>",r:{minutes:4.91,words:1472},t:"Redis常见面试题总结(上)",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/NoSQl.html",{loader:()=>a.e(4759).then(a.bind(a,7700)),meta:{d:17321472e5,l:"2024年11月21日",c:["后端"],g:["数据库"],e:"\n<hr>\n<h3><strong>1. NoSQL 是什么？</strong></h3>\n<p>NoSQL（Not Only SQL）是指一类非关系型数据库，它不使用传统的关系模型，而是根据数据的特定需求选择合适的存储模型，如键值对、文档、列族、图形等。</p>\n<hr>\n<h3><strong>2. SQL 和 NoSQL 有什么区别？</strong></h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>SQL （关系型数据库）</th>\n<th>NoSQL （非关系型数据库）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>数据模型</strong></td>\n<td>表格（行和列）</td>\n<td>键值对、文档、列族、图形等</td>\n</tr>\n<tr>\n<td><strong>模式</strong></td>\n<td>固定模式（Schema）</td>\n<td>无需固定模式，灵活的数据结构</td>\n</tr>\n<tr>\n<td><strong>扩展性</strong></td>\n<td>垂直扩展（升级硬件）</td>\n<td>水平扩展（增加服务器节点）</td>\n</tr>\n<tr>\n<td><strong>事务支持</strong></td>\n<td>强事务支持（ACID）</td>\n<td>弱事务支持，通常是 BASE 模型</td>\n</tr>\n<tr>\n<td><strong>查询语言</strong></td>\n<td>使用标准的 SQL 语句</td>\n<td>使用特定 API 或自定义查询语法</td>\n</tr>\n</tbody>\n</table>",r:{minutes:1.58,words:475},t:"NoSQL",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(3364).then(a.bind(a,9136)),meta:{d:17321472e5,l:"2024年11月21日",c:["后端"],g:["数据库"],e:"\n<hr>\n<h3><strong>1. 什么是字符集？</strong></h3>\n<p>字符集是一个 <strong>字符集合</strong>，它定义了可以使用的字符范围。<br>\n字符集包含字母、数字、符号和控制字符等，用于支持不同语言和地区的文字表示。</p>\n<ul>\n<li><strong>简单定义</strong>：字符集定义了哪些字符可以被存储和处理。</li>\n<li><strong>面试点</strong>：不同字符集之间的兼容性和支持范围的差异。</li>\n</ul>\n<hr>\n<h3><strong>2. 什么是字符编码？</strong></h3>\n<p>字符编码是将 <strong>字符集中的字符</strong> 转换为计算机可以理解的二进制形式的规则。</p>",r:{minutes:3.46,words:1039},t:"字符集详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80.html",{loader:()=>a.e(8315).then(a.bind(a,721)),meta:{d:17321472e5,l:"2024年11月21日",c:["后端"],g:["数据库"],e:"\n<h3><strong>1. 数据库、数据库管理系统、数据库系统、数据库管理员</strong></h3>\n<ul>\n<li><strong>数据库</strong>：一种数据的有序集合，存储在计算机中，可以被访问、管理和更新。</li>\n<li><strong>数据库管理系统（DBMS）</strong>：用于创建、管理和操作数据库的软件，如 MySQL、PostgreSQL 等。</li>\n<li><strong>数据库系统</strong>：包括数据库、数据库管理系统及相关工具的整体。</li>\n<li><strong>数据库管理员（DBA）</strong>：负责数据库的设计、管理和维护的专业人员。</li>\n</ul>",r:{minutes:2.16,words:648},t:"数据库基础",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/Mysql%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(4104).then(a.bind(a,7933)),meta:{d:17235072e5,l:"2024年8月13日",c:["开发工具"],g:["开发工具"],e:'\n<h2>一、下载</h2>\n<p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener noreferrer">下载地址</a><br>\n下载第一个zip压缩包<br>\n\n<strong>下一个页面直接选左下角的no thanks .....直接开始下载</strong>\n下载后解压缩</p>\n<h2>二、配置文件</h2>\n<p>1.在解压后的文件夹中新建txt文件，并改为my.ini<br>\n</p>\n<p>2.双击打开my.ini文件，将下面代码复制进去，<em><strong>注意：1.修改其中的安装目录和存放目录，下面是我的路径，根据需要修改。2.端口号如果冲突也可以根据需要修改</strong></em></p>',r:{minutes:2.55,words:764},t:"Mysql安装",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/Navicat16%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB.html",{loader:()=>a.e(1282).then(a.bind(a,8372)),meta:{d:17235072e5,l:"2024年8月13日",c:["开发工具"],g:["开发工具"],e:'\n<p>navicat需要付费，本文是navicat16的安装及免费激活的过程 。\n<strong>需要注意的是，navicat安装完成后不要立即打开软件，先进行激活操作</strong></p>\n<ol>\n<li>百度网盘下载安装包及激活码<br>\n链接：<a href="https://pan.baidu.com/s/1pzxioGGFWVc2Z58uv-a9bA?pwd=6t7t" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1pzxioGGFWVc2Z58uv-a9bA?pwd=6t7t </a><br>\n提取码：<code>6t7t</code></li>\n<li>安装\n打开<code>navicat163_premium_cs_x64</code>文件<br>\n下一步 -&gt; 我同意  下一步 -&gt; 选择安装路径 下一步 -&gt; 创建桌面图标 下一步<br></li>\n<li>解压<code>Navicat16.3补丁.zip</code></li>\n<li>双击无限使用Navicat.bat。正常情况是窗口闪一下就消失了</li>\n<li>将winmm.dll复制到安装Navicat的路径中</li>\n<li>打开navicat，如果没有提示试用，则说明成功了。</li>\n</ol>',r:{minutes:.67,words:202},t:"Navicat16下载及免费激活",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/chocolatey%E7%9A%84%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(941).then(a.bind(a,4254)),meta:{d:17235072e5,l:"2024年8月13日",c:["开发工具"],g:["开发工具"],e:'\n<h2>什么是chocolatey</h2>\n<p>该软件是一个开源源代码的软件包管理系统可以实现一键升级以及一键安装一件卸载功能</p>\n<h2>安装</h2>\n<ol>\n<li>进入官网<a href="https://chocolatey.org/install#individual" target="_blank" rel="noopener noreferrer">chocolatey官网</a></li>\n<li>选择选择powershell安装（如何打开powershell：底部搜索框输入powershell，用管理员身份打开）\n</li>\n<li>先在打开的powershell 中输入：<code>Get-ExecutionPolicy</code></li>\n</ol>',r:{minutes:1.87,words:562},t:"chocolatey的安装",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/fnm%E7%9A%84%E5%AE%89%E8%A3%85.html",{loader:()=>a.e(9497).then(a.bind(a,7701)),meta:{d:17235072e5,l:"2024年8月13日",c:["开发工具"],g:["开发工具"],e:'\n<ol>\n<li>首先要安装chocolatey，如果还未安装可以参考：<a href="/newBlog/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/chocolatey%E7%9A%84%E5%AE%89%E8%A3%85.html" target="_blank">chocolatey的安装</a></li>\n<li>安装fnm\n管理员模式打开终端或powershell，输入<code>choco install fnm</code>\n</li>\n<li>测试fnm命令\n打开Powershell输入<code>fnm -h</code>测试命令是否正常\n</li>\n</ol>',r:{minutes:.35,words:106},t:"fnm的安装",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%82%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1.html",{loader:()=>a.e(8400).then(a.bind(a,691)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["数据库","后端开发技巧"],e:"\n<h2>数据库事务的特性</h2>\n<ol>\n<li>原子性：一个事务包含的行为要么全部成功，要么全部不成功，如果在执行中间发生错误，则会进行事务回滚，回滚到事务开始之前的状态</li>\n<li>一致性：事务执行完毕后不会对数据库的完整性造成破坏</li>\n<li>事务的隔离：由于数据库的事务支持多线程，事务隔离是为了防止多个线程的事务造成数据不一致\n持久性：事务完成后，对数据的修改是永久的，哪怕系统故障也不会消失</li>\n</ol>\n<h2>数据库事务的隔离级别</h2>\n<ol>\n<li>未提交读：可以读到其他线程修改但没提交的数据，如果那个线程产生错误从而导致回滚，那么这次读取的数据就是脏数据</li>\n<li>提交读：事务在读取数据的过程中，有其他线程事务修改了数据，造成前后数据不一致</li>\n<li>重复读：一开始读取数据为空，但是尝试修改这条不存在的数据却成功了，此时再读取该数据又可以读取到了</li>\n<li>串行读：是最严格的隔离级别。严格按照先后次序执行，但会造成效率大大下降</li>\n</ol>",r:{minutes:1.21,words:364},t:"数据库事务",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html",{loader:()=>a.e(1028).then(a.bind(a,1438)),meta:{d:17312832e5,l:"2024年11月11日",c:["计算机基础"],g:["Linux"],e:"<hr>\n<h1>Linux基础知识总结</h1>\n<h3>1. <strong>Linux 简介</strong></h3>\n<p>Linux 是一个开源的类 Unix 操作系统。它由 Linus Torvalds 在 1991 年发布，最初是一个基于 MINIX 内核的小型操作系统。随着时间的推移，Linux 已经发展成为一款功能强大、跨平台的操作系统，广泛应用于个人电脑、服务器、移动设备等各种硬件上。与传统的操作系统（如 Windows）不同，Linux 采用开放源代码的开发模式，任何人都可以查看、修改和分发其源代码。</p>\n<h3>2. <strong>Linux 诞生</strong></h3>",r:{minutes:5.52,words:1657},t:"Linux基础知识总结",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/Shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html",{loader:()=>a.e(8352).then(a.bind(a,9508)),meta:{d:17312832e5,l:"2024年11月11日",c:["计算机基础"],g:["Shell"],e:"\n<h3>1. 为什么要学 Shell？</h3>\n<p>Shell 编程是自动化和系统管理中不可或缺的工具，尤其是在 Linux 和 Unix 系统中。通过 Shell，用户可以实现自动化任务、批处理操作、系统监控等。它可以简化复杂操作、提高工作效率。</p>\n<h3>2. 什么是 Shell？</h3>\n<p>Shell 是一种命令行接口，它允许用户与操作系统进行交互。Shell 提供了一个命令行界面（CLI），让用户能够输入命令并通过脚本执行任务。常见的 Shell 包括 Bash、Zsh、Ksh 等。</p>\n<h3>3. Shell 编程的 Hello World 示例</h3>\n<p>Shell 程序通常以 <code>.sh</code> 为扩展名，可以通过命令行运行。一个简单的 Hello World 示例：</p>",r:{minutes:2.73,words:820},t:"Shell基础知识总结",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html",{loader:()=>a.e(4232).then(a.bind(a,222)),meta:{d:17312832e5,l:"2024年11月11日",c:["计算机基础"],g:["操作系统"],e:"<hr>\n<h1>操作系统面试题上</h1>\n<hr>\n<h2>操作系统基础</h2>\n<h3>1. 什么是操作系统？</h3>\n<p>操作系统（Operating System，OS）是管理计算机硬件和软件资源的系统软件。它充当用户与硬件之间的桥梁，负责控制和协调计算机的运行，使用户和应用程序可以方便、有效地使用系统资源。</p>\n<h3>2. 操作系统主要有哪些功能？</h3>\n<p>操作系统主要功能包括：</p>\n<ul>\n<li><strong>进程管理</strong>：创建、调度和终止进程，管理进程间的通信和同步。</li>\n<li><strong>内存管理</strong>：分配和回收内存，为进程提供内存空间。</li>\n<li><strong>文件系统管理</strong>：提供文件存储、访问和管理。</li>\n<li><strong>设备管理</strong>：控制和管理硬件设备，提供输入输出操作接口。</li>\n<li><strong>安全管理</strong>：提供用户认证、权限管理等，保护系统安全。</li>\n<li><strong>网络管理</strong>：支持网络连接和数据传输。</li>\n</ul>",r:{minutes:6.19,words:1856},t:"操作系统面试题上",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html",{loader:()=>a.e(895).then(a.bind(a,6807)),meta:{d:17312832e5,l:"2024年11月11日",c:["计算机基础"],g:["操作系统"],e:"\n<hr>\n<h2>内存管理</h2>\n<h3>1. 内存管理主要做了什么？</h3>\n<p>内存管理是操作系统用于管理和分配计算机主内存（RAM）的机制，主要功能包括：</p>\n<ul>\n<li><strong>内存分配与回收</strong>：为进程和系统分配内存并在释放时进行回收。</li>\n<li><strong>地址映射</strong>：将程序的虚拟地址转换为实际的物理地址。</li>\n<li><strong>内存保护</strong>：确保进程只能访问自己的内存，防止越界访问。</li>\n<li><strong>内存共享</strong>：允许进程间共享特定的内存区域，优化资源使用。</li>\n<li><strong>分页与分段</strong>：通过分段和分页减少碎片、提升内存利用率。</li>\n</ul>",r:{minutes:4.83,words:1449},t:"操作系统面试题下",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html",{loader:()=>a.e(5644).then(a.bind(a,4323)),meta:{d:17311968e5,l:"2024年11月10日",c:["计算机基础"],g:["计算机网络"],e:"<hr>\n<h1>计算机网络基础面试题上</h1>\n<h2>网络分层模型</h2>\n<ul>\n<li><strong>OSI 模型</strong>（七层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li>\n<li><strong>TCP/IP 模型</strong>（四层）：网络接口层、网络层、传输层、应用层。</li>\n</ul>\n<p><strong>例子</strong>：发送一个网页请求时，数据从应用层逐层向下传输，到达物理层后进行传输，然后逐层向上传输到服务器的应用层，完成一次完整的数据交换。</p>\n<hr>\n<h2>常见网络协议</h2>\n<ul>\n<li><strong>TCP</strong>：面向连接的可靠传输协议，适合文件传输、电子邮件等需要可靠性的数据传输。</li>\n<li><strong>UDP</strong>：面向无连接、不可靠的数据传输协议，适合视频流、实时语音等需要快速传输的应用。</li>\n<li><strong>HTTP</strong>：超文本传输协议，无状态的应用层协议，用于网页数据传输。</li>\n</ul>",r:{minutes:5.35,words:1604},t:"计算机网络基础面试题上",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html",{loader:()=>a.e(3747).then(a.bind(a,4021)),meta:{d:17311968e5,l:"2024年11月10日",c:["计算机基础"],g:["计算机网络"],e:"<hr>\n<h1>计算机网络基础面试题下</h1>\n<h4>1. <strong>TCP与UDP的区别（重要）</strong></h4>\n<ul>\n<li><strong>TCP</strong>（传输控制协议）是一种<strong>面向连接</strong>的协议。它保证数据的<strong>可靠性</strong>，通过<strong>确认应答</strong>、<strong>重传机制</strong>、<strong>顺序控制</strong>来确保数据正确无误地到达。TCP连接需要在通信前建立（即<strong>三次握手</strong>）并且在数据传输后关闭（即<strong>四次挥手</strong>）。</li>\n<li><strong>UDP</strong>（用户数据报协议）是<strong>无连接</strong>的协议。它不保证数据的可靠性，不进行数据排序，也不进行重传，适用于实时传输、广播和多播等场景。UDP的传输速度比TCP更快，因为它没有这些控制机制。</li>\n</ul>",r:{minutes:4.84,words:1452},t:"计算机网络基础面试题下",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/BigDecimal%20%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(8360).then(a.bind(a,5680)),meta:{d:17330976e5,l:"2024年12月2日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>在 Java 中，浮点数类型（<code>float</code> 和 <code>double</code>）由于其二进制表示的限制，无法精确表示十进制的小数，尤其是进行金融计算等需要高精度的场景时，浮点数类型可能会导致精度丢失。为了在需要高精度计算的场景中避免精度问题，Java 提供了 <code>BigDecimal</code> 类，它可以用于表示任意精度的浮动小数，并提供丰富的数学运算方法。</p>\n<hr>\n<h3>1. <strong>BigDecimal 介绍</strong></h3>\n<p><code>BigDecimal</code> 类是 <code>java.math</code> 包中的一个类，用于进行高精度的算术运算。与浮点数类型不同，<code>BigDecimal</code> 可以精确地表示任意大小和精度的小数。通常用于财务计算、货币兑换、统计学等要求高精度的应用中。</p>",r:{minutes:4.14,words:1241},t:"BigDecimal 详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20SPI%20%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(445).then(a.bind(a,9883)),meta:{d:1733184e6,l:"2024年12月3日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<h4>1. <strong>何谓 SPI?</strong></h4>\n<p>SPI（Service Provider Interface，服务提供者接口）是 Java 中一种机制，允许开发者通过配置文件扩展框架的功能。SPI 让你能够在不修改框架或程序源代码的情况下提供自定义的实现。它主要用于插件式架构，允许动态加载不同的实现类。</p>\n<p>SPI 是一种设计模式，它允许接口和实现类分离，开发者在运行时可以灵活地选择和替换实现。</p>\n<h4>2. <strong>SPI 和 API 有什么区别?</strong></h4>\n<ul>\n<li>\n<p><strong>API（Application Programming Interface）</strong>：API 是一组预定义的接口和方法，开发者使用这些接口来与外部系统或库进行交互。API 是一个暴露给外部的规范或契约。</p>\n</li>\n<li>\n<p><strong>SPI（Service Provider Interface）</strong>：SPI 是一种约定，它允许开发者为某个 API 提供自己的实现，特别是在一个应用框架中。通过 SPI，开发者可以替换或扩展框架的实现，而无需修改框架本身的代码。</p>\n</li>\n</ul>",r:{minutes:3.77,words:1130},t:"Java SPI 机制详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(2178).then(a.bind(a,7089)),meta:{d:17330976e5,l:"2024年12月2日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>代理模式（Proxy Pattern）是一种结构型设计模式，允许通过代理对象来控制对目标对象的访问。代理对象通过实现与目标对象相同的接口，将目标对象的操作委托给目标对象执行，并且可以在委托的基础上增加额外的操作。代理模式常用于以下场景：远程代理、虚拟代理、保护代理、智能代理等。</p>\n<hr>\n<h3>1. <strong>代理模式</strong></h3>\n<p>代理模式的核心思想是通过创建一个代理类来控制对目标类的访问。代理类与目标类通常实现相同的接口，在代理类中可以加入额外的处理逻辑，比如权限控制、日志记录、延迟加载等。代理模式本质上是一种将方法调用委托给另一个对象的设计模式。</p>",r:{minutes:5.42,words:1627},t:"Java 代理模式详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(2510).then(a.bind(a,6588)),meta:{d:17330976e5,l:"2024年12月2日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>Java 反射机制是 Java 提供的一种强大的功能，允许程序在运行时动态地获取类的信息，并操作类的对象。反射不仅能够访问类的结构，还能够动态地调用类的方法、获取字段信息、甚至修改字段值。反射通常用于框架设计、序列化、持久化、依赖注入等场景。</p>\n<hr>\n<h3>1. <strong>何为反射？</strong></h3>\n<p>反射（Reflection）是 Java 的一种机制，它允许程序在运行时动态地查看和修改对象的属性、方法、构造器等信息。通过反射，可以对类进行操作，即使在编译时并不清楚类的具体类型。</p>\n<p>在反射机制下，所有的 Java 类都可以通过 <code>Class</code> 类来访问。使用 <code>Class</code> 类，程序能够在运行时加载、操作、修改类的结构。</p>",r:{minutes:3.83,words:1148},t:"Java 反射机制详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(3313).then(a.bind(a,5930)),meta:{d:17330976e5,l:"2024年12月2日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>Java 序列化是指将对象转换为字节流的过程，以便将其写入文件、发送到网络中，或存储到数据库中。反序列化则是序列化的逆过程，将字节流转换回原始对象。序列化在分布式系统、缓存、持久化等场景中被广泛使用。本文将深入探讨 Java 的序列化及其常见协议。</p>\n<hr>\n<h3>1. <strong>什么是序列化和反序列化？</strong></h3>\n<ul>\n<li><strong>序列化</strong>：序列化是将对象转换为字节流的过程。它能够将对象的状态保存下来，以便后续能够恢复原始对象。序列化通常用于网络通信、缓存、文件存储等场景。</li>\n<li><strong>反序列化</strong>：反序列化是序列化的逆过程，将字节流恢复成原始对象。在接收到序列化的字节流后，反序列化将这些字节重新转换为对象。</li>\n</ul>",r:{minutes:5.08,words:1524},t:"Java 序列化详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E8%AF%AD%E6%B3%95%E7%B3%96%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(101).then(a.bind(a,1012)),meta:{d:1733184e6,l:"2024年12月3日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>Java 语法糖是指对 Java 语法的增强，使得编程更简洁、易懂，但并不会改变语言的功能或底层实现。语法糖通常是对语言表达能力的扩展，以使开发者可以编写更简洁、易于维护的代码。下面我们详细介绍 Java 中的常见语法糖。</p>\n<hr>\n<h3>1. <strong>什么是语法糖？</strong></h3>\n<p>语法糖（Syntactic Sugar）是指在编程语言中，一些为了简化代码编写而引入的语法特性。它们使得代码更加简洁、易读，但并没有增加新的功能或能力。语法糖的引入通常是为了让开发者减少手动重复的工作，提高开发效率和可维护性。</p>\n<h3>2. <strong>Java 中有哪些常见的语法糖？</strong></h3>",r:{minutes:4.7,words:1410},t:"Java 语法糖详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%20%E9%AD%94%E6%B3%95%E7%B1%BB%20Unsafe%20%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(4175).then(a.bind(a,7032)),meta:{d:1733184e6,l:"2024年12月3日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<h4>1. <strong>Unsafe 介绍</strong></h4>\n<p><code>Unsafe</code> 是 Java 的一个内部类，属于 <code>sun.misc</code> 包。它提供了一些底层的操作功能，这些操作在 Java 语言的常规 API 中是不可访问的。由于其强大的功能，它被称为 "魔法类"。<code>Unsafe</code> 主要用于开发性能关键的代码，底层库的实现，甚至在一些特殊情况下，修改 Java 堆栈、直接操作内存和对象等。</p>\n<p>然而，由于其功能非常强大，<code>Unsafe</code> 是非标准的工具，不建议直接使用。在 JDK9 及以后，<code>Unsafe</code> 的使用受到了更严格的限制，但它依然在 Java 的运行时中扮演着重要角色。</p>',r:{minutes:4.52,words:1355},t:"Java 魔法类 Unsafe 详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(1933).then(a.bind(a,4626)),meta:{d:17311968e5,l:"2024年11月10日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<hr>\n<h1>Java 参数传递机制详解</h1>\n<h2>1. 形参 &amp; 实参</h2>\n<ul>\n<li><strong>形参</strong>（形式参数）：是方法定义时的参数名，占位符，用于方法内部。比如 <code>void add(int x)</code> 中的 <code>x</code>。</li>\n<li><strong>实参</strong>（实际参数）：在调用方法时传入的真实值，比如 <code>add(5)</code> 中的 <code>5</code>。</li>\n</ul>\n<h2>2. 值传递 &amp; 引用传递</h2>\n<ul>\n<li><strong>值传递</strong>：方法接收的是参数值的副本。对副本的修改不会影响原始值。</li>\n<li><strong>引用传递</strong>：方法接收的是参数引用的副本，修改引用会直接影响原始对象（因为引用的是同一个内存地址）。</li>\n</ul>",r:{minutes:3.77,words:1132},t:"Java值传递详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayBlockingQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20.html",{loader:()=>a.e(927).then(a.bind(a,228)),meta:{d:17333568e5,l:"2024年12月5日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<h4>1. 阻塞队列简介</h4>\n<p><strong>阻塞队列（BlockingQueue）</strong> 是 Java 中用于多线程环境的一种线程安全队列，它在添加或获取元素时可以阻塞线程，直到队列状态满足操作条件。</p>\n<ul>\n<li>如果队列为空，获取元素的操作会阻塞线程，直到有新元素可用。</li>\n<li>如果队列已满，添加元素的操作会阻塞线程，直到队列有空余空间。</li>\n</ul>\n<p>阻塞队列广泛用于生产者-消费者模型，常见实现有：</p>\n<ul>\n<li><strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列。</li>\n<li><strong>LinkedBlockingQueue</strong>：基于链表的有界阻塞队列。</li>\n<li><strong>PriorityBlockingQueue</strong>：带优先级的阻塞队列。</li>\n<li><strong>DelayQueue</strong>：延迟队列，支持定时任务。</li>\n</ul>",r:{minutes:5.05,words:1515},t:"ArrayBlockingQueue",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(9481).then(a.bind(a,7698)),meta:{d:17315424e5,l:"2024年11月14日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:'\n<h3><code>ArrayList</code> 核心源码解读与扩容机制分析</h3>\n<h4><strong>ArrayList 扩容机制</strong></h4>\n<p><code>ArrayList</code> 的底层实现依赖一个数组，当元素数量达到数组的最大容量时，<code>ArrayList</code> 会自动扩容。扩容的过程是通过 <code>grow</code> 方法进行的，该方法通常会将当前数组的容量增大为原容量的 1.5 倍。为了避免内存浪费，扩容操作会保证新数组的大小至少为所需的最小容量。</p>\n<ol>\n<li>\n<p><strong>扩容过程</strong>：<br>\n当调用 <code>add()</code> 方法往 <code>ArrayList</code> 中添加元素时，如果当前数组没有足够的空间，<code>ArrayList</code> 会调用 <code>ensureCapacityInternal()</code> 方法确保容量足够。如果当前数组容量不足，<code>grow()</code> 方法会被调用来扩展数组。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> grow</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> minCapacity) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> oldCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> newCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> oldCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (oldCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">  // 扩容为原容量的1.5倍</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (newCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> minCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 如果新容量不够，设为最小容量</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        newCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> minCapacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (newCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> MAX_ARRAY_SIZE)  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 防止容量超过最大值</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        newCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hugeCapacity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(minCapacity)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(elementData, newCapacity);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n<li>\n<p><strong><code>ensureCapacityInternal()</code></strong>：<br>\n这个方法确保 <code>ArrayList</code> 的容量至少为所需容量，若当前容量不足会调用 <code>grow()</code> 扩容。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ensureCapacityInternal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> minCapacity) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[DEFAULT_CAPACITY]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">  // 默认容量</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (minCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        grow</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(minCapacity)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>\n</ol>',r:{minutes:2.46,words:737},t:"ArrayList",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ConcurrentHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(5859).then(a.bind(a,4178)),meta:{d:17332704e5,l:"2024年12月4日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<p><code>ConcurrentHashMap</code> 是 Java 中一个线程安全的哈希表实现，主要用于高并发场景下存储键值对。它的设计目标是通过分段锁的方式来实现并发访问控制，从而提高性能和吞吐量。</p>\n<p><code>ConcurrentHashMap</code> 在 Java 1.7 和 1.8 中有较大的差异，尤其是在其存储结构、并发控制和扩容策略上。下面将分别从 Java 1.7 和 Java 1.8 两个版本进行详细的源码分析。</p>\n<hr>\n<h2>1. ConcurrentHashMap 1.7</h2>\n<h3>1.1 存储结构</h3>\n<p><code>ConcurrentHashMap</code> 1.7 使用了**分段锁（Segment）**的设计来实现高效的并发。它将整个哈希表分为多个“段”，每个段内部都维护一个哈希表，并且每个段有独立的锁。这种设计允许多个线程并发地操作不同段中的数据，从而避免锁的竞争。</p>",r:{minutes:4.74,words:1423},t:"ConcurrentHashMap",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/CopyOnWriteArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(3612).then(a.bind(a,5809)),meta:{d:17333568e5,l:"2024年12月5日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<p><code>CopyOnWriteArrayList</code> 是 Java 提供的一个线程安全的 <code>List</code> 实现类，它主要用于高并发场景下对集合的读取操作频繁，但修改操作较少的情况。该类基于 <strong>Copy-On-Write</strong>（COW）模式，即在进行修改操作时，实际上会复制一份原有的数组进行修改，这样能有效保证并发读写时的线程安全。</p>\n<h3>1. CopyOnWriteArrayList 简介</h3>\n<p><code>CopyOnWriteArrayList</code> 是 <code>java.util.concurrent</code> 包中的一个类，继承自 <code>AbstractList</code>，并实现了 <code>List</code> 接口。它的内部数据结构是基于一个 <strong>数组</strong> 来存储元素，而不是像 <code>ArrayList</code> 一样直接操作数组。</p>",r:{minutes:4.64,words:1392},t:"CopyOnWriteArrayList",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/DelayQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(6810).then(a.bind(a,8943)),meta:{d:17333568e5,l:"2024年12月5日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<h4>1. DelayQueue 简介</h4>\n<p><code>DelayQueue</code> 是 Java 中一个基于 <strong>优先级队列（PriorityQueue）</strong> 的无界阻塞队列，它能够存储实现了 <code>Delayed</code> 接口的元素，并且只有在元素的延迟时间到期后才能从队列中取出。</p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>元素实现了 <code>Delayed</code> 接口，必须定义自身的延迟时间。</li>\n<li>元素按照延迟时间排序，延迟时间最短的元素在队头。</li>\n<li>支持阻塞式的获取操作，只有延迟时间到期的元素才能被取出。</li>\n<li>线程安全，通过 <code>ReentrantLock</code> 和条件变量实现。</li>\n</ul>",r:{minutes:4.13,words:1240},t:"DelayQueue",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/HashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(338).then(a.bind(a,7888)),meta:{d:17332704e5,l:"2024年12月4日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<p><code>HashMap</code> 是 Java 中常用的基于哈希表实现的映射集合，它用于存储键值对（key-value）形式的元素，并支持高效的查找、插入、删除操作。通过哈希表的方式，它能够在大多数情况下实现常数时间复杂度 ( O(1) ) 的查找、插入和删除操作。</p>\n<h4>HashMap 简介</h4>\n<p><code>HashMap</code> 实现了 <code>Map</code> 接口，它存储键值对映射，并且允许键和值为 <code>null</code>。<code>HashMap</code> 并不是线程安全的，如果需要线程安全的映射结构，可以使用 <code>ConcurrentHashMap</code> 或通过 <code>Collections.synchronizedMap()</code> 方法来包装 <code>HashMap</code>。</p>",r:{minutes:4.64,words:1393},t:"HashMap",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/LinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(8867).then(a.bind(a,7210)),meta:{d:17333568e5,l:"2024年12月5日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<p><code>LinkedHashMap</code> 是 Java 中的一种 HashMap 的子类，继承了 <code>HashMap</code> 的所有特性，并且保留了元素的插入顺序或访问顺序。它实现了 <code>Map</code> 接口，并且提供了基于链表的有序遍历，主要有两个重要的特性：</p>\n<ul>\n<li><strong>插入顺序</strong>：保持元素插入时的顺序。</li>\n<li><strong>访问顺序</strong>：按照元素被访问的顺序进行遍历。</li>\n</ul>\n<h3>1. LinkedHashMap 简介</h3>\n<p><code>LinkedHashMap</code> 是一种特殊的 <code>HashMap</code>，它不仅具有 <code>HashMap</code> 的快速查找、插入和删除性能，还保持了插入顺序或访问顺序。它的底层实现是双向链表与哈希表结合的结构。</p>",r:{minutes:4.34,words:1303},t:"LinkedHashMap",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/LinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",{loader:()=>a.e(9015).then(a.bind(a,7710)),meta:{d:17332704e5,l:"2024年12月4日",c:["后端"],g:["Java","源码分析","后端开发技巧"],e:"\n<h3>LinkedList 简介</h3>\n<p><code>LinkedList</code> 是 Java 中一种链表数据结构，它实现了 <code>List</code> 接口，并提供了高效的插入和删除操作。与 <code>ArrayList</code> 等基于数组的数据结构不同，<code>LinkedList</code> 是由一系列节点组成的，每个节点包含数据以及指向下一个节点的引用。</p>\n<h3>LinkedList 插入和删除元素的时间复杂度</h3>\n<ul>\n<li>\n<p><strong>插入元素</strong>：</p>\n<ul>\n<li>在链表的头部或尾部插入元素的时间复杂度是 ( O(1) )，因为只需要修改头节点或尾节点的引用。</li>\n<li>在链表的中间插入元素的时间复杂度是 ( O(n) )，需要遍历链表找到插入位置。</li>\n</ul>\n</li>\n<li>\n<p><strong>删除元素</strong>：</p>\n<ul>\n<li>删除头部或尾部元素的时间复杂度是 ( O(1) )。</li>\n<li>删除链表中的任意元素的时间复杂度是 ( O(n) )，需要遍历链表找到要删除的元素。</li>\n</ul>\n</li>\n</ul>",r:{minutes:3.44,words:1033},t:"LinkedList",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%AF%B9MVCC%E7%9A%84%E5%AE%9E%E7%8E%B0.html",{loader:()=>a.e(2316).then(a.bind(a,1426)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 什么是 MVCC（多版本并发控制）？</strong></h2>\n<p>MVCC（Multi-Version Concurrency Control）是一种并发控制机制，旨在通过保存数据的多个版本，在不加锁的情况下实现高效的事务隔离，从而提升数据库的并发性能。</p>\n<h3><strong>1.1 MVCC 的核心目标</strong></h3>\n<ol>\n<li>提高并发性能，避免事务间的锁等待。</li>\n<li>实现一致性非锁定读，提升读操作效率。</li>\n</ol>\n<hr>\n<h2><strong>2. 一致性非锁定读和锁定读</strong></h2>",r:{minutes:4.83,words:1449},t:"InnoDB对MVCC的实现",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%20%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B.html",{loader:()=>a.e(41).then(a.bind(a,1677)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:'\n<hr>\n<h2><strong>1. 不要用字符串存储日期</strong></h2>\n<h3><strong>1.1 为什么不能用字符串存储日期？</strong></h3>\n<ol>\n<li>\n<p><strong>数据校验问题</strong>：</p>\n<ul>\n<li>使用字符串存储无法保证数据格式的正确性。</li>\n<li>示例：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> orders (order_date) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'2023-13-01\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">-- 不合法的日期</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p><strong>存储效率低</strong>：</p>\n<ul>\n<li>日期类型比字符串类型占用更少的存储空间。\n<ul>\n<li><code>DATETIME</code>：8 字节。</li>\n<li>字符串（<code>CHAR(19)</code>）：19 字节。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>查询效率低</strong>：</p>\n<ul>\n<li>字符串存储无法利用日期函数进行高效操作（如排序、范围查询）。</li>\n</ul>\n</li>\n<li>\n<p><strong>不易操作</strong>：</p>\n<ul>\n<li>日期字段可以直接使用 <code>DATE</code>、<code>TIME</code> 函数，而字符串需要先解析后操作。</li>\n</ul>\n</li>\n</ol>',r:{minutes:3.48,words:1043},t:"MySQL日期类型",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(3196).then(a.bind(a,2947)),meta:{d:17322336e5,l:"2024年11月22日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>前言</strong></h2>\n<p>MySQL 的日志机制是保障数据安全、优化性能的核心部分。主要包含以下三种日志：</p>\n<ol>\n<li><strong>redo log</strong>：用于<strong>恢复已提交的事务</strong>，保证事务的持久性。</li>\n<li><strong>binlog</strong>：记录数据库的更改操作，<strong>支持数据恢复和主从复制</strong>。</li>\n<li><strong>undo log</strong>：用于<strong>事务回滚和多版本并发控制（MVCC）</strong>。</li>\n</ol>",r:{minutes:4.17,words:1251},t:"MySQL三大日志详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html",{loader:()=>a.e(3852).then(a.bind(a,9553)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 什么是事务隔离级别？</strong></h2>\n<p>事务的隔离级别是数据库在处理多个并发事务时，定义的读写操作隔离程度。它决定了一个事务是否能读取其他事务的未提交数据或正在操作的数据。</p>\n<p>SQL 标准定义了四种隔离级别，从低到高分别是：</p>\n<ol>\n<li><strong>读未提交（Read Uncommitted）</strong></li>\n<li><strong>读已提交（Read Committed）</strong></li>\n<li><strong>可重复读（Repeatable Read）</strong></li>\n<li><strong>串行化（Serializable）</strong></li>\n</ol>",r:{minutes:4.22,words:1265},t:"MySQL事务隔离级别",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%88%86%E6%9E%90.html",{loader:()=>a.e(2177).then(a.bind(a,5060)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 什么是执行计划？</strong></h2>\n<p>执行计划是 MySQL 对 SQL 查询生成的执行方案，展示了查询过程的每一步。通过分析执行计划，可以优化查询性能。</p>\n<ul>\n<li><strong>作用</strong>：\n<ul>\n<li>判断是否使用了索引。</li>\n<li>分析查询的扫描范围。</li>\n<li>评估查询效率。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><strong>2. 如何获取执行计划？</strong></h2>\n<p>在 MySQL 中，通过 <code>EXPLAIN</code> 查看执行计划。</p>",r:{minutes:3.7,words:1109},t:"MySQL执行计划分析",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(36).then(a.bind(a,5871)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. MySQL 查询缓存介绍</strong></h2>\n<h3><strong>1.1 什么是查询缓存？</strong></h3>\n<p>MySQL 查询缓存（Query Cache）是将 <strong>SELECT 查询结果</strong> 存储在内存中，以便相同的查询可以直接返回缓存结果，而无需再次执行。</p>\n<ul>\n<li><strong>缓存内容</strong>：查询的结果集。</li>\n<li><strong>核心作用</strong>：加速查询性能，减少数据库的计算开销。</li>\n</ul>\n<hr>\n<h3><strong>1.2 查询缓存适用的场景</strong></h3>",r:{minutes:4.19,words:1256},t:"MySQL查询缓存详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3.html",{loader:()=>a.e(2761).then(a.bind(a,4266)),meta:{d:17322336e5,l:"2024年11月22日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 索引是什么？为什么需要索引？</strong></h2>\n<h3><strong>1.1 索引是什么？</strong></h3>\n<p>索引就像书的目录。你想查一本书中的内容时，不会一页页翻，而是直接通过目录定位到具体的章节。这就是索引的作用——<strong>加速查询</strong>。</p>\n<p>在数据库中，索引是一种特殊的<strong>数据结构</strong>，能快速定位数据，而不用逐行扫描整个表。</p>\n<hr>\n<h3><strong>1.2 为什么需要索引？</strong></h3>\n<p><strong>性能提升</strong>。假设有 1 亿条数据，如果没有索引，查询的时间复杂度是 O(n)，需要扫描所有行。如果有索引，复杂度可以降为 O(log n) 或更低。</p>",r:{minutes:4.95,words:1486},t:"MySQL索引详解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE.html",{loader:()=>a.e(438).then(a.bind(a,952)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 自增值保存在哪里？</strong></h2>\n<h3><strong>1.1 自增主键的定义</strong></h3>\n<ul>\n<li>自增主键（AUTO_INCREMENT）是一种特殊的列属性，用于自动生成唯一的数字值，通常用于主键。</li>\n</ul>\n<h3><strong>1.2 自增值的存储</strong></h3>\n<ul>\n<li><strong>InnoDB 存储引擎</strong>：自增值存储在 <strong>内存中</strong>，并不会永久存储到磁盘。\n<ul>\n<li>每次 MySQL 重启，自增值会从该表的最大主键值重新初始化。</li>\n<li>因此，可能存在因重启或删除数据导致的自增值跳跃。</li>\n</ul>\n</li>\n<li><strong>MyISAM 存储引擎</strong>：自增值存储在表的 <code>.MYD</code> 文件中，即使重启也能保持连续性。</li>\n</ul>",r:{minutes:3.58,words:1073},t:"MySQL自增主键",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html",{loader:()=>a.e(6588).then(a.bind(a,2741)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:"\n<hr>\n<h2><strong>1. 前言</strong></h2>\n<h3><strong>1.1 什么是隐式转换？</strong></h3>\n<p>MySQL 在执行 SQL 查询时，字段的数据类型如果与查询条件不一致，会进行类型转换。这种转换分为两种：</p>\n<ol>\n<li><strong>显式转换</strong>：由用户手动完成（如 <code>CAST</code> 或 <code>CONVERT</code>）。</li>\n<li><strong>隐式转换</strong>：由 MySQL 自动完成。</li>\n</ol>\n<h3><strong>1.2 隐式转换的影响</strong></h3>",r:{minutes:3.88,words:1164},t:"MySQL隐式转换索引失效",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/SQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html",{loader:()=>a.e(6054).then(a.bind(a,2133)),meta:{d:173232e7,l:"2024年11月23日",c:["后端"],g:["MySQL","数据库"],e:'\n<hr>\n<h2><strong>1. MySQL 基础架构分析</strong></h2>\n<p>MySQL 的架构主要分为两层：</p>\n<ol>\n<li><strong>Server 层</strong>：通用部分，负责 SQL 解析、优化、执行等。</li>\n<li><strong>存储引擎层</strong>：具体实现数据存储和提取，支持多种存储引擎（如 InnoDB、MyISAM）。</li>\n</ol>\n<hr>\n<h3><strong>1.1 MySQL 基本架构概览</strong></h3>\n<div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|             客户端                |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|            连接管理层             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|         查询解析与优化层           |</span></span>\n<span class="line"><span>|  SQL 解析、查询优化、执行计划生成  |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|        存储引擎 API 层            |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|          存储引擎层               |</span></span>\n<span class="line"><span>|  InnoDB、MyISAM、Memory等引擎     |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.32,words:1295},t:"SQL语句执行过程",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%BBmarkdown.html",{loader:()=>a.e(8445).then(a.bind(a,410)),meta:{d:17322336e5,l:"2024年11月22日",c:["后端"],g:["MySQL","数据库"],e:"\n<p>以下是一篇2000字的论文，按照您提供的要求撰写：</p>\n<p>选题功能和背景说明</p>\n<p>近年来，嵌入式系统和物联网（IoT）技术的快速发展促使开发者不断寻求高性能、低功耗且多功能的硬件平台。ESP32系列芯片因其性能强大、价格低廉、开发生态完善，逐渐成为嵌入式开发和物联网产品设计中的热门选择。然而，随着应用场景的复杂化和需求的多样化，如何设计一款基于ESP32-S3的多功能开发板，并解决在接口扩展、外设兼容性、实时性和功耗优化等方面的挑战，成为了一个重要课题。</p>\n<p>本文选择以“基于ESP32-S3的多功能嵌入式开发板设计”为课题，旨在探索如何通过硬件设计实现一个通用的嵌入式平台，不仅满足开发者的常见需求（如I2C外设扩展、姿态感应、存储支持），还能在灵活性、实用性和创新性上有所突破。选题功能聚焦于以下几个方面：</p>",r:{minutes:5.78,words:1734},t:"基于ESP32-S3的多功能嵌入式开发板设计",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/3%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E8%AF%BB%E5%86%99%E7%AD%96%E7%95%A5.html",{loader:()=>a.e(5862).then(a.bind(a,4699)),meta:{d:17326656e5,l:"2024年11月27日",c:["后端"],g:["Redis","数据库"],e:"\n<p>在现代分布式系统中，缓存作为一种重要的性能优化手段，广泛应用于提升应用程序的响应速度和减轻数据库压力。缓存策略是缓存设计中至关重要的一部分，合理的缓存策略可以使得数据访问更高效、系统负载更均衡。本文将介绍三种常见的缓存读写策略：<strong>Cache Aside Pattern</strong>（旁路缓存模式）、<strong>Read/Write Through Pattern</strong>（读写穿透）、以及 <strong>Write Behind Pattern</strong>（异步缓存写入）。</p>\n<hr>\n<h3>1. Cache Aside Pattern（旁路缓存模式）</h3>",r:{minutes:5.77,words:1732},t:"3种常用的缓存读写策略",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%203%20%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{loader:()=>a.e(998).then(a.bind(a,5361)),meta:{d:17329248e5,l:"2024年11月30日",c:["后端"],g:["Redis","数据库"],e:"\n<h3>Redis 扩展数据类型详解</h3>\n<p>除了基本的五种数据类型，Redis 还提供了一些高级的扩展数据类型，例如 <strong>Bitmap</strong>（位图）、<strong>HyperLogLog</strong>（基数统计）、和 <strong>Geospatial</strong>（地理位置），它们非常适合处理特定场景中的问题。下面详细讲解这些扩展数据类型。</p>\n<hr>\n<h3>1. Bitmap （位图）</h3>\n<h4>介绍</h4>\n<ul>\n<li><strong>Bitmap</strong> 是一种基于字符串实现的数据结构，使用位（bit）来存储数据。</li>\n<li>每个位可以是 <code>0</code> 或 <code>1</code>，因此适合用来表示二进制状态（如是否登录、是否签到）。</li>\n<li><strong>位图的优势</strong>在于，它非常节省空间，特别是当需要存储大量布尔值时。</li>\n</ul>",r:{minutes:4.37,words:1310},t:"Redis 3 种特殊数据类型",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%205%20%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{loader:()=>a.e(9801).then(a.bind(a,3770)),meta:{d:17329248e5,l:"2024年11月30日",c:["后端"],g:["Redis","数据库"],e:"\n<p>Redis 是一个开源的、高性能的键值对存储系统，支持丰富的数据结构。Redis 提供了 5 种基本的数据类型，每种数据类型都具有独特的特性和使用场景。下面详细讲解 Redis 的 5 种基本数据类型，包括 <code>String</code>（字符串）、<code>List</code>（列表）、<code>Hash</code>（哈希）、<code>Set</code>（集合）和 <code>Sorted Set</code>（有序集合）。</p>\n<hr>\n<h3>1. String（字符串）</h3>\n<h4>介绍</h4>\n<ul>\n<li>Redis 的 <code>String</code> 是最基本的数据类型，可以包含任何数据，如 JPG 图像或序列化的对象。</li>\n<li>字符串类型是二进制安全的，意味着你可以存储任何形式的数据，例如，数字、JSON 字符串、二进制数据等。</li>\n<li>Redis 中的字符串最大可以存储 512 MB 的数据。</li>\n</ul>",r:{minutes:5.94,words:1782},t:"Redis 5 种基本数据类型",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(8787).then(a.bind(a,5162)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["Redis","数据库"],e:"\n<p>Redis 是一个高性能的内存数据存储系统，虽然它主要是作为缓存使用，但为了在系统重启或崩溃时能够恢复数据，它提供了两种主要的持久化机制：<strong>RDB</strong>（Redis 数据库）和 <strong>AOF</strong>（Append-Only File）。本文将详细讲解这两种持久化机制的工作原理、优缺点以及如何选择。</p>\n<hr>\n<h3>1. RDB 持久化</h3>\n<h4>1.1 什么是 RDB 持久化？</h4>\n<p>RDB（Redis DataBase）持久化是一种通过创建数据快照（Snapshot）来保存 Redis 数据库的状态的机制。它会将当前的数据库内容快照存储到磁盘中的一个二进制文件（通常是 <code>dump.rdb</code>）。在执行 RDB 持久化时，Redis 会将内存中的数据以某种方式写入到磁盘，以便在 Redis 重启时可以恢复数据。</p>",r:{minutes:6.48,words:1945},t:"Redis 持久化机制",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E8%B7%B3%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88.html",{loader:()=>a.e(6434).then(a.bind(a,8210)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["Redis","数据库"],e:"\n<p>在 Redis 中，有序集合（Sorted Set，简称 Zset）是一个非常常用的数据结构，用于存储带有权重（分数）的元素，可以根据分数进行排序。Redis 选择使用 <strong>跳表</strong>（Skip List）来实现有序集合，这是一个相对高效且灵活的选择。下面将详细分析跳表的优势、与其他数据结构的比较，以及 Redis 为何采用它。</p>\n<hr>\n<h3>跳表在 Redis 中的运用</h3>\n<p>跳表在 Redis 中主要用于实现有序集合（Sorted Set）。在有序集合中，每个元素包含两个部分：成员（Member）和分数（Score）。Redis 通过跳表来管理这些成员，使得它可以在对元素进行插入、删除、范围查询等操作时，保持较好的时间复杂度。</p>",r:{minutes:5.52,words:1656},t:"Redis跳表实现有序集合",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87.html",{loader:()=>a.e(3345).then(a.bind(a,4120)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["Redis","数据库"],e:"\n<p>Redis 是一个内存数据存储系统，它将数据完全加载到内存中以提高性能。然而，随着时间的推移和数据的不断变动，Redis 内部可能会出现内存碎片问题，导致内存利用效率低下。本文将详细讲解 Redis 内存碎片的概念、成因、查看和清理方法。</p>\n<hr>\n<h3>1. 什么是内存碎片？</h3>\n<p><strong>内存碎片</strong>指的是内存中出现的未被完全利用的空间。当系统或应用程序分配和释放内存时，可能会导致内存块之间出现空隙，这些空隙无法被新数据填充，进而导致内存资源的浪费。对于 Redis 来说，内存碎片是指由于数据存储方式或内存分配机制问题，导致 Redis 实际使用的内存比数据本身占用的内存更多，产生了额外的内存占用。</p>",r:{minutes:5.23,words:1570},t:"Redis内存碎片",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E5%B8%B8%E8%A7%81%E9%98%BB%E5%A1%9E%E5%8E%9F%E5%9B%A0.html",{loader:()=>a.e(3446).then(a.bind(a,9333)),meta:{d:17330112e5,l:"2024年12月1日",c:["后端"],g:["Redis","数据库"],e:"\n<p>Redis 是一个高性能的内存数据库，但在某些情况下，可能会出现性能瓶颈或阻塞现象，导致 Redis 无法响应请求，影响系统的整体性能。以下是 Redis 中常见的阻塞原因及其分析。</p>\n<hr>\n<h3>1. O(n) 命令</h3>\n<p>一些 Redis 命令的时间复杂度为 O(n)，即其执行时间与数据量成正比。对于大数据集，这些命令的执行可能会导致 Redis 被阻塞。常见的 O(n) 命令包括：</p>\n<ul>\n<li><strong><code>SORT</code></strong>：排序命令，如果排序的数据量很大，可能会导致 Redis 执行排序时阻塞。</li>\n<li><strong><code>LRANGE</code></strong>：返回列表中某一范围内的元素，如果列表很长，执行此命令时 Redis 可能会卡住，直到所有数据返回。</li>\n</ul>",r:{minutes:5.2,words:1559},t:"Redis 常见阻塞原因",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1.html",{loader:()=>a.e(2347).then(a.bind(a,3084)),meta:{d:17324064e5,l:"2024年11月24日",c:["后端"],g:["Redis","数据库"],e:"\n<h2><strong>如何基于 Redis 实现延时任务</strong></h2>\n<p>在分布式系统中，延时任务是一种常见需求。Redis 作为高性能的内存数据库，可以用来实现延时任务。下面详细介绍几种基于 Redis 实现延时任务的方法，包括过期事件监听、Redisson 延迟队列，并分析它们的原理、优势和缺陷。</p>\n<hr>\n<h3><strong>1. Redis 过期事件监听实现延时任务</strong></h3>\n<h4><strong>1.1 原理</strong></h4>\n<p>利用 Redis 的键过期机制和过期事件通知，可以实现延时任务。当一个键设置了过期时间后，到期时 Redis 会自动删除该键，并可以通过配置发送过期事件通知。我们可以监听这些过期事件来触发相应的延时任务。</p>",r:{minutes:3.01,words:904},t:"Redis怎么实现延时任务",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/SQL/SQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{loader:()=>a.e(8766).then(a.bind(a,5257)),meta:{d:17321472e5,l:"2024年11月21日",c:["后端"],g:["数据库"],e:"\n<hr>\n<h2><strong>1. 基本概念</strong></h2>\n<h3><strong>数据库术语</strong></h3>\n<ol>\n<li><strong>数据库（Database）</strong>：存储有组织的数据集合。</li>\n<li><strong>数据库管理系统（DBMS）</strong>：用于创建、管理和操作数据库的软件系统（如 MySQL、PostgreSQL）。</li>\n<li><strong>数据库系统（DBS）</strong>：由数据库、DBMS、应用程序和数据库管理员（DBA）组成的整体系统。</li>\n<li><strong>数据库管理员（DBA）</strong>：负责数据库设计、实施、维护和安全的专业人员。</li>\n</ol>",r:{minutes:3.44,words:1032},t:"SQL语法基础知识",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JS/js%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%A4%9F%E4%B8%BA%E7%A9%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95.html",{loader:()=>a.e(1034).then(a.bind(a,166)),meta:{d:17233344e5,l:"2024年8月11日",c:["前端"],g:["Js","前端开发技巧"],e:'\n<p>首先定义一个空对象如下：</p>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> test_data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.64,words:191},t:"Js判断对象是否为空对象的方法",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Node/fnm%E6%8C%87%E4%BB%A4.html",{loader:()=>a.e(1977).then(a.bind(a,2762)),meta:{d:17233344e5,l:"2024年8月11日",c:["前端"],g:["Node.js","前端开发技巧"],e:'\n<p>写在前面：fnm是一个基于Rust的Node.js版本管理工具，其命令如下，若要下载安装fnm,请点击查看文章<a href="/newBlog/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/fnm%E7%9A%84%E5%AE%89%E8%A3%85.html" target="_blank">fnm下载</a></p>\n<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*列出所有可供下载的node版本*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ls-remote</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*查看系统安装了哪些版本*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> list</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*使用特定版本的node*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;version&gt;是自己指定的版本号，如19.3.0*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">versio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">n&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*查看当前正在运行的版本号*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> current</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*卸载node版本*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;version&gt;是自己指定的版本号，如19.3.0*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> uninstall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">versio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">n&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">/*设置版本别名*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fnm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> alias</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">versio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">n&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.62,words:185},t:"fnm指令",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Node/http-server.html",{loader:()=>a.e(6797).then(a.bind(a,3974)),meta:{d:17233344e5,l:"2024年8月11日",c:["前端"],g:["Node.js","前端开发技巧"],e:"\n<h2>什么是http-server？</h2>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http-server 是一个简单的命令行 HTTP 服务器，它可以快速地将任何目录变成一个 HTTP 服务器。这对于快速搭建本地开发环境、测试静态网页或分享文件非常有用。</p>\n<h2>http-server的安装</h2>\n<ol>\n<li>打开终端或命令提示符</li>\n<li>使用命令 <code>npm install -g http-server</code> 进行全局安装。<br>\n如果只希望在当前项目使用，则使用命令 <code>npm install http-server --save-dev</code></li>\n</ol>",r:{minutes:.99,words:297},t:"http-server的安装及使用",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Vue/vue%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E5%8F%B7.html",{loader:()=>a.e(8924).then(a.bind(a,3218)),meta:{d:17233344e5,l:"2024年8月11日",c:["前端"],g:["Vue","前端开发技巧"],e:'\n<blockquote>\n<p>在 vue.config.js 文件中加入注释部分代码</p>\n</blockquote>\n<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B">defineConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'@vue/cli-service\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> defineConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\ttranspileDependencies</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t/*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t从这里开始</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t*/</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\tdevServer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">\t\tport</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8099</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//此处为自己设置的端口号</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t/*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t到这里结束</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">\t*/</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.26,words:77},t:"Vue设置端口号",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E7%BB%BC%E5%90%88/%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90.html",{loader:()=>a.e(8743).then(a.bind(a,1621)),meta:{d:17233344e5,l:"2024年8月11日",c:["前端"],g:["前端"],e:"\n<figure><figcaption>淘宝镜像源</figcaption></figure>\n<p>可直接复制：https://registry.npmmirror.com</p>\n",r:{minutes:.13,words:38},t:"淘宝镜像源",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html",{loader:()=>a.e(2195).then(a.bind(a,1382)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public static void main(String[] args) {</span></span>\n<span class="line"><span>    test(1,2,2);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/*</span></span>\n<span class="line"><span>    可变参数就是在数据类型后面加...</span></span>\n<span class="line"><span>    在不确定参数个数时可以使用可变参数</span></span>\n<span class="line"><span>    但是！！！！！！可变参数只能放在参数列表最末尾！！！！！</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public static void test(int... i) {</span></span>\n<span class="line"><span>    for(int j:i) {</span></span>\n<span class="line"><span>        System.out.println(j);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.33,words:99},t:"Java中的可变参数",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E6%8B%A6%E6%88%AA%E5%99%A8.html",{loader:()=>a.e(9616).then(a.bind(a,8506)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<p>等待更新。。。</p>\n",r:{minutes:.09,words:27},t:"Java拦截器",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html",{loader:()=>a.e(1372).then(a.bind(a,9944)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<ol>\n<li>继承Thread类，重写run方法</li>\n<li>实现runable接口，重写的run方法</li>\n<li>实现callable接口，重写call方法。搭配FutureTask来获取返回结果</li>\n<li>利用线程池创建线程</li>\n</ol>\n",r:{minutes:.26,words:79},t:"线程的实现方式",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.html",{loader:()=>a.e(5815).then(a.bind(a,4081)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<ol>\n<li>新建状态：线程刚刚创建</li>\n<li>就绪/运行状态</li>\n<li>blocked状态：未持有锁资源的线程进入阻塞状态</li>\n<li>waited状态：wait（）</li>\n<li>timed_waited状态：sleep（）</li>\n<li>结束状态</li>\n</ol>\n<h4>sleep 和 wait 的区别</h4>\n<ol>\n<li>Sleep使线程进入time_waited状态，经过一定时间自动唤醒；waited是在持有锁时主动释放锁资源进入waited状态，等待手动唤醒。</li>\n<li>wait只有在持有锁的时候才能使用，而sleep持有或不持有锁都可以使用。</li>\n<li>在持有锁时使用sleep不会释放锁资源，使用wait会释放锁资源</li>\n</ol>",r:{minutes:.61,words:184},t:"Java中线程的状态",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E7%BB%A7%E6%89%BF.html",{loader:()=>a.e(2676).then(a.bind(a,7267)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<ol>\n<li>继承是 <em><strong>类与类</strong></em> 之间的关系</li>\n<li>Java是<strong>单继承</strong>，不能多继承</li>\n<li>super的注意要点：\n<ol>\n<li>super调用父类的构造方法，必须在构造方法的第一个</li>\n</ol>\n</li>\n</ol>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 父类：</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     //如果是有参构造</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     // public Father(String name){</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     //   //代码</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     // }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 子类：</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Son</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Father</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Son</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 调用父类构造方法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// //如果是有参构造</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// super("huo");</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//下面可以写其他代码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.68,words:504},t:"Java的继承思想",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8.html",{loader:()=>a.e(7829).then(a.bind(a,8449)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> 新建一个类，继承Exception</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyException</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> 添加一个构造方法，和重写一个tostring方法即可</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">完全体示例：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * 自定义异常</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyException</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MyException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> a;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "输入数字的范围应当小于等于10，当前为："</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"。请重新输入"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> 使用：</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Test2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// try监控区域</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">            zdyExceptionTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(a);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">MyException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 想要捕获的异常类型,如果监控区域出现指定异常，则执行以下代码</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(e);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 不管抛不抛出异常都执行,一般用来关闭io流</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"处理了异常"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    // throws是在方法上抛出异常，在调用这个方法的时候捕获异常</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> zdyExceptionTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MyException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 设置如果a&gt;10就手动抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MyException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(a);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.85,words:256},t:"Java自定义异常",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html",{loader:()=>a.e(8757).then(a.bind(a,1900)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<ol>\n<li>（CORS）使用<code>@CrossOrigen</code>注解配置</li>\n<li>响应报文中加入一个<code>Access-Control-Allow-Origin</code> 的header</li>\n<li>（CORS）实现WebMVCConfigurer接口然后重写addCorsMapping方法解决跨域问题</li>\n<li>前端使用代理服务器，如Node.js中使用http-proxy-middleware模块。</li>\n</ol>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> addCorsMappings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">CorsRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> registry) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 设置允许跨域的路径</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/**"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // 设置允许跨域请求的域名</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">allowedOrigins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://localhost:8099"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // 是否允许证书不失效</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">allowCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // 设置允许的方法</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">allowedMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"GET"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"POST"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"PUT"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"DELETE"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"OPTIONS"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // 设置允许的头信息</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">allowedHeaders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"*"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // 预检请求有效期，单位为秒</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">maxAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3600</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.85,words:254},t:"开发中的跨域问题",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%80%92%E5%BD%92.html",{loader:()=>a.e(930).then(a.bind(a,4728)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<h2>什么是递归？</h2>\n<p>递归就是自己调用自己！！！！！！</p>\n<ul>\n<li>递归思想通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。</li>\n<li>包括两个部分：\n<ul>\n<li>递归头：什么时候不调用自身方法，如果没有头，将陷入死循环</li>\n<li>递归体：什么时候需要调用自身方法</li>\n</ul>\n</li>\n</ul>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        阶乘</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        思路： 当 n == 1 时，返回n（递归到头，该开始层层往回return了）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">              当 n != 1 时，做乘法，同时层层递归，相当于f(n) * f(n-1)，然后f（n-1）里面是f(n-1) * f(n-2)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">              所以最后相当于 f(n) * f(n-1) * f(n-2) * ... * f(1)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> factorial</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> n) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> factorial</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.86,words:258},t:"Java递归思想",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%87%8D%E8%BD%BD.html",{loader:()=>a.e(3488).then(a.bind(a,2337)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<h2>什么是重载？</h2>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n重载是指：在同一个类里面有两个重名的方法，他们：</p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须不同（可以参数不同，也可以参数类型不同）</li>\n</ol>\n<h2>举例说明</h2>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] args) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> reNum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a) {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> reNum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">double</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a) {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> reNum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> b) {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回值类型可以相同也可以不同</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 但只有返回值类型不同不是重载</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.51,words:152},t:"Java重载",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB.html",{loader:()=>a.e(2220).then(a.bind(a,6717)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:"\n<ol>\n<li>可重入锁、不可重入锁：已经持有锁资源时能否再次持有锁</li>\n<li>乐观锁、悲观锁：悲观锁在获取不到锁资源的时候会将线程挂起，乐观锁会不断重复尝试获取锁资源</li>\n<li>公平锁、非公平锁：未持有锁资源的线程是根据先来后到还是尝试竞争锁资源</li>\n<li>互斥锁、共享锁：锁资源可否被多个线程共同获取</li>\n</ol>\n",r:{minutes:.49,words:146},t:"Java中锁的分类",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/insert.html",{loader:()=>a.e(6691).then(a.bind(a,4875)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:'\n<h2>insert的基本使用</h2>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 测试插入</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Howkinsen"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setEmail</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"191050249@qq.com"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(result);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.15,words:344},t:"Mybatis-plus 的 insert语法（部分）",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/mybatis-plus%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97.html",{loader:()=>a.e(8101).then(a.bind(a,163)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:'\n<div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"># mybatis-plus配置日志</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">mybatis-plus:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">  configuration:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.13,words:39},t:"Mybatis-plus 配置日志",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/select.html",{loader:()=>a.e(6126).then(a.bind(a,4184)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//    测试查询</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testSelectById</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1796463485688344577L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//    测试批量查询</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testSelectBatchId</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">User</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> users </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectBatchIds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1796463485688344577L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1796471132068089857L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">println);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//    按条件查询之一：使用map操作</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testSelectBatchIds</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 自定义要查询的条件</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"name"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"张三"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"age"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">User</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> users </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectByMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(map);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">println);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 分页查询</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">selectPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;(当前页,每页条数),wrapper构造器);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.44,words:132},t:"Mybatis-plus 的select语法（部分）",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/update.html",{loader:()=>a.e(7075).then(a.bind(a,3324)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:'\n<h2>update 的基本使用</h2>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    //测试更新</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testUpdate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1796384136507219970L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"huo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 注意参数是 对象</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">updateById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(i);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.14,words:341},t:"Mybatis-plus 的update语法（部分）",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/%E4%B9%90%E8%A7%82%E9%94%81.html",{loader:()=>a.e(245).then(a.bind(a,7430)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:"\n<h2>什么是乐观锁</h2>\n<p>乐观锁：顾名思义十分乐观，他总是认为不会出现问题，无论干什么都<strong>不去上锁</strong>，如果出现了问题，再次更新值测试<br>\n与之相对的是<strong>悲观锁</strong><br>\n悲观锁：顾名思义十分悲观，他认为总是会出现问题，无论干什么都会<strong>上锁再去操作</strong></p>\n<h2>乐观锁的机制：</h2>\n<p>乐观锁的实现方式：</p>\n<ul>\n<li>取出记录时，获取当前version</li>\n<li>更新时，带上这个version</li>\n<li>执行更新时，set version = newVersion where version = oldVersion</li>\n<li>如果version不对，就更新失败</li>\n</ul>",r:{minutes:1.1,words:330},t:"Mybatis-plus乐观锁",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93.html",{loader:()=>a.e(154).then(a.bind(a,9698)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Mybatis-plus","后端开发技巧"],e:'\n<div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"># 数据库</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">spring:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">  datasource:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">    url: jdbc:mysql://localhost:3306/[数据库名称]?</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD">useUnicode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">true&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD">characterEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">utf-8&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD">serverTimezone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379">Asia/Shanghai</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">    username: root </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379">    password: [密码]</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.21,words:64},t:"Mybatis-plus 连接mysql数据库的配置项",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/AOP.html",{loader:()=>a.e(7454).then(a.bind(a,4649)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Spring","后端开发技巧"],e:"\n<h2>什么是AOP？</h2>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nAOP（Aspect-Oriented Programming，面向切面编程）是一种编程范式和技术，它旨在解决软件开发中横切关注点（cross-cutting concerns）的问题。横切关注点是指那些跨越多个模块或组件的公共行为，例如日志记录、事务管理、安全验证等功能，这些功能往往会在多个地方出现，导致代码重复。<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nAOP 的主要目的是通过将这些横切关注点从业务逻辑中分离出来，以便能够更好地管理这些功能，减少代码的重复，并提高系统的可维护性和可扩展性。</p>",r:{minutes:1.78,words:534},t:"AOP(面向切面编程)",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html",{loader:()=>a.e(9848).then(a.bind(a,936)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Spring","后端开发技巧"],u:!0,e:"\n<hr>\n<h3>🌐 一、Web 层请求处理注解</h3>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@RestController</code></td>\n<td>组合注解：<code>@Controller</code> + <code>@ResponseBody</code>，返回 JSON</td>\n</tr>\n<tr>\n<td><code>@Controller</code></td>\n<td>返回视图名称，用于页面跳转</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>方法返回 JSON 体</td>\n</tr>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>通用路由映射，支持所有 HTTP 方法</td>\n</tr>\n<tr>\n<td><code>@GetMapping</code> / <code>@PostMapping</code> / <code>@PutMapping</code> / <code>@DeleteMapping</code> / <code>@PatchMapping</code></td>\n<td>映射具体 HTTP 方法请求</td>\n</tr>\n<tr>\n<td><code>@PathVariable</code></td>\n<td>获取 URL 路径变量 <code>/user/{id}</code></td>\n</tr>\n<tr>\n<td><code>@RequestParam</code></td>\n<td>获取 query 参数 <code>/search?name=Tom</code></td>\n</tr>\n<tr>\n<td><code>@RequestHeader</code></td>\n<td>获取请求头信息</td>\n</tr>\n<tr>\n<td><code>@RequestBody</code></td>\n<td>接收 JSON 对象并绑定到 Java Bean</td>\n</tr>\n<tr>\n<td><code>@ResponseStatus</code></td>\n<td>设置响应状态码，如 201 Created</td>\n</tr>\n<tr>\n<td><code>@CrossOrigin</code></td>\n<td>启用跨域请求支持</td>\n</tr>\n<tr>\n<td><code>@ExceptionHandler</code></td>\n<td>局部异常处理方法</td>\n</tr>\n<tr>\n<td><code>@RestControllerAdvice</code></td>\n<td>全局异常处理类（结合 <code>@ExceptionHandler</code> 使用）</td>\n</tr>\n</tbody>\n</table>",r:{minutes:2.26,words:679},t:"✅ Spring Boot 常用注解",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84%E4%B8%BB%E8%A6%81API.html",{loader:()=>a.e(6755).then(a.bind(a,2833)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     // 反射的主要API</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">     java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Class</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 代表一个类</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">     java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Method</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 代表类的方法</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">     java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Field</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 代表类的成员变量</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">     java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Contructor</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 代表类的构造器</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">     </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     // class类的常用方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">     static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ClassforName </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回指定类名name的Class对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 调用缺省构造函数，返回Class对象的一个实例</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">     getName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回此Class对象所表示的实体（类，接口，数组类或void）的名称</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> getSuperClass </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回当前Class对象的父类的Class对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getinterfaces</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获取当前Class对象的接口</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     ClassLoader</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回类的类加载器</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getConstructors</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回一个包含某些Constructoe对象的数组</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Method</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">..</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回一个Method对象，此对象的形参类型为paramType</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">     Field</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredFields</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 返回Field对象的一个数组</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.77,words:231},t:"Java反射的主要api",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96Class%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B.html",{loader:()=>a.e(828).then(a.bind(a,1345)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         * 获取Class类的实例</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 1. 已知具体的类，通过类的class属性获取。该方法最为安全可靠，程序性能最高。</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> clazz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 2. 已知某个类的实例，调用该实例的getClass()方法获取Class对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> clazz1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 3. 已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotDoundException</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> clazz2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"reflectionStudy.User"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 4. 内置基本数据类型可以直接用类名.Type</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 5. 还可以利用ClassLoader</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.56,words:168},t:"Java 反射获取Class类的实例",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E6%B5%8B%E8%AF%95class%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B.html",{loader:()=>a.e(1952).then(a.bind(a,8029)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 测试class类的创建方式有哪些</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Test01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ClassNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> person</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"这个人是："</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 方式一：通过对象获得</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 方式二：forname获得</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"reflectionStudy.Student"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 方式三：通过类名.class获得</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 方式四：基本内置类型的包装类都有一个Type属性</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(c4);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 获得父类类型</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getSuperclass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(c5);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Person{"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                "name=\'"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\\'</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">                \'}\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Student</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "学生"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Teacher</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Teacher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "老师"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.63,words:189},t:"Java 反射创建class类的创建方式有哪些",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E8%8E%B7%E5%BE%97%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF.html",{loader:()=>a.e(5287).then(a.bind(a,1192)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得类的信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Test02</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ClassNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NoSuchFieldException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NoSuchMethodException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"reflectionStudy.User"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        获得类的名字</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得包名 + 类名</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getSimpleName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得类名</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         获得类的属性</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"============="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Field</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fields</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 只能找到public属性</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        for (Field field : fields) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//            System.out.println(field);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        fields </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 能找到全部属性</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> field</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> fields) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(field);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         获得指定属性的值</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"name"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(name);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        获得类的方法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"============="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">methods</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得本类及其父类的全部public方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> method</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> methods) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"正常的："</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">method);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        methods </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得本类的全部方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> method</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> methods) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"getDeclaredMethods:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">method);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        获取指定方法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"getName"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"setName"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(getName);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(setName);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        /*</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        获取指定的构造器</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">         */</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"=========="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Constructor</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">constructors</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getConstructors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得public方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Constructor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> constructor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> constructors) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(constructor);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        constructors </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredConstructors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 获得全部方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Constructor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> constructor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> constructors) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(constructor);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.86,words:258},t:"Java 反射如何获得类的信息",i:"pen-to-square",y:"a"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html",{loader:()=>a.e(6172).then(a.bind(a,3399)),meta:{d:17233344e5,l:"2024年8月11日",c:["后端"],g:["Java","后端开发技巧"],e:'\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 通过反射动态创建对象</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Test03</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ClassNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> InstantiationException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IllegalAccessException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NoSuchMethodException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> InvocationTargetException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NoSuchFieldException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 获得Class对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"reflectionStudy.User"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 构造一个对象</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        User user = (User) c1.newInstance(); // 本质上是调用了类的无参构造器</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        System.out.println(user);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 通过构造器创建对象</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        Constructor constructor = c1.getDeclaredConstructor(String.class, int.class, int.class);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        User user2 = (User) constructor.newInstance("huo", 001, 18);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        System.out.println(user2);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 通过反射调用普通方法</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (User) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 通过反射获取一个方法</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"setName"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // invoke :激活的意思</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // （对象，“方法的值”）</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user3,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"huo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //通过反射操作属性</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"==================="</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> user4</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (User) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> c1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"name"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 不能直接操作私有属性，我们需要关闭程序的安全检测</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(user4,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"huo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">user4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.75,words:225},t:"Java 通过反射动态创建对象",i:"pen-to-square",y:"a"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,4510)),meta:{t:""}}],["/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/",{loader:()=>a.e(2032).then(a.bind(a,5648)),meta:{t:"双指针"}}],["/leetcode/",{loader:()=>a.e(1252).then(a.bind(a,9719)),meta:{t:"Leetcode"}}],["/leetcode/%E5%93%88%E5%B8%8C/",{loader:()=>a.e(1205).then(a.bind(a,4622)),meta:{t:"哈希"}}],["/leetcode/%E5%AD%90%E4%B8%B2/",{loader:()=>a.e(6995).then(a.bind(a,2889)),meta:{t:"子串"}}],["/leetcode/%E6%95%B0%E7%BB%84/",{loader:()=>a.e(869).then(a.bind(a,3512)),meta:{t:"数组"}}],["/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{loader:()=>a.e(7862).then(a.bind(a,5062)),meta:{t:"滑动窗口"}}],["/leetcode/%E7%9F%A9%E9%98%B5/",{loader:()=>a.e(6507).then(a.bind(a,4992)),meta:{t:"矩阵"}}],["/leetcode/%E9%93%BE%E8%A1%A8/",{loader:()=>a.e(887).then(a.bind(a,2319)),meta:{t:"链表"}}],["/tech/%E5%9C%BA%E6%99%AF/",{loader:()=>a.e(4123).then(a.bind(a,8263)),meta:{t:"场景"}}],["/tech/",{loader:()=>a.e(8287).then(a.bind(a,8177)),meta:{t:"Tech"}}],["/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(4166).then(a.bind(a,9584)),meta:{t:"基础"}}],["/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/",{loader:()=>a.e(8423).then(a.bind(a,3132)),meta:{t:"奶奶八股"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(5979).then(a.bind(a,7232)),meta:{t:"Java基础"}}],["/Java%E5%85%AB%E8%82%A1/Java/",{loader:()=>a.e(5612).then(a.bind(a,5685)),meta:{t:"Java"}}],["/Java%E5%85%AB%E8%82%A1/",{loader:()=>a.e(5567).then(a.bind(a,7080)),meta:{t:"Java八股"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/",{loader:()=>a.e(3616).then(a.bind(a,6586)),meta:{t:"Java并发"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/",{loader:()=>a.e(4983).then(a.bind(a,2428)),meta:{t:"Java集合"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/",{loader:()=>a.e(6634).then(a.bind(a,3502)),meta:{t:"Mongo DB"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>a.e(5175).then(a.bind(a,6792)),meta:{t:"数据库"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/",{loader:()=>a.e(838).then(a.bind(a,1509)),meta:{t:"My SQL"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/",{loader:()=>a.e(8543).then(a.bind(a,8926)),meta:{t:"Redis"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(1942).then(a.bind(a,3790)),meta:{t:"基础"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/",{loader:()=>a.e(0).then(a.bind(a,1588)),meta:{t:"～工具杂记"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/",{loader:()=>a.e(3543).then(a.bind(a,8294)),meta:{t:"杂碎记录"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%82%E8%AE%B0/",{loader:()=>a.e(7875).then(a.bind(a,2266)),meta:{t:"～数据库杂记"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Linux/",{loader:()=>a.e(7833).then(a.bind(a,2872)),meta:{t:"Linux"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(7956).then(a.bind(a,8136)),meta:{t:"计算机基础"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{loader:()=>a.e(2198).then(a.bind(a,5913)),meta:{t:"操作系统"}}],["/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/",{loader:()=>a.e(7628).then(a.bind(a,4729)),meta:{t:"网络"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/",{loader:()=>a.e(824).then(a.bind(a,4468)),meta:{t:"重要知识点"}}],["/Java%E5%85%AB%E8%82%A1/Java/Java%E9%9B%86%E5%90%88/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",{loader:()=>a.e(9565).then(a.bind(a,4732)),meta:{t:"源码分析"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/",{loader:()=>a.e(7193).then(a.bind(a,1790)),meta:{t:"重要知识点"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/",{loader:()=>a.e(1596).then(a.bind(a,1758)),meta:{t:"重要知识点"}}],["/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80/SQL/",{loader:()=>a.e(8961).then(a.bind(a,8229)),meta:{t:"SQL"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JS/",{loader:()=>a.e(8838).then(a.bind(a,9696)),meta:{t:"JS"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/",{loader:()=>a.e(2160).then(a.bind(a,288)),meta:{t:"～前端杂记"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Node/",{loader:()=>a.e(8293).then(a.bind(a,4508)),meta:{t:"Node"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/Vue/",{loader:()=>a.e(6943).then(a.bind(a,8014)),meta:{t:"Vue"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E7%BB%BC%E5%90%88/",{loader:()=>a.e(1937).then(a.bind(a,9361)),meta:{t:"综合"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/",{loader:()=>a.e(5108).then(a.bind(a,5458)),meta:{t:"Java"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/",{loader:()=>a.e(7543).then(a.bind(a,9721)),meta:{t:"～后端杂记"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Mybatis-plus/",{loader:()=>a.e(6960).then(a.bind(a,393)),meta:{t:"Mybatis Plus"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/",{loader:()=>a.e(6273).then(a.bind(a,6285)),meta:{t:"Spring"}}],["/Java%E5%85%AB%E8%82%A1/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Java/%E5%8F%8D%E5%B0%84/",{loader:()=>a.e(5488).then(a.bind(a,3372)),meta:{t:"反射"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,905)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(4021).then(a.bind(a,4581)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E5%90%8E%E7%AB%AF/",{loader:()=>a.e(4887).then(a.bind(a,4564)),meta:{t:"后端 分类",I:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>a.e(9544).then(a.bind(a,7102)),meta:{t:"算法 分类",I:!1}}],["/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",{loader:()=>a.e(4491).then(a.bind(a,3784)),meta:{t:"开发工具 分类",I:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(1668).then(a.bind(a,8925)),meta:{t:"计算机基础 分类",I:!1}}],["/category/%E5%89%8D%E7%AB%AF/",{loader:()=>a.e(656).then(a.bind(a,3568)),meta:{t:"前端 分类",I:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,4103)),meta:{t:"标签",I:!1}}],["/tag/markdown/",{loader:()=>a.e(7931).then(a.bind(a,7301)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>a.e(602).then(a.bind(a,3102)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(1431).then(a.bind(a,5198)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",{loader:()=>a.e(2433).then(a.bind(a,6783)),meta:{t:"标签: 双指针",I:!1}}],["/tag/leecode/",{loader:()=>a.e(4717).then(a.bind(a,7972)),meta:{t:"标签: leecode",I:!1}}],["/tag/%E5%93%88%E5%B8%8C/",{loader:()=>a.e(6470).then(a.bind(a,4213)),meta:{t:"标签: 哈希",I:!1}}],["/tag/%E5%AD%90%E4%B8%B2/",{loader:()=>a.e(8972).then(a.bind(a,2001)),meta:{t:"标签: 子串",I:!1}}],["/tag/%E5%89%8D%E7%BC%80%E5%92%8C/",{loader:()=>a.e(3897).then(a.bind(a,5171)),meta:{t:"标签: 前缀和",I:!1}}],["/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{loader:()=>a.e(8993).then(a.bind(a,338)),meta:{t:"标签: 滑动窗口",I:!1}}],["/tag/%E6%95%B0%E7%BB%84/",{loader:()=>a.e(5494).then(a.bind(a,1984)),meta:{t:"标签: 数组",I:!1}}],["/tag/%E7%9F%A9%E9%98%B5/",{loader:()=>a.e(776).then(a.bind(a,6824)),meta:{t:"标签: 矩阵",I:!1}}],["/tag/%E9%93%BE%E8%A1%A8/",{loader:()=>a.e(6068).then(a.bind(a,388)),meta:{t:"标签: 链表",I:!1}}],["/tag/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",{loader:()=>a.e(4852).then(a.bind(a,4100)),meta:{t:"标签: 快慢指针",I:!1}}],["/tag/leetcode/",{loader:()=>a.e(6701).then(a.bind(a,4996)),meta:{t:"标签: leetcode",I:!1}}],["/tag/java/",{loader:()=>a.e(250).then(a.bind(a,1320)),meta:{t:"标签: Java",I:!1}}],["/tag/%E9%9D%A2%E8%AF%95/",{loader:()=>a.e(243).then(a.bind(a,5803)),meta:{t:"标签: 面试",I:!1}}],["/tag/%E5%9C%BA%E6%99%AF/",{loader:()=>a.e(7393).then(a.bind(a,8357)),meta:{t:"标签: 场景",I:!1}}],["/tag/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/",{loader:()=>a.e(9614).then(a.bind(a,3739)),meta:{t:"标签: 奶奶八股",I:!1}}],["/tag/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/",{loader:()=>a.e(4059).then(a.bind(a,5706)),meta:{t:"标签: 后端开发技巧",I:!1}}],["/tag/%E5%B9%B6%E5%8F%91/",{loader:()=>a.e(9171).then(a.bind(a,7066)),meta:{t:"标签: 并发",I:!1}}],["/tag/%E9%9B%86%E5%90%88/",{loader:()=>a.e(7724).then(a.bind(a,5395)),meta:{t:"标签: 集合",I:!1}}],["/tag/mongodb/",{loader:()=>a.e(9416).then(a.bind(a,8551)),meta:{t:"标签: MongoDB",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>a.e(4817).then(a.bind(a,2688)),meta:{t:"标签: 数据库",I:!1}}],["/tag/mysql/",{loader:()=>a.e(2996).then(a.bind(a,4045)),meta:{t:"标签: MySQL",I:!1}}],["/tag/redis/",{loader:()=>a.e(8857).then(a.bind(a,6561)),meta:{t:"标签: Redis",I:!1}}],["/tag/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",{loader:()=>a.e(9925).then(a.bind(a,5737)),meta:{t:"标签: 开发工具",I:!1}}],["/tag/linux/",{loader:()=>a.e(4316).then(a.bind(a,2819)),meta:{t:"标签: Linux",I:!1}}],["/tag/shell/",{loader:()=>a.e(472).then(a.bind(a,2224)),meta:{t:"标签: Shell",I:!1}}],["/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{loader:()=>a.e(4721).then(a.bind(a,1147)),meta:{t:"标签: 操作系统",I:!1}}],["/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>a.e(5229).then(a.bind(a,8532)),meta:{t:"标签: 计算机网络",I:!1}}],["/tag/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",{loader:()=>a.e(8887).then(a.bind(a,6752)),meta:{t:"标签: 源码分析",I:!1}}],["/tag/js/",{loader:()=>a.e(1597).then(a.bind(a,8418)),meta:{t:"标签: Js",I:!1}}],["/tag/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/",{loader:()=>a.e(7760).then(a.bind(a,4374)),meta:{t:"标签: 前端开发技巧",I:!1}}],["/tag/node.js/",{loader:()=>a.e(8727).then(a.bind(a,5102)),meta:{t:"标签: Node.js",I:!1}}],["/tag/vue/",{loader:()=>a.e(8450).then(a.bind(a,1111)),meta:{t:"标签: Vue",I:!1}}],["/tag/%E5%89%8D%E7%AB%AF/",{loader:()=>a.e(3898).then(a.bind(a,5910)),meta:{t:"标签: 前端",I:!1}}],["/tag/mybatis-plus/",{loader:()=>a.e(7018).then(a.bind(a,8554)),meta:{t:"标签: Mybatis-plus",I:!1}}],["/tag/spring/",{loader:()=>a.e(6847).then(a.bind(a,9973)),meta:{t:"标签: Spring",I:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,9574)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,3639)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,3931)),meta:{t:"时间轴",I:!1}}]])},8761:(s,i,a)=>{a.d(i,{U:()=>n});const n=JSON.parse('{"base":"/newBlog/","lang":"zh-CN","title":"Bin的成长博客","description":"记录八股和相关技术的博客","head":[],"locales":{}}')},6653:(s,i,a)=>{a.d(i,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$LGNydjTaXYS.YK7HXo5rt.oxK77wrp0dxjw71Jb9ADO7ZQbelj3oW"]}},"author":{"name":"Bin","url":"/avator_img.jpg"},"logo":"/avator_img.jpg","logoDark":"/avator_img.jpg","repo":"xlb3055/newBlog","repoLabel":"GitHub","docsDir":"src","darkmode":"switch","fullscreen":true,"pageInfo":["Author","Original","Date","Category","Tag","ReadingTime"],"footer":"路漫漫其修远兮，吾将上下而求索。","displayFooter":true,"blog":{"description":"一个努力学习进步的开发者","intro":"/intro.html","avatar":"/avator_img.jpg","articlePerPage":10,"medias":{"GitHub":"https://github.com/xlb3055","Zhihu":"https://www.zhihu.com","Email":"1428982342@qq.com"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/",{"text":"面试专题","icon":"fas fa-folder-open","link":"/Java八股/"},{"text":"数据结构与算法","icon":"fas fa-sitemap","link":"/leetcode/"},{"text":"技术提升","icon":"fas fa-folder-open","link":"/tech/"},{"text":"奶奶都能看懂系列","icon":"fas fa-folder-open","link":"/奶奶八股/"}],"sidebar":{"/Java八股/":[{"text":"Java基础","icon":"fab fa-java","prefix":"Java/Java基础/","children":"structure","collapsible":true,"expanded":true},{"text":"Java并发","icon":"fab fa-java","prefix":"Java/Java并发/","children":"structure","collapsible":true,"expanded":true},{"text":"Java集合","icon":"fab fa-java","prefix":"Java/Java集合/","children":"structure","collapsible":true,"expanded":true},{"text":"Linux","icon":"fab fa-linux","prefix":"计算机基础/Linux/","children":"structure","collapsible":true,"expanded":true},{"text":"操作系统","icon":"fas fa-laptop-code","prefix":"计算机基础/操作系统/","children":"structure","collapsible":true,"expanded":true},{"text":"计算机网络","icon":"fas fa-network-wired","prefix":"计算机基础/网络/","children":"structure","collapsible":true,"expanded":true},{"text":"MySQL","icon":"fas fa-database","prefix":"数据库/MySQL/","children":"structure","collapsible":true,"expanded":true},{"text":"Redis","icon":"fas fa-server","prefix":"数据库/Redis/","children":"structure","collapsible":true,"expanded":true},{"text":"MongoDB","icon":"fas fa-leaf","prefix":"数据库/MongoDB/","children":"structure","collapsible":true,"expanded":true},{"text":"Elasticsearch","icon":"fas fa-search","prefix":"数据库/Elasticsearch/","children":"structure","collapsible":true,"expanded":false},{"text":"数据库基础","icon":"fas fa-database","prefix":"数据库/基础/","children":"structure","collapsible":true,"expanded":false},{"text":"杂碎记录","icon":"fas fa-sticky-note","prefix":"杂碎记录/","children":"structure","collapsible":true,"expanded":false}],"/leetcode/":[{"text":"哈希","icon":" fas fa-project-diagram","prefix":"哈希/","children":"structure","collapsible":true,"expanded":true},{"text":"双指针","icon":" fas fa-project-diagram","prefix":"双指针/","children":"structure","collapsible":true,"expanded":true},{"text":"滑动窗口","icon":" fas fa-project-diagram","prefix":"滑动窗口/","children":"structure","collapsible":true,"expanded":true},{"text":"子串","icon":" fas fa-project-diagram","prefix":"子串/","children":"structure","collapsible":true,"expanded":true},{"text":"数组","icon":" fas fa-project-diagram","prefix":"数组/","children":"structure","collapsible":true,"expanded":true},{"text":"矩阵","icon":" fas fa-project-diagram","prefix":"矩阵/","children":"structure","collapsible":true,"expanded":true},{"text":"链表","icon":" fas fa-project-diagram","prefix":"链表/","children":"structure","collapsible":true,"expanded":true}],"/tech/":[{"text":"场景","icon":"fas fa-sitemap","prefix":"场景/","children":"structure","collapsible":true,"expanded":true}],"/奶奶八股/":[{"text":"基础","icon":"fas fa-sitemap","prefix":"基础/","children":"structure","collapsible":true,"expanded":true}],"/":["","intro"]}}}}')},8123:(s,i,a)=>{a.d(i,{v:()=>n});const n={"/Java八股/Java/Java基础/":["Java基础上","Java基础下","Java基础中",{text:"重要知识点",prefix:"重要知识点/",collapsible:!0,children:["BigDecimal 详解","Java SPI 机制详解","Java 代理模式详解","Java 反射机制详解","Java 序列化详解","Java 语法糖详解","Java 魔法类 Unsafe 详解","Java值传递详解"]}],"/Java八股/Java/Java并发/":["Java并发面试题上","Java并发面试题下","Java并发面试题中"],"/Java八股/Java/Java集合/":["Java集合操作总结","Java集合面试题上","Java集合面试题下",{text:"源码分析",prefix:"源码分析/",collapsible:!0,children:["ArrayBlockingQueue 源码分析 ","ArrayList源码分析","ConcurrentHashMap 源码分析","CopyOnWriteArrayList 源码分析","DelayQueue 源码分析","HashMap 源码分析","LinkedHashMap 源码分析","LinkedList 源码分析"]}],"/Java八股/计算机基础/Linux/":["Linux基础知识总结","Shell基础知识总结"],"/Java八股/计算机基础/操作系统/":["操作系统面试题上","操作系统面试题下"],"/Java八股/计算机基础/网络/":["计算机网络面试题上","计算机网络面试题下"],"/Java八股/数据库/MySQL/":["MySQL常见面试题","MySQL高性能优化",{text:"重要知识点",prefix:"重要知识点/",collapsible:!0,children:["InnoDB存储引擎对MVCC的实现","MySQL三大日志详解","MySQL事务隔离级别","MySQL执行计划分析","MySQL 日期类型","MySQL查询缓存详解","MySQL索引详解","MySQL自增主键","MySQL隐式转换索引失效","SQL语句执行过程","去markdown"]}],"/Java八股/数据库/Redis/":["Redis常见面试题总结(上)","Redis 常见面试题总结（下）",{text:"重要知识点",prefix:"重要知识点/",collapsible:!0,children:["3种常用的缓存读写策略","Redis 3 种特殊数据类型","Redis 5 种基本数据类型","Redis常见阻塞原因","Redis 持久化机制","Redis内存碎片","Redis怎么实现延时任务","Redis为什么用跳表实现有序集合"]}],"/Java八股/数据库/MongoDB/":["MongoDB常见面试题总结（上）","MongoDB常见面试题总结（下）"],"/Java八股/数据库/Elasticsearch/":[],"/Java八股/数据库/基础/":["NoSQl",{text:"SQL",prefix:"SQL/",collapsible:!0,children:["SQL语法基础知识"]},"字符集详解","数据库基础"],"/Java八股/杂碎记录/":[{text:"～前端杂记",prefix:"～前端杂记/",collapsible:!0,children:[{text:"JS",prefix:"JS/",collapsible:!0,children:["js判断对象是够为空对象的方法"]},{text:"Node",prefix:"Node/",collapsible:!0,children:["fnm指令","http-server"]},{text:"Vue",prefix:"Vue/",collapsible:!0,children:["vue设置端口号"]},{text:"综合",prefix:"综合/",collapsible:!0,children:["淘宝镜像源"]}]},{text:"～后端杂记",prefix:"～后端杂记/",collapsible:!0,children:[{text:"Java",prefix:"Java/",collapsible:!0,children:["可变参数","线程的状态","锁的分类","拦截器","继承","自定义异常","递归","重载",{text:"反射",prefix:"反射/",collapsible:!0,children:["测试class类的创建方式有哪些","获得类的信息","反射获取Class类的实例","通过反射动态创建对象","反射主要API"]},"跨域问题","线程的实现方式"]},{text:"Mybatis Plus",prefix:"Mybatis-plus/",collapsible:!0,children:["insert","select","update","连接mysql数据库","mybatis-plus配置日志","乐观锁"]},{text:"Spring",prefix:"Spring/",collapsible:!0,children:["常用注解","AOP"]}]},{text:"～工具杂记",prefix:"～工具杂记/",collapsible:!0,children:["chocolatey的安装","fnm的安装","Mysql安装","Navicat16下载及免费激活"]},{text:"～数据库杂记",prefix:"～数据库杂记/",collapsible:!0,children:["数据库事务"]}],"/leetcode/哈希/":["俩数之和","最长连续序列","字母异位词分组"],"/leetcode/双指针/":["三数之和","接雨水","盛最多水的容器","移动零"],"/leetcode/滑动窗口/":["找到字符串中所有字母异位词","无重复字符的最长子串"],"/leetcode/子串/":["最小覆盖子串","和为 K 的子数组","滑动窗口最大值"],"/leetcode/数组/":["最大子数组和","合并区间","缺失的第一个正数","轮转数组","除自身以外数组的乘积"],"/leetcode/矩阵/":["搜索二维矩阵","旋转图像","矩阵置零","螺旋矩阵"],"/leetcode/链表/":["俩数相加","反转链表"," 合并两个有序链表","回文链表","环形链表","环形链表 II","相交链表"],"/tech/场景/":["分布式单例","分布式锁","mq消费方式","短链接","Rpc","mq","秒杀","并发流统计","拦截器和dfa算法脱敏"],"/奶奶八股/基础/":["/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E8%BF%9B%E7%A8%8B%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%8F%91%E7%94%9F%E4%BA%86%E5%B4%A9%E6%BA%83%EF%BC%8C%E5%B7%B2%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E5%90%97_.html","/%E5%A5%B6%E5%A5%B6%E5%85%AB%E8%82%A1/%E5%9F%BA%E7%A1%80/%E9%94%AE%E7%9B%98%E6%95%B2%E5%85%A5%E5%AD%97%E6%AF%8D%E6%97%B6%EF%BC%8C%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88_.html"]}},2878:(s,i,a)=>{a.d(i,{P:()=>n});const n={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>'}}},s=>{s.O(0,[1185,5189],(()=>s(s.s=8731))),s.O()}]);