"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[6054],{6262:(n,s)=>{s.A=(n,s)=>{const l=n.__vccOpts||n;for(const[n,a]of s)l[n]=a;return l}},2133:(n,s,l)=>{l.r(s),l.d(s,{comp:()=>r,data:()=>t});var a=l(641);const i=[(0,a.Fv)('<h1 id="sql语句执行过程" tabindex="-1"><a class="header-anchor" href="#sql语句执行过程"><span>SQL语句执行过程</span></a></h1><hr><h2 id="_1-mysql-基础架构分析" tabindex="-1"><a class="header-anchor" href="#_1-mysql-基础架构分析"><span><strong>1. MySQL 基础架构分析</strong></span></a></h2><p>MySQL 的架构主要分为两层：</p><ol><li><strong>Server 层</strong>：通用部分，负责 SQL 解析、优化、执行等。</li><li><strong>存储引擎层</strong>：具体实现数据存储和提取，支持多种存储引擎（如 InnoDB、MyISAM）。</li></ol><hr><h3 id="_1-1-mysql-基本架构概览" tabindex="-1"><a class="header-anchor" href="#_1-1-mysql-基本架构概览"><span><strong>1.1 MySQL 基本架构概览</strong></span></a></h3><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|             客户端                |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|            连接管理层             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|         查询解析与优化层           |</span></span>\n<span class="line"><span>|  SQL 解析、查询优化、执行计划生成  |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|        存储引擎 API 层            |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>             |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span>\n<span class="line"><span>|          存储引擎层               |</span></span>\n<span class="line"><span>|  InnoDB、MyISAM、Memory等引擎     |</span></span>\n<span class="line"><span>+-----------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-2-server-层基本组件介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-server-层基本组件介绍"><span><strong>1.2 Server 层基本组件介绍</strong></span></a></h3><ol><li><p><strong>连接管理</strong>：</p><ul><li>管理客户端连接，分配线程。</li><li>支持长连接和短连接。</li></ul></li><li><p><strong>查询缓存（Query Cache）</strong>：</p><ul><li>缓存结果集，减少重复查询的开销。</li><li>已被 MySQL 8.0 废弃。</li></ul></li><li><p><strong>解析器（Parser）</strong>：</p><ul><li>将 SQL 语句解析为语法树（AST）。</li></ul></li><li><p><strong>查询优化器（Optimizer）</strong>：</p><ul><li>根据代价模型选择最优执行计划。</li><li>如选择合适的索引、JOIN 顺序等。</li></ul></li><li><p><strong>执行器（Executor）</strong>：</p><ul><li>按优化器生成的执行计划实际执行 SQL。</li></ul></li><li><p><strong>存储引擎</strong>：</p><ul><li>通过存储引擎 API，调用具体存储引擎操作数据。</li><li>InnoDB 是最常用的存储引擎。</li></ul></li></ol><hr><h2 id="_2-sql-语句执行流程分析" tabindex="-1"><a class="header-anchor" href="#_2-sql-语句执行流程分析"><span><strong>2. SQL 语句执行流程分析</strong></span></a></h2><h3 id="_2-1-查询语句的执行流程" tabindex="-1"><a class="header-anchor" href="#_2-1-查询语句的执行流程"><span><strong>2.1 查询语句的执行流程</strong></span></a></h3><p>以 <code>SELECT * FROM users WHERE id = 1;</code> 为例，查询语句的执行流程如下：</p><h4 id="_1-连接管理" tabindex="-1"><a class="header-anchor" href="#_1-连接管理"><span><strong>1. 连接管理</strong></span></a></h4><ul><li>客户端通过 <code>TCP/IP</code> 或 <code>Socket</code> 连接到 MySQL。</li><li>MySQL 分配线程池中的一个线程，负责处理该连接。</li></ul><hr><h4 id="_2-查询缓存检查" tabindex="-1"><a class="header-anchor" href="#_2-查询缓存检查"><span><strong>2. 查询缓存检查</strong></span></a></h4><ul><li><strong>作用</strong>：检查查询是否已缓存。</li><li><strong>流程</strong>： <ol><li>如果缓存命中，直接返回结果集。</li><li>如果未命中，进入下一步（MySQL 8.0 以上已移除）。</li></ol></li></ul><hr><h4 id="_3-语法解析" tabindex="-1"><a class="header-anchor" href="#_3-语法解析"><span><strong>3. 语法解析</strong></span></a></h4><ul><li><strong>作用</strong>：将 SQL 转换为语法树。</li><li><strong>流程</strong>： <ol><li>解析器检查 SQL 语句的语法是否正确。</li><li>如果语法有误，返回错误信息。</li></ol></li></ul><hr><h4 id="_4-查询优化" tabindex="-1"><a class="header-anchor" href="#_4-查询优化"><span><strong>4. 查询优化</strong></span></a></h4><ul><li><strong>作用</strong>：选择最优的执行计划。</li><li><strong>流程</strong>： <ol><li>分析表的统计信息（如索引、行数）。</li><li>判断是否使用索引，以及选择哪种索引。</li><li>确定 JOIN 顺序。</li></ol></li><li><strong>示例</strong>： <ul><li>如果 <code>users</code> 表的 <code>id</code> 列有索引，则优化器会选择使用索引进行查询。</li></ul></li></ul><hr><h4 id="_5-权限校验" tabindex="-1"><a class="header-anchor" href="#_5-权限校验"><span><strong>5. 权限校验</strong></span></a></h4><ul><li><strong>作用</strong>：检查当前用户是否有权限访问表或字段。</li><li><strong>流程</strong>： <ul><li>如果权限不足，则返回错误。</li></ul></li></ul><hr><h4 id="_6-执行器执行" tabindex="-1"><a class="header-anchor" href="#_6-执行器执行"><span><strong>6. 执行器执行</strong></span></a></h4><ul><li><strong>作用</strong>：按优化器生成的计划，逐步执行查询。</li><li><strong>流程</strong>： <ol><li>根据索引或全表扫描，找到目标数据。</li><li>将结果集返回给客户端。</li></ol></li></ul><hr><h3 id="_2-2-更新语句的执行流程" tabindex="-1"><a class="header-anchor" href="#_2-2-更新语句的执行流程"><span><strong>2.2 更新语句的执行流程</strong></span></a></h3><p>以 <code>UPDATE users SET age = 30 WHERE id = 1;</code> 为例，更新语句的执行流程如下：</p><h4 id="_1-连接管理-1" tabindex="-1"><a class="header-anchor" href="#_1-连接管理-1"><span><strong>1. 连接管理</strong></span></a></h4><ul><li>同查询语句，建立连接并分配线程。</li></ul><hr><h4 id="_2-查询缓存清除" tabindex="-1"><a class="header-anchor" href="#_2-查询缓存清除"><span><strong>2. 查询缓存清除</strong></span></a></h4><ul><li><strong>作用</strong>：更新操作会使相关的查询缓存失效。</li><li><strong>流程</strong>： <ul><li>清除与 <code>users</code> 表相关的缓存结果。</li></ul></li></ul><hr><h4 id="_3-语法解析-1" tabindex="-1"><a class="header-anchor" href="#_3-语法解析-1"><span><strong>3. 语法解析</strong></span></a></h4><ul><li>同查询语句，检查 SQL 语法并生成语法树。</li></ul><hr><h4 id="_4-查询优化-1" tabindex="-1"><a class="header-anchor" href="#_4-查询优化-1"><span><strong>4. 查询优化</strong></span></a></h4><ul><li><strong>作用</strong>：生成最优执行计划，找到需要更新的记录。</li><li><strong>流程</strong>： <ul><li>如果 <code>id</code> 列有索引，则通过索引定位到目标行。</li></ul></li></ul><hr><h4 id="_5-执行器执行" tabindex="-1"><a class="header-anchor" href="#_5-执行器执行"><span><strong>5. 执行器执行</strong></span></a></h4><ul><li><strong>流程</strong>： <ol><li>按执行计划定位目标行。</li><li>调用存储引擎修改数据。</li><li>生成 <strong>undo log</strong>，用于支持事务回滚。</li><li>修改数据并记录 <strong>redo log</strong>，保证数据持久性。</li></ol></li></ul><hr><h4 id="_6-binlog-写入" tabindex="-1"><a class="header-anchor" href="#_6-binlog-写入"><span><strong>6. Binlog 写入</strong></span></a></h4><ul><li><strong>作用</strong>：记录更新操作，用于数据恢复和主从复制。</li><li><strong>流程</strong>： <ol><li>生成 binlog。</li><li>通过两阶段提交机制，确保 binlog 和 redo log 的一致性。</li></ol></li></ul><hr><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结"><span><strong>3. 总结</strong></span></a></h2><h3 id="_3-1-查询语句执行过程" tabindex="-1"><a class="header-anchor" href="#_3-1-查询语句执行过程"><span><strong>3.1 查询语句执行过程</strong></span></a></h3><ol><li><strong>连接管理</strong>：与客户端建立连接。</li><li><strong>查询缓存</strong>：命中则直接返回，否则继续。</li><li><strong>语法解析</strong>：检查 SQL 语法，生成语法树。</li><li><strong>查询优化</strong>：选择最优的执行计划。</li><li><strong>权限校验</strong>：检查用户权限。</li><li><strong>执行器</strong>：调用存储引擎，执行计划。</li></ol><hr><h3 id="_3-2-更新语句执行过程" tabindex="-1"><a class="header-anchor" href="#_3-2-更新语句执行过程"><span><strong>3.2 更新语句执行过程</strong></span></a></h3><ol><li><strong>连接管理</strong>：与客户端建立连接。</li><li><strong>查询缓存清除</strong>：清除与表相关的缓存。</li><li><strong>语法解析</strong>：检查 SQL 语法。</li><li><strong>查询优化</strong>：选择最优的执行计划。</li><li><strong>执行器</strong>：调用存储引擎更新数据，记录 undo log 和 redo log。</li><li><strong>Binlog 写入</strong>：记录操作日志，用于恢复和复制。</li></ol><hr><h3 id="_3-3-存储引擎的作用" tabindex="-1"><a class="header-anchor" href="#_3-3-存储引擎的作用"><span><strong>3.3 存储引擎的作用</strong></span></a></h3><p>存储引擎负责：</p><ul><li>数据的实际存储。</li><li>支持事务（如 undo log 和 redo log）。</li><li>提供索引支持（如 B+ 树索引）。</li></ul><p><strong>常见引擎</strong>：</p><ul><li><strong>InnoDB</strong>：支持事务、行级锁，性能优秀。</li><li><strong>MyISAM</strong>：不支持事务，读性能优越。</li></ul><hr><h2 id="_4-实际应用中的优化建议" tabindex="-1"><a class="header-anchor" href="#_4-实际应用中的优化建议"><span><strong>4. 实际应用中的优化建议</strong></span></a></h2><ol><li><strong>使用 InnoDB 存储引擎</strong>：支持事务和 MVCC，适合大多数场景。</li><li><strong>合理设计索引</strong>：优化查询性能，避免全表扫描。</li><li><strong>避免查询缓存</strong>：MySQL 8.0 已废弃 Query Cache，不再依赖缓存。</li><li><strong>减少锁冲突</strong>：通过批量更新、缩小事务范围提高并发性能。</li><li><strong>监控慢查询</strong>：开启慢查询日志，分析执行时间长的 SQL。</li></ol><hr>',69)],e={},r=(0,l(6262).A)(e,[["render",function(n,s){return(0,a.uX)(),(0,a.CE)("div",null,i)}]]),t=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/SQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html","title":"SQL语句执行过程","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-23T00:00:00.000Z","category":["后端"],"tag":["MySQL","数据库"],"description":"SQL语句执行过程 1. MySQL 基础架构分析 MySQL 的架构主要分为两层： Server 层：通用部分，负责 SQL 解析、优化、执行等。 存储引擎层：具体实现数据存储和提取，支持多种存储引擎（如 InnoDB、MyISAM）。 1.1 MySQL 基本架构概览 1.2 Server 层基本组件介绍 连接管理： 管理客户端连接，分配线程。 支...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/SQL%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"SQL语句执行过程"}],["meta",{"property":"og:description","content":"SQL语句执行过程 1. MySQL 基础架构分析 MySQL 的架构主要分为两层： Server 层：通用部分，负责 SQL 解析、优化、执行等。 存储引擎层：具体实现数据存储和提取，支持多种存储引擎（如 InnoDB、MyISAM）。 1.1 MySQL 基本架构概览 1.2 Server 层基本组件介绍 连接管理： 管理客户端连接，分配线程。 支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL语句执行过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"1. MySQL 基础架构分析","slug":"_1-mysql-基础架构分析","link":"#_1-mysql-基础架构分析","children":[{"level":3,"title":"1.1 MySQL 基本架构概览","slug":"_1-1-mysql-基本架构概览","link":"#_1-1-mysql-基本架构概览","children":[]},{"level":3,"title":"1.2 Server 层基本组件介绍","slug":"_1-2-server-层基本组件介绍","link":"#_1-2-server-层基本组件介绍","children":[]}]},{"level":2,"title":"2. SQL 语句执行流程分析","slug":"_2-sql-语句执行流程分析","link":"#_2-sql-语句执行流程分析","children":[{"level":3,"title":"2.1 查询语句的执行流程","slug":"_2-1-查询语句的执行流程","link":"#_2-1-查询语句的执行流程","children":[]},{"level":3,"title":"2.2 更新语句的执行流程","slug":"_2-2-更新语句的执行流程","link":"#_2-2-更新语句的执行流程","children":[]}]},{"level":2,"title":"3. 总结","slug":"_3-总结","link":"#_3-总结","children":[{"level":3,"title":"3.1 查询语句执行过程","slug":"_3-1-查询语句执行过程","link":"#_3-1-查询语句执行过程","children":[]},{"level":3,"title":"3.2 更新语句执行过程","slug":"_3-2-更新语句执行过程","link":"#_3-2-更新语句执行过程","children":[]},{"level":3,"title":"3.3 存储引擎的作用","slug":"_3-3-存储引擎的作用","link":"#_3-3-存储引擎的作用","children":[]}]},{"level":2,"title":"4. 实际应用中的优化建议","slug":"_4-实际应用中的优化建议","link":"#_4-实际应用中的优化建议","children":[]}],"git":{"createdTime":1732350028000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.32,"words":1295},"filePathRelative":"Java八股/数据库/MySQL/重要知识点/SQL语句执行过程.md","localizedDate":"2024年11月23日","excerpt":"\\n<hr>\\n<h2><strong>1. MySQL 基础架构分析</strong></h2>\\n<p>MySQL 的架构主要分为两层：</p>\\n<ol>\\n<li><strong>Server 层</strong>：通用部分，负责 SQL 解析、优化、执行等。</li>\\n<li><strong>存储引擎层</strong>：具体实现数据存储和提取，支持多种存储引擎（如 InnoDB、MyISAM）。</li>\\n</ol>\\n<hr>\\n<h3><strong>1.1 MySQL 基本架构概览</strong></h3>\\n<div class=\\"language-plaintext line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"plaintext\\" data-title=\\"plaintext\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>|             客户端                |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>             |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>|            连接管理层             |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>             |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>|         查询解析与优化层           |</span></span>\\n<span class=\\"line\\"><span>|  SQL 解析、查询优化、执行计划生成  |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>             |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>|        存储引擎 API 层            |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>             |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span>\\n<span class=\\"line\\"><span>|          存储引擎层               |</span></span>\\n<span class=\\"line\\"><span>|  InnoDB、MyISAM、Memory等引擎     |</span></span>\\n<span class=\\"line\\"><span>+-----------------------------------+</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);