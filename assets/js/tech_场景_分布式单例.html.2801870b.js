"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[4555],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},8034:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const e=[(0,n.Fv)('<h1 id="☁️-分布式单例对象怎么实现-彻底讲透-别再一知半解" tabindex="-1"><a class="header-anchor" href="#☁️-分布式单例对象怎么实现-彻底讲透-别再一知半解"><span>☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！</span></a></h1><hr><h2 id="🧩-1-什么是单例-什么是分布式单例" tabindex="-1"><a class="header-anchor" href="#🧩-1-什么是单例-什么是分布式单例"><span>🧩 1. 什么是单例？什么是分布式单例？</span></a></h2><p>我们先说说**单例模式（Singleton）**是干嘛的。</p><p>👉 在 Java 里，我们希望一个类的对象<strong>只存在一份实例</strong>，整个程序都共享这个对象，这就是单例模式。你可能写过这样的代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> INSTANCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> INSTANCE;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是“单机单进程单例”。</p><hr><h2 id="🚨-问题来了" tabindex="-1"><a class="header-anchor" href="#🚨-问题来了"><span>🚨 问题来了</span></a></h2><p>现在我们有个系统，部署在 <strong>多台服务器上，每台服务器一个 JVM 进程</strong>，此时每个 JVM 都创建了 <code>Singleton.getInstance()</code>。你觉得你只创建了一个对象，其实有 <strong>N 个对象</strong>！</p><p>所以这时候要实现“全局唯一”，必须解决这个问题：</p><h3 id="❓如何在-多-jvm、多机器-的情况下-保证系统级别只有一个单例对象" tabindex="-1"><a class="header-anchor" href="#❓如何在-多-jvm、多机器-的情况下-保证系统级别只有一个单例对象"><span>❓如何在“多 JVM、多机器”的情况下，保证系统级别只有一个单例对象？</span></a></h3><hr><h2 id="✅-2-分布式单例的设计目标" tabindex="-1"><a class="header-anchor" href="#✅-2-分布式单例的设计目标"><span>✅ 2. 分布式单例的设计目标</span></a></h2><p>我们希望达成这个目标：</p><table><thead><tr><th>场景</th><th>要求</th></tr></thead><tbody><tr><td>多个进程部署在不同机器</td><td>所有进程之间只能有一个在同一时间内拥有单例对象</td></tr><tr><td>多个线程并发请求</td><td>谁先获取成功，谁用，别人等待或放弃</td></tr><tr><td>系统崩溃恢复</td><td>要能恢复对象状态或重新抢占</td></tr></tbody></table><p>这个问题其实等价于：</p><blockquote><p>分布式场景下的「互斥访问」+「状态同步」</p></blockquote><hr><h2 id="🛠️-3-实现方案详解-推荐-redis-实现-数据落地" tabindex="-1"><a class="header-anchor" href="#🛠️-3-实现方案详解-推荐-redis-实现-数据落地"><span>🛠️ 3. 实现方案详解（推荐 Redis 实现 + 数据落地）</span></a></h2><h3 id="🌟-整体思路-三步走" tabindex="-1"><a class="header-anchor" href="#🌟-整体思路-三步走"><span>🌟 整体思路：三步走</span></a></h3><ol><li>用 <strong>Redis 的分布式锁</strong>，实现“谁先抢到锁，谁先用单例对象”</li><li>抢到锁的节点，从 Redis 中读取对象数据（或自己初始化），然后返回一个对象实例</li><li>使用完对象后：<strong>更新状态并释放锁</strong></li></ol><hr><h2 id="🧱-4-详细实现步骤和代码-基于-redis" tabindex="-1"><a class="header-anchor" href="#🧱-4-详细实现步骤和代码-基于-redis"><span>🧱 4. 详细实现步骤和代码（基于 Redis）</span></a></h2><p>我们定义两个键：</p><ul><li><code>singleton_lock</code>: 用于加锁，防止多进程同时创建对象</li><li><code>singleton_data</code>: 存储对象数据，用于反序列化出实例</li></ul><hr><h3 id="🧪-step-1-尝试加锁" tabindex="-1"><a class="header-anchor" href="#🧪-step-1-尝试加锁"><span>🧪 Step 1：尝试加锁</span></a></h3><p>我们使用 Redis 的 <code>SET key value NX EX</code> 命令，它的意思是：</p><ul><li><code>NX</code>: 如果 key 不存在才 set（只允许第一个抢到）</li><li><code>EX</code>: 设置过期时间（避免锁死）</li><li>value 是唯一标识（UUID），释放时验证用</li></ul><p>示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lockKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;singleton_lock&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lockVal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> UUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomUUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockKey, lockVal, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;EX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;OK&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 没抢到锁，放弃或重试</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🧬-step-2-读取或构建单例对象" tabindex="-1"><a class="header-anchor" href="#🧬-step-2-读取或构建单例对象"><span>🧬 Step 2：读取或构建单例对象</span></a></h3><p>我们假设这个对象是个配置类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maxThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> safeMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // getter / setter</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先看 Redis 是否已存：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> json </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;singleton_data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cfg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (json </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    cfg </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(json, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    cfg </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Config</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    cfg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    cfg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setSafeMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🧼-step-3-释放锁-更新状态" tabindex="-1"><a class="header-anchor" href="#🧼-step-3-释放锁-更新状态"><span>🧼 Step 3：释放锁 + 更新状态</span></a></h3><p>Redis 锁释放时有个坑：</p><p>🔴 不能直接 <code>jedis.del(lockKey)</code>，防止误删别人的锁！</p><p>✅ 正确做法：Lua 脚本检查 <code>value</code> 是否是自己的，再删</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lua </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             &quot;return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lua, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockKey), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockVal));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，把用完的对象持久化：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;singleton_data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toJSONString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cfg));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🔁-总体流程图" tabindex="-1"><a class="header-anchor" href="#🔁-总体流程图"><span>🔁 总体流程图</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Client A          Client B</span></span>\n<span class="line"><span>   |                 |</span></span>\n<span class="line"><span>   |   Redis SET NX  |   &lt;-- 加锁</span></span>\n<span class="line"><span>   |     成功        |</span></span>\n<span class="line"><span>   |   Redis GET     |   &lt;-- 获取对象数据</span></span>\n<span class="line"><span>   |   Redis SET     |   &lt;-- 更新对象状态</span></span>\n<span class="line"><span>   |   Lua 解锁      |   &lt;-- 安全释放锁</span></span>\n<span class="line"><span>   |                 |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-5-优势总结" tabindex="-1"><a class="header-anchor" href="#✅-5-优势总结"><span>✅ 5. 优势总结</span></a></h2><table><thead><tr><th>维度</th><th>优势</th></tr></thead><tbody><tr><td>高并发</td><td>Redis 原子锁可保证并发竞争</td></tr><tr><td>简单性</td><td>无需额外部署 ZK 或 etcd</td></tr><tr><td>持久性</td><td>对象数据可落盘（JSON 格式）</td></tr><tr><td>安全性</td><td>锁带唯一ID，防止误删</td></tr></tbody></table><hr><h2 id="⚠️-6-注意事项" tabindex="-1"><a class="header-anchor" href="#⚠️-6-注意事项"><span>⚠️ 6. 注意事项</span></a></h2><ul><li>⚠️ 加锁必须带过期时间，避免死锁</li><li>⚠️ 解锁必须用 Lua 脚本，不能随便删 key</li><li>⚠️ 对象内容不能太大（避免 Redis 占内存）</li><li>⚠️ 若要强一致持久化，应定期将 Redis 落盘至数据库</li></ul><hr><h2 id="🌐-7-补充方案-可选" tabindex="-1"><a class="header-anchor" href="#🌐-7-补充方案-可选"><span>🌐 7. 补充方案（可选）</span></a></h2><table><thead><tr><th>方案</th><th>场景</th><th>缺点</th></tr></thead><tbody><tr><td>数据库表 + 行锁</td><td>小流量场景，直接 <code>SELECT FOR UPDATE</code> 锁表</td><td>性能低</td></tr><tr><td>ZooKeeper 临时节点</td><td>企业项目高可用场景，天然分布式锁支持</td><td>运维复杂，写法重</td></tr><tr><td>etcd CAS机制</td><td>云原生、K8s 相关服务中使用多</td><td>依赖 etcd</td></tr></tbody></table><hr>',59)],l={},t=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E4%BE%8B.html","title":"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["后端"],"tag":["Java","面试","场景"],"description":"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！ 🧩 1. 什么是单例？什么是分布式单例？ 我们先说说**单例模式（Singleton）**是干嘛的。 👉 在 Java 里，我们希望一个类的对象只存在一份实例，整个程序都共享这个对象，这就是单例模式。你可能写过这样的代码： 这是“单机单进程单例”。 🚨 问题来了 现在我们有个系统，部署在 多...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！"}],["meta",{"property":"og:description","content":"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！ 🧩 1. 什么是单例？什么是分布式单例？ 我们先说说**单例模式（Singleton）**是干嘛的。 👉 在 Java 里，我们希望一个类的对象只存在一份实例，整个程序都共享这个对象，这就是单例模式。你可能写过这样的代码： 这是“单机单进程单例”。 🚨 问题来了 现在我们有个系统，部署在 多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-13T16:58:17.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"场景"}],["meta",{"property":"article:modified_time","content":"2025-07-13T16:58:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"☁️ 分布式单例对象怎么实现？彻底讲透，别再一知半解！\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-13T16:58:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"🧩 1. 什么是单例？什么是分布式单例？","slug":"🧩-1-什么是单例-什么是分布式单例","link":"#🧩-1-什么是单例-什么是分布式单例","children":[]},{"level":2,"title":"🚨 问题来了","slug":"🚨-问题来了","link":"#🚨-问题来了","children":[{"level":3,"title":"❓如何在“多 JVM、多机器”的情况下，保证系统级别只有一个单例对象？","slug":"❓如何在-多-jvm、多机器-的情况下-保证系统级别只有一个单例对象","link":"#❓如何在-多-jvm、多机器-的情况下-保证系统级别只有一个单例对象","children":[]}]},{"level":2,"title":"✅ 2. 分布式单例的设计目标","slug":"✅-2-分布式单例的设计目标","link":"#✅-2-分布式单例的设计目标","children":[]},{"level":2,"title":"🛠️ 3. 实现方案详解（推荐 Redis 实现 + 数据落地）","slug":"🛠️-3-实现方案详解-推荐-redis-实现-数据落地","link":"#🛠️-3-实现方案详解-推荐-redis-实现-数据落地","children":[{"level":3,"title":"🌟 整体思路：三步走","slug":"🌟-整体思路-三步走","link":"#🌟-整体思路-三步走","children":[]}]},{"level":2,"title":"🧱 4. 详细实现步骤和代码（基于 Redis）","slug":"🧱-4-详细实现步骤和代码-基于-redis","link":"#🧱-4-详细实现步骤和代码-基于-redis","children":[{"level":3,"title":"🧪 Step 1：尝试加锁","slug":"🧪-step-1-尝试加锁","link":"#🧪-step-1-尝试加锁","children":[]},{"level":3,"title":"🧬 Step 2：读取或构建单例对象","slug":"🧬-step-2-读取或构建单例对象","link":"#🧬-step-2-读取或构建单例对象","children":[]},{"level":3,"title":"🧼 Step 3：释放锁 + 更新状态","slug":"🧼-step-3-释放锁-更新状态","link":"#🧼-step-3-释放锁-更新状态","children":[]}]},{"level":2,"title":"🔁 总体流程图","slug":"🔁-总体流程图","link":"#🔁-总体流程图","children":[]},{"level":2,"title":"✅ 5. 优势总结","slug":"✅-5-优势总结","link":"#✅-5-优势总结","children":[]},{"level":2,"title":"⚠️ 6. 注意事项","slug":"⚠️-6-注意事项","link":"#⚠️-6-注意事项","children":[]},{"level":2,"title":"🌐 7. 补充方案（可选）","slug":"🌐-7-补充方案-可选","link":"#🌐-7-补充方案-可选","children":[]}],"git":{"createdTime":1752425897000,"updatedTime":1752425897000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.41,"words":1023},"filePathRelative":"tech/场景/分布式单例.md","localizedDate":"2025年7月13日","excerpt":"\\n<hr>\\n<h2>🧩 1. 什么是单例？什么是分布式单例？</h2>\\n<p>我们先说说**单例模式（Singleton）**是干嘛的。</p>\\n<p>👉 在 Java 里，我们希望一个类的对象<strong>只存在一份实例</strong>，整个程序都共享这个对象，这就是单例模式。你可能写过这样的代码：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Singleton</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    private</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> static</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> final</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Singleton</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> INSTANCE </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Singleton</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> static</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Singleton</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> getInstance</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> INSTANCE;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);