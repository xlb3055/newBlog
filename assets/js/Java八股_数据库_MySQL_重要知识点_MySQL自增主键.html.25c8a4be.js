"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[438],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},952:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>h});var n=a(641);const l=[(0,n.Fv)('<h1 id="mysql自增主键" tabindex="-1"><a class="header-anchor" href="#mysql自增主键"><span>MySQL自增主键</span></a></h1><hr><h2 id="_1-自增值保存在哪里" tabindex="-1"><a class="header-anchor" href="#_1-自增值保存在哪里"><span><strong>1. 自增值保存在哪里？</strong></span></a></h2><h3 id="_1-1-自增主键的定义" tabindex="-1"><a class="header-anchor" href="#_1-1-自增主键的定义"><span><strong>1.1 自增主键的定义</strong></span></a></h3><ul><li>自增主键（AUTO_INCREMENT）是一种特殊的列属性，用于自动生成唯一的数字值，通常用于主键。</li></ul><h3 id="_1-2-自增值的存储" tabindex="-1"><a class="header-anchor" href="#_1-2-自增值的存储"><span><strong>1.2 自增值的存储</strong></span></a></h3><ul><li><strong>InnoDB 存储引擎</strong>：自增值存储在 <strong>内存中</strong>，并不会永久存储到磁盘。 <ul><li>每次 MySQL 重启，自增值会从该表的最大主键值重新初始化。</li><li>因此，可能存在因重启或删除数据导致的自增值跳跃。</li></ul></li><li><strong>MyISAM 存储引擎</strong>：自增值存储在表的 <code>.MYD</code> 文件中，即使重启也能保持连续性。</li></ul><hr><h2 id="_2-自增值不连续的场景" tabindex="-1"><a class="header-anchor" href="#_2-自增值不连续的场景"><span><strong>2. 自增值不连续的场景</strong></span></a></h2><p>自增主键在某些特定情况下会出现不连续，以下是常见的原因及场景分析。</p><hr><h3 id="_2-1-自增值不连续场景-1-事务回滚" tabindex="-1"><a class="header-anchor" href="#_2-1-自增值不连续场景-1-事务回滚"><span><strong>2.1 自增值不连续场景 1：事务回滚</strong></span></a></h3><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span><strong>原因</strong></span></a></h4><ul><li>当事务插入了一条记录，但事务未提交或回滚，自增值已经分配并不会被回收。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span><strong>示例</strong></span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">START TRANSACTION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;John&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- id = 1</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ROLLBACK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Jane&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- id = 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结果" tabindex="-1"><a class="header-anchor" href="#结果"><span><strong>结果</strong></span></a></h4><ul><li>即使事务回滚，下一次插入仍然使用自增值 <code>2</code>，导致主键不连续。</li></ul><hr><h3 id="_2-2-自增值不连续场景-2-删除记录" tabindex="-1"><a class="header-anchor" href="#_2-2-自增值不连续场景-2-删除记录"><span><strong>2.2 自增值不连续场景 2：删除记录</strong></span></a></h3><h4 id="原因-1" tabindex="-1"><a class="header-anchor" href="#原因-1"><span><strong>原因</strong></span></a></h4><ul><li>删除记录后，自增值不会回退，而是继续从当前最大值递增。</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span><strong>示例</strong></span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DELETE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Alice&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- id = 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结果-1" tabindex="-1"><a class="header-anchor" href="#结果-1"><span><strong>结果</strong></span></a></h4><ul><li>删除记录不会影响自增值分配，后续插入仍然从上次分配的自增值递增。</li></ul><hr><h3 id="_2-3-自增值不连续场景-3-主从复制" tabindex="-1"><a class="header-anchor" href="#_2-3-自增值不连续场景-3-主从复制"><span><strong>2.3 自增值不连续场景 3：主从复制</strong></span></a></h3><h4 id="原因-2" tabindex="-1"><a class="header-anchor" href="#原因-2"><span><strong>原因</strong></span></a></h4><ul><li>在主从复制环境下，自增值可能被配置为不同的增量和起始值，用于避免主从冲突。</li><li><strong>设置项</strong>： <ul><li><code>auto_increment_increment</code>：自增值的增量。</li><li><code>auto_increment_offset</code>：自增值的起始偏移量。</li></ul></li></ul><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span><strong>示例</strong></span></a></h4><ul><li>主库配置：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GLOBAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment_increment </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GLOBAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment_offset </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>从库配置：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GLOBAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment_increment </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GLOBAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment_offset </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="结果-2" tabindex="-1"><a class="header-anchor" href="#结果-2"><span><strong>结果</strong></span></a></h4><ul><li>主库的自增值序列：1, 3, 5, ...</li><li>从库的自增值序列：2, 4, 6, ...</li><li>主从之间的自增值序列看似不连续，但可以避免冲突。</li></ul><hr><h3 id="_2-4-自增值不连续场景-4-mysql-重启" tabindex="-1"><a class="header-anchor" href="#_2-4-自增值不连续场景-4-mysql-重启"><span><strong>2.4 自增值不连续场景 4：MySQL 重启</strong></span></a></h3><h4 id="原因-3" tabindex="-1"><a class="header-anchor" href="#原因-3"><span><strong>原因</strong></span></a></h4><ul><li>InnoDB 存储引擎的自增值存储在内存中，重启后会重新初始化为表中最大主键值的下一个值。</li><li>如果在数据库崩溃或重启之前，已分配的自增值未被写入表，可能导致跳跃。</li></ul><h4 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span><strong>示例</strong></span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Tom&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- id = 3</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- MySQL 崩溃或重启</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> users (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Jerry&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- id = 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结果-3" tabindex="-1"><a class="header-anchor" href="#结果-3"><span><strong>结果</strong></span></a></h4><ul><li>如果重启前有分配但未使用的自增值（如 <code>4</code>），则后续插入从表中最大主键值加 1 开始。</li></ul><hr><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结"><span><strong>3. 小结</strong></span></a></h2><table><thead><tr><th><strong>场景</strong></th><th><strong>原因</strong></th><th><strong>解决方法</strong></th></tr></thead><tbody><tr><td><strong>事务回滚</strong></td><td>自增值分配后不回收。</td><td>不可避免，可通过程序逻辑处理。</td></tr><tr><td><strong>删除记录</strong></td><td>删除记录后自增值不会回退。</td><td>不建议对自增主键有连续性要求。</td></tr><tr><td><strong>主从复制</strong></td><td>主从库通过不同的增量和偏移量生成自增值。</td><td>确保增量和偏移量合理配置，避免冲突。</td></tr><tr><td><strong>MySQL 重启</strong></td><td>重启后自增值从表中最大值重新初始化。</td><td>使用其他字段标识数据顺序，如时间戳。</td></tr></tbody></table><hr><h3 id="面试官喜欢的问题分析" tabindex="-1"><a class="header-anchor" href="#面试官喜欢的问题分析"><span><strong>面试官喜欢的问题分析</strong></span></a></h3><ol><li><p><strong>为什么自增主键不连续？</strong></p><ul><li>事务回滚、删除记录、主从复制、自增值存储在内存中等原因都会导致主键不连续。</li></ul></li><li><p><strong>如何解决自增值不连续的问题？</strong></p><ul><li><strong>核心思路</strong>： <ul><li>理解自增主键的设计目的，它的主要职责是保证唯一性，而非连续性。</li><li>如果业务需要连续的序列，可通过程序或业务层实现自定义编号。</li></ul></li></ul></li><li><p><strong>在什么场景下不适合使用自增主键？</strong></p><ul><li>主从复制环境中，可能会导致自增值序列过于分散。</li><li>高并发场景可能导致自增主键生成成为瓶颈（如热点插入）。</li></ul></li><li><p><strong>如何在主从复制中避免自增值冲突？</strong></p><ul><li>配置 <code>auto_increment_increment</code> 和 <code>auto_increment_offset</code>。</li><li>也可通过 UUID 或其他分布式 ID 生成策略解决。</li></ul></li></ol>',48)],t={},e=(0,a(6262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE.html","title":"MySQL自增主键","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-23T00:00:00.000Z","category":["后端"],"tag":["MySQL","数据库"],"description":"MySQL自增主键 1. 自增值保存在哪里？ 1.1 自增主键的定义 自增主键（AUTO_INCREMENT）是一种特殊的列属性，用于自动生成唯一的数字值，通常用于主键。 1.2 自增值的存储 InnoDB 存储引擎：自增值存储在 内存中，并不会永久存储到磁盘。 每次 MySQL 重启，自增值会从该表的最大主键值重新初始化。 因此，可能存在因重启或删除...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"MySQL自增主键"}],["meta",{"property":"og:description","content":"MySQL自增主键 1. 自增值保存在哪里？ 1.1 自增主键的定义 自增主键（AUTO_INCREMENT）是一种特殊的列属性，用于自动生成唯一的数字值，通常用于主键。 1.2 自增值的存储 InnoDB 存储引擎：自增值存储在 内存中，并不会永久存储到磁盘。 每次 MySQL 重启，自增值会从该表的最大主键值重新初始化。 因此，可能存在因重启或删除..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL自增主键\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"1. 自增值保存在哪里？","slug":"_1-自增值保存在哪里","link":"#_1-自增值保存在哪里","children":[{"level":3,"title":"1.1 自增主键的定义","slug":"_1-1-自增主键的定义","link":"#_1-1-自增主键的定义","children":[]},{"level":3,"title":"1.2 自增值的存储","slug":"_1-2-自增值的存储","link":"#_1-2-自增值的存储","children":[]}]},{"level":2,"title":"2. 自增值不连续的场景","slug":"_2-自增值不连续的场景","link":"#_2-自增值不连续的场景","children":[{"level":3,"title":"2.1 自增值不连续场景 1：事务回滚","slug":"_2-1-自增值不连续场景-1-事务回滚","link":"#_2-1-自增值不连续场景-1-事务回滚","children":[]},{"level":3,"title":"2.2 自增值不连续场景 2：删除记录","slug":"_2-2-自增值不连续场景-2-删除记录","link":"#_2-2-自增值不连续场景-2-删除记录","children":[]},{"level":3,"title":"2.3 自增值不连续场景 3：主从复制","slug":"_2-3-自增值不连续场景-3-主从复制","link":"#_2-3-自增值不连续场景-3-主从复制","children":[]},{"level":3,"title":"2.4 自增值不连续场景 4：MySQL 重启","slug":"_2-4-自增值不连续场景-4-mysql-重启","link":"#_2-4-自增值不连续场景-4-mysql-重启","children":[]}]},{"level":2,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[{"level":3,"title":"面试官喜欢的问题分析","slug":"面试官喜欢的问题分析","link":"#面试官喜欢的问题分析","children":[]}]}],"git":{"createdTime":1733029796000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"Java八股/数据库/MySQL/重要知识点/MySQL自增主键.md","localizedDate":"2024年11月23日","excerpt":"\\n<hr>\\n<h2><strong>1. 自增值保存在哪里？</strong></h2>\\n<h3><strong>1.1 自增主键的定义</strong></h3>\\n<ul>\\n<li>自增主键（AUTO_INCREMENT）是一种特殊的列属性，用于自动生成唯一的数字值，通常用于主键。</li>\\n</ul>\\n<h3><strong>1.2 自增值的存储</strong></h3>\\n<ul>\\n<li><strong>InnoDB 存储引擎</strong>：自增值存储在 <strong>内存中</strong>，并不会永久存储到磁盘。\\n<ul>\\n<li>每次 MySQL 重启，自增值会从该表的最大主键值重新初始化。</li>\\n<li>因此，可能存在因重启或删除数据导致的自增值跳跃。</li>\\n</ul>\\n</li>\\n<li><strong>MyISAM 存储引擎</strong>：自增值存储在表的 <code>.MYD</code> 文件中，即使重启也能保持连续性。</li>\\n</ul>","autoDesc":true}')}}]);