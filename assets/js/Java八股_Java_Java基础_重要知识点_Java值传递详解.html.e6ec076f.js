"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[1933],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},4626:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>t});var n=a(641);const l=[(0,n.Fv)('<h1 id="java值传递详解" tabindex="-1"><a class="header-anchor" href="#java值传递详解"><span>Java值传递详解</span></a></h1><hr><h1 id="java-参数传递机制详解" tabindex="-1"><a class="header-anchor" href="#java-参数传递机制详解"><span>Java 参数传递机制详解</span></a></h1><h2 id="_1-形参-实参" tabindex="-1"><a class="header-anchor" href="#_1-形参-实参"><span>1. 形参 &amp; 实参</span></a></h2><ul><li><strong>形参</strong>（形式参数）：是方法定义时的参数名，占位符，用于方法内部。比如 <code>void add(int x)</code> 中的 <code>x</code>。</li><li><strong>实参</strong>（实际参数）：在调用方法时传入的真实值，比如 <code>add(5)</code> 中的 <code>5</code>。</li></ul><h2 id="_2-值传递-引用传递" tabindex="-1"><a class="header-anchor" href="#_2-值传递-引用传递"><span>2. 值传递 &amp; 引用传递</span></a></h2><ul><li><strong>值传递</strong>：方法接收的是参数值的副本。对副本的修改不会影响原始值。</li><li><strong>引用传递</strong>：方法接收的是参数引用的副本，修改引用会直接影响原始对象（因为引用的是同一个内存地址）。</li></ul><h2 id="_3-为什么-java-只有值传递" tabindex="-1"><a class="header-anchor" href="#_3-为什么-java-只有值传递"><span>3. 为什么 Java 只有值传递？</span></a></h2><p>在 Java 中，方法接收的始终是参数的副本，不是原始参数。这意味着：</p><ul><li><strong>基本类型参数</strong>（如 <code>int</code>, <code>double</code>）传递的是值的副本，方法对该副本的更改不影响原始变量。</li><li><strong>引用类型参数</strong>（如 <code>Object</code>, <code>List</code>）传递的是对象引用的副本。虽然引用是副本，但它指向同一对象，因此可以通过引用来修改对象内容，但不能改变引用本身。</li></ul><p>Java 的参数传递机制特点是“值传递”，即传递的永远是<strong>值的副本</strong>，而不是原始变量或引用本身的地址。</p><hr><h2 id="案例-1-传递基本类型参数" tabindex="-1"><a class="header-anchor" href="#案例-1-传递基本类型参数"><span>案例 1：传递基本类型参数</span></a></h2><p>传递基本类型时，传递的是值的副本，对该副本的更改不影响原始变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ValuePassing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        modifyPrimitive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;方法调用后的 num 值: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: 10</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> modifyPrimitive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 修改副本，不影响原始变量</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong>：<code>num</code> 值不会被 <code>modifyPrimitive</code> 方法影响，因为方法接收的是 <code>num</code> 的副本（值），原始变量 <code>num</code> 不会被修改。</p><hr><h2 id="案例-2-传递引用类型参数-修改对象的内容" tabindex="-1"><a class="header-anchor" href="#案例-2-传递引用类型参数-修改对象的内容"><span>案例 2：传递引用类型参数（修改对象的内容）</span></a></h2><p>当传递引用类型时，传递的是对象引用的副本。此引用指向相同的对象，因此可以通过引用修改对象的内容。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Box</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> box</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        modifyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(box);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;方法调用后的 box.value: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: 20</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> modifyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Box</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 修改对象内容，影响原始对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong>：<code>modifyObject</code> 方法中的 <code>b</code> 是 <code>box</code> 的引用副本，但它指向相同的 <code>Box</code> 对象，所以对 <code>b.value</code> 的修改会影响 <code>box.value</code>。</p><hr><h2 id="案例-3-传递引用类型参数-更改引用的指向" tabindex="-1"><a class="header-anchor" href="#案例-3-传递引用类型参数-更改引用的指向"><span>案例 3：传递引用类型参数（更改引用的指向）</span></a></h2><p>在这个案例中，我们尝试更改引用本身的指向，但由于 Java 传递的是引用的副本，对引用的重新赋值不会影响原始对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceAssignment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Box</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> box</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        reassignObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(box);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;方法调用后的 box.value: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: 10</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reassignObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Box</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 创建新对象，b 指向新的对象</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 修改新对象的值</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong>：在 <code>reassignObject</code> 方法中，<code>b</code> 被重新指向了一个新的 <code>Box</code> 对象，但这只是 <code>b</code> 的副本发生了变化，不会影响原始的 <code>box</code> 引用。<code>box.value</code> 仍然保持原值。</p><hr><h2 id="引用传递是怎么样的" tabindex="-1"><a class="header-anchor" href="#引用传递是怎么样的"><span>引用传递是怎么样的？</span></a></h2><p>在引用传递的语言中，方法接收的是原始引用的地址本身，而不是它的副本。这样一来，方法对引用的任何更改都会直接反映到调用方法的地方。</p><p><strong>示例（伪代码）</strong>：</p><div class="language-pseudo line-numbers-mode" data-highlighter="shiki" data-ext="pseudo" data-title="pseudo" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void changeReference(Person person) {</span></span>\n<span class="line"><span>    person = new Person(); // 直接影响原始引用</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在支持引用传递的语言中，这种重新赋值会直接更改原始变量的引用。但在 Java 中不会，Java 只是将引用的副本传递给方法。</p><hr><h2 id="为什么-java-不引入引用传递呢" tabindex="-1"><a class="header-anchor" href="#为什么-java-不引入引用传递呢"><span>为什么 Java 不引入引用传递呢？</span></a></h2><p>Java 的设计原则之一是“简洁、安全和便于理解”。Java 采用值传递，避免了直接操控指针的复杂性和风险（例如指针悬挂、内存泄漏等问题），使得开发人员可以更加专注于代码的逻辑，而不用担心底层内存管理的复杂性。这也提升了 Java 程序的可读性和可维护性。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>Java 中<strong>所有参数传递都是值传递</strong>。</li><li>基本类型传递的是值的副本，对副本的修改不影响原始变量。</li><li>引用类型传递的是引用的副本，可以修改对象内容，但不能更改引用的指向。</li></ul>',37)],e={},h=(0,a(6262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),t=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E8%AF%A6%E8%A7%A3.html","title":"Java值传递详解","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-10T00:00:00.000Z","category":["后端"],"tag":["Java","后端开发技巧"],"description":"Java值传递详解 Java 参数传递机制详解 1. 形参 & 实参 形参（形式参数）：是方法定义时的参数名，占位符，用于方法内部。比如 void add(int x) 中的 x。 实参（实际参数）：在调用方法时传入的真实值，比如 add(5) 中的 5。 2. 值传递 & 引用传递 值传递：方法接收的是参数值的副本。对副本的修改不会影响原始值。 引用...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/Java/Java%E5%9F%BA%E7%A1%80/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Java值传递详解"}],["meta",{"property":"og:description","content":"Java值传递详解 Java 参数传递机制详解 1. 形参 & 实参 形参（形式参数）：是方法定义时的参数名，占位符，用于方法内部。比如 void add(int x) 中的 x。 实参（实际参数）：在调用方法时传入的真实值，比如 add(5) 中的 5。 2. 值传递 & 引用传递 值传递：方法接收的是参数值的副本。对副本的修改不会影响原始值。 引用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"后端开发技巧"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java值传递详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"1. 形参 & 实参","slug":"_1-形参-实参","link":"#_1-形参-实参","children":[]},{"level":2,"title":"2. 值传递 & 引用传递","slug":"_2-值传递-引用传递","link":"#_2-值传递-引用传递","children":[]},{"level":2,"title":"3. 为什么 Java 只有值传递？","slug":"_3-为什么-java-只有值传递","link":"#_3-为什么-java-只有值传递","children":[]},{"level":2,"title":"案例 1：传递基本类型参数","slug":"案例-1-传递基本类型参数","link":"#案例-1-传递基本类型参数","children":[]},{"level":2,"title":"案例 2：传递引用类型参数（修改对象的内容）","slug":"案例-2-传递引用类型参数-修改对象的内容","link":"#案例-2-传递引用类型参数-修改对象的内容","children":[]},{"level":2,"title":"案例 3：传递引用类型参数（更改引用的指向）","slug":"案例-3-传递引用类型参数-更改引用的指向","link":"#案例-3-传递引用类型参数-更改引用的指向","children":[]},{"level":2,"title":"引用传递是怎么样的？","slug":"引用传递是怎么样的","link":"#引用传递是怎么样的","children":[]},{"level":2,"title":"为什么 Java 不引入引用传递呢？","slug":"为什么-java-不引入引用传递呢","link":"#为什么-java-不引入引用传递呢","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1132},"filePathRelative":"Java八股/Java/Java基础/重要知识点/Java值传递详解.md","localizedDate":"2024年11月10日","excerpt":"\\n<hr>\\n<h1>Java 参数传递机制详解</h1>\\n<h2>1. 形参 &amp; 实参</h2>\\n<ul>\\n<li><strong>形参</strong>（形式参数）：是方法定义时的参数名，占位符，用于方法内部。比如 <code>void add(int x)</code> 中的 <code>x</code>。</li>\\n<li><strong>实参</strong>（实际参数）：在调用方法时传入的真实值，比如 <code>add(5)</code> 中的 <code>5</code>。</li>\\n</ul>\\n<h2>2. 值传递 &amp; 引用传递</h2>\\n<ul>\\n<li><strong>值传递</strong>：方法接收的是参数值的副本。对副本的修改不会影响原始值。</li>\\n<li><strong>引用传递</strong>：方法接收的是参数引用的副本，修改引用会直接影响原始对象（因为引用的是同一个内存地址）。</li>\\n</ul>","autoDesc":true}')}}]);