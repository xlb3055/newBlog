"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[4232],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},222:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>e});var n=a(641);const l=[(0,n.Fv)('<hr><h1 id="操作系统面试题上" tabindex="-1"><a class="header-anchor" href="#操作系统面试题上"><span>操作系统面试题上</span></a></h1><hr><h2 id="操作系统基础" tabindex="-1"><a class="header-anchor" href="#操作系统基础"><span>操作系统基础</span></a></h2><h3 id="_1-什么是操作系统" tabindex="-1"><a class="header-anchor" href="#_1-什么是操作系统"><span>1. 什么是操作系统？</span></a></h3><p>操作系统（Operating System，OS）是管理计算机硬件和软件资源的系统软件。它充当用户与硬件之间的桥梁，负责控制和协调计算机的运行，使用户和应用程序可以方便、有效地使用系统资源。</p><h3 id="_2-操作系统主要有哪些功能" tabindex="-1"><a class="header-anchor" href="#_2-操作系统主要有哪些功能"><span>2. 操作系统主要有哪些功能？</span></a></h3><p>操作系统主要功能包括：</p><ul><li><strong>进程管理</strong>：创建、调度和终止进程，管理进程间的通信和同步。</li><li><strong>内存管理</strong>：分配和回收内存，为进程提供内存空间。</li><li><strong>文件系统管理</strong>：提供文件存储、访问和管理。</li><li><strong>设备管理</strong>：控制和管理硬件设备，提供输入输出操作接口。</li><li><strong>安全管理</strong>：提供用户认证、权限管理等，保护系统安全。</li><li><strong>网络管理</strong>：支持网络连接和数据传输。</li></ul><h3 id="_3-常见的操作系统有哪些" tabindex="-1"><a class="header-anchor" href="#_3-常见的操作系统有哪些"><span>3. 常见的操作系统有哪些？</span></a></h3><ul><li><strong>Windows</strong>：微软公司开发的操作系统，主要用于个人电脑和服务器。</li><li><strong>Linux</strong>：开源的类 Unix 操作系统，广泛用于服务器、桌面和嵌入式设备。</li><li><strong>macOS</strong>：苹果公司为其计算机产品开发的操作系统，基于 Unix。</li><li><strong>Android</strong>：基于 Linux 内核的移动操作系统。</li><li><strong>iOS</strong>：苹果公司为其移动设备开发的操作系统。</li></ul><hr><h2 id="用户态和内核态" tabindex="-1"><a class="header-anchor" href="#用户态和内核态"><span>用户态和内核态</span></a></h2><h3 id="用户态和内核态的区别" tabindex="-1"><a class="header-anchor" href="#用户态和内核态的区别"><span>用户态和内核态的区别</span></a></h3><p>操作系统有两种运行状态：</p><ul><li><strong>用户态</strong>：用户程序运行在用户态，无法直接访问硬件资源或执行特权指令，安全性较高。</li><li><strong>内核态</strong>：操作系统核心模块运行在内核态，有最高权限，可以访问系统所有资源。</li></ul><h3 id="系统调用" tabindex="-1"><a class="header-anchor" href="#系统调用"><span>系统调用</span></a></h3><p>用户态进程无法直接访问硬件或执行特权操作，需要通过系统调用接口向内核请求服务。系统调用是用户态进入内核态的一种方式，例如文件读写、内存分配等。</p><hr><h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程"><span>进程和线程</span></a></h2><h3 id="_1-什么是进程和线程" tabindex="-1"><a class="header-anchor" href="#_1-什么是进程和线程"><span>1. 什么是进程和线程？</span></a></h3><ul><li><strong>进程</strong>：操作系统中资源分配的基本单位，包含代码、数据和执行环境。</li><li><strong>线程</strong>：是进程中的执行流，一个进程可以包含多个线程，共享进程的资源。</li></ul><h3 id="_2-进程和线程的区别是什么" tabindex="-1"><a class="header-anchor" href="#_2-进程和线程的区别是什么"><span>2. 进程和线程的区别是什么？</span></a></h3><ul><li><strong>资源</strong>：进程有独立的内存空间，线程共享进程的内存。</li><li><strong>创建</strong>：进程创建耗时较多，线程的创建和销毁开销较小。</li><li><strong>通信</strong>：进程间通信复杂（如管道、共享内存），而线程间共享内存，通信简单。</li></ul><h3 id="_3-有了进程为什么还需要线程" tabindex="-1"><a class="header-anchor" href="#_3-有了进程为什么还需要线程"><span>3. 有了进程为什么还需要线程？</span></a></h3><p>线程允许多个任务在同一进程内并行处理，效率更高。线程共享进程资源，减少了创建和切换的开销，更适合并行计算和 I/O 操作。</p><h3 id="_4-为什么要使用多线程" tabindex="-1"><a class="header-anchor" href="#_4-为什么要使用多线程"><span>4. 为什么要使用多线程？</span></a></h3><p>多线程使得程序可以在单一进程中并行执行，提高资源利用率和执行效率，特别适合处理 I/O 密集型和计算密集型任务。</p><h3 id="_5-线程间的同步的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_5-线程间的同步的方式有哪些"><span>5. 线程间的同步的方式有哪些？</span></a></h3><ul><li><strong>互斥锁</strong>：保证同一时刻只有一个线程访问共享资源。</li><li><strong>信号量</strong>：控制资源的可用数量。</li><li><strong>条件变量</strong>：用于线程间的同步，等待某个条件满足时通知其他线程。</li><li><strong>自旋锁</strong>：适合短期等待的场景，线程循环等待直到资源可用。</li></ul><hr><h2 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理"><span>进程管理</span></a></h2><h3 id="_1-pcb-是什么-包含哪些信息" tabindex="-1"><a class="header-anchor" href="#_1-pcb-是什么-包含哪些信息"><span>1. PCB 是什么？包含哪些信息？</span></a></h3><p><strong>进程控制块</strong>（Process Control Block, PCB）是操作系统用于存储进程信息的数据结构，包含：</p><ul><li><strong>进程 ID</strong>：进程的唯一标识。</li><li><strong>进程状态</strong>：如就绪、运行、等待等。</li><li><strong>寄存器状态</strong>：保存进程的寄存器信息。</li><li><strong>内存管理信息</strong>：如代码段、数据段的地址。</li><li><strong>I/O 信息</strong>：文件描述符和设备信息。</li><li><strong>调度信息</strong>：进程优先级、CPU 使用时间等。</li></ul><h3 id="_2-进程有哪几种状态" tabindex="-1"><a class="header-anchor" href="#_2-进程有哪几种状态"><span>2. 进程有哪几种状态？</span></a></h3><ul><li><strong>新建（New）</strong>：进程正在创建。</li><li><strong>就绪（Ready）</strong>：进程已准备好运行，等待 CPU。</li><li><strong>运行（Running）</strong>：进程正在使用 CPU 资源。</li><li><strong>等待（Waiting）</strong>：进程在等待某个事件完成，如 I/O。</li><li><strong>终止（Terminated）</strong>：进程已完成或被终止。</li></ul><h3 id="_3-进程间的通信方式有哪些" tabindex="-1"><a class="header-anchor" href="#_3-进程间的通信方式有哪些"><span>3. 进程间的通信方式有哪些？</span></a></h3><ul><li><strong>管道（Pipe）</strong>：单向或双向数据流，用于父子进程间通信。</li><li><strong>消息队列</strong>：内核维护的消息列表，适用于多个进程。</li><li><strong>共享内存</strong>：在多个进程间共享一段内存，速度快，但需同步机制。</li><li><strong>信号</strong>：用于进程间传递异步通知。</li><li><strong>套接字（Socket）</strong>：用于网络通信或本地进程通信。</li></ul><h3 id="_4-进程的调度算法有哪些" tabindex="-1"><a class="header-anchor" href="#_4-进程的调度算法有哪些"><span>4. 进程的调度算法有哪些？</span></a></h3><ul><li><strong>先来先服务（FCFS）</strong>：按照到达顺序调度。</li><li><strong>短作业优先（SJF）</strong>：优先调度运行时间短的进程。</li><li><strong>时间片轮转（RR）</strong>：每个进程分配时间片，轮流执行。</li><li><strong>优先级调度</strong>：根据优先级高低调度进程。</li><li><strong>多级反馈队列</strong>：根据优先级动态调整，适用于多种任务场景。</li></ul><h3 id="_5-什么是僵尸进程和孤儿进程" tabindex="-1"><a class="header-anchor" href="#_5-什么是僵尸进程和孤儿进程"><span>5. 什么是僵尸进程和孤儿进程？</span></a></h3><ul><li><strong>僵尸进程</strong>：子进程结束后，父进程未调用 <code>wait()</code> 收集状态，子进程的 PCB 仍占用资源。</li><li><strong>孤儿进程</strong>：父进程提前退出，子进程成为孤儿，系统会将孤儿进程转交给 <code>init</code> 进程管理。</li></ul><h3 id="如何查看是否有僵尸进程" tabindex="-1"><a class="header-anchor" href="#如何查看是否有僵尸进程"><span>如何查看是否有僵尸进程？</span></a></h3><p>可以使用 <code>ps aux | grep Z</code> 命令查找僵尸进程，显示状态为 “Z” 的进程即为僵尸进程。</p><hr><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h2><h3 id="_1-什么是死锁" tabindex="-1"><a class="header-anchor" href="#_1-什么是死锁"><span>1. 什么是死锁？</span></a></h3><p>死锁是指多个进程互相等待对方释放资源，从而导致所有进程都无法继续执行的状态。</p><h3 id="_2-操作系统死锁的例子" tabindex="-1"><a class="header-anchor" href="#_2-操作系统死锁的例子"><span>2. 操作系统死锁的例子</span></a></h3><p>假设进程 A 持有资源 R1，并请求资源 R2，同时进程 B 持有资源 R2，并请求资源 R1，这种情况下，进程 A 和 B 相互等待，造成死锁。</p><h3 id="_3-产生死锁的四个必要条件" tabindex="-1"><a class="header-anchor" href="#_3-产生死锁的四个必要条件"><span>3. 产生死锁的四个必要条件</span></a></h3><ul><li><strong>互斥条件</strong>：资源不可共享。</li><li><strong>占有且等待</strong>：进程占有资源的同时等待其他资源。</li><li><strong>不可剥夺</strong>：进程占有的资源不可强行剥夺。</li><li><strong>环路等待</strong>：形成一个资源循环等待链。</li></ul><h3 id="_4-模拟死锁代码示例" tabindex="-1"><a class="header-anchor" href="#_4-模拟死锁代码示例"><span>4. 模拟死锁代码示例</span></a></h3><p>下面的代码演示了一个简单的死锁场景，两个线程分别持有不同的锁，并试图请求对方的锁：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeadlockExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Holding lock 1...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Waiting for lock 2...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Holding lock 1 &amp; 2...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Holding lock 2...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Waiting for lock 1...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Holding lock 2 &amp; 1...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-解决死锁的方法" tabindex="-1"><a class="header-anchor" href="#_5-解决死锁的方法"><span>5. 解决死锁的方法</span></a></h3><ul><li><strong>资源预防分配</strong>：在开始时分配所有资源。</li><li><strong>资源分配顺序</strong>：规定资源的请求顺序，避免循环等待。</li><li><strong>死锁检测与恢复</strong>：周期性检查系统死锁状态，必要时中止某些进程以恢复系统状态。</li><li><strong>银行家算法</strong>：动态分配资源，确保分配后系统仍处于安全状态。</li></ul><hr>',59)],t={},h=(0,a(6262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),e=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html","title":"操作系统面试题上","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-11T00:00:00.000Z","category":["计算机基础"],"tag":["操作系统"],"description":"操作系统面试题上 操作系统基础 1. 什么是操作系统？ 操作系统（Operating System，OS）是管理计算机硬件和软件资源的系统软件。它充当用户与硬件之间的桥梁，负责控制和协调计算机的运行，使用户和应用程序可以方便、有效地使用系统资源。 2. 操作系统主要有哪些功能？ 操作系统主要功能包括： 进程管理：创建、调度和终止进程，管理进程间的通信和...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"操作系统面试题上"}],["meta",{"property":"og:description","content":"操作系统面试题上 操作系统基础 1. 什么是操作系统？ 操作系统（Operating System，OS）是管理计算机硬件和软件资源的系统软件。它充当用户与硬件之间的桥梁，负责控制和协调计算机的运行，使用户和应用程序可以方便、有效地使用系统资源。 2. 操作系统主要有哪些功能？ 操作系统主要功能包括： 进程管理：创建、调度和终止进程，管理进程间的通信和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:published_time","content":"2024-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统面试题上\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"操作系统基础","slug":"操作系统基础","link":"#操作系统基础","children":[{"level":3,"title":"1. 什么是操作系统？","slug":"_1-什么是操作系统","link":"#_1-什么是操作系统","children":[]},{"level":3,"title":"2. 操作系统主要有哪些功能？","slug":"_2-操作系统主要有哪些功能","link":"#_2-操作系统主要有哪些功能","children":[]},{"level":3,"title":"3. 常见的操作系统有哪些？","slug":"_3-常见的操作系统有哪些","link":"#_3-常见的操作系统有哪些","children":[]}]},{"level":2,"title":"用户态和内核态","slug":"用户态和内核态","link":"#用户态和内核态","children":[{"level":3,"title":"用户态和内核态的区别","slug":"用户态和内核态的区别","link":"#用户态和内核态的区别","children":[]},{"level":3,"title":"系统调用","slug":"系统调用","link":"#系统调用","children":[]}]},{"level":2,"title":"进程和线程","slug":"进程和线程","link":"#进程和线程","children":[{"level":3,"title":"1. 什么是进程和线程？","slug":"_1-什么是进程和线程","link":"#_1-什么是进程和线程","children":[]},{"level":3,"title":"2. 进程和线程的区别是什么？","slug":"_2-进程和线程的区别是什么","link":"#_2-进程和线程的区别是什么","children":[]},{"level":3,"title":"3. 有了进程为什么还需要线程？","slug":"_3-有了进程为什么还需要线程","link":"#_3-有了进程为什么还需要线程","children":[]},{"level":3,"title":"4. 为什么要使用多线程？","slug":"_4-为什么要使用多线程","link":"#_4-为什么要使用多线程","children":[]},{"level":3,"title":"5. 线程间的同步的方式有哪些？","slug":"_5-线程间的同步的方式有哪些","link":"#_5-线程间的同步的方式有哪些","children":[]}]},{"level":2,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[{"level":3,"title":"1. PCB 是什么？包含哪些信息？","slug":"_1-pcb-是什么-包含哪些信息","link":"#_1-pcb-是什么-包含哪些信息","children":[]},{"level":3,"title":"2. 进程有哪几种状态？","slug":"_2-进程有哪几种状态","link":"#_2-进程有哪几种状态","children":[]},{"level":3,"title":"3. 进程间的通信方式有哪些？","slug":"_3-进程间的通信方式有哪些","link":"#_3-进程间的通信方式有哪些","children":[]},{"level":3,"title":"4. 进程的调度算法有哪些？","slug":"_4-进程的调度算法有哪些","link":"#_4-进程的调度算法有哪些","children":[]},{"level":3,"title":"5. 什么是僵尸进程和孤儿进程？","slug":"_5-什么是僵尸进程和孤儿进程","link":"#_5-什么是僵尸进程和孤儿进程","children":[]},{"level":3,"title":"如何查看是否有僵尸进程？","slug":"如何查看是否有僵尸进程","link":"#如何查看是否有僵尸进程","children":[]}]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[{"level":3,"title":"1. 什么是死锁？","slug":"_1-什么是死锁","link":"#_1-什么是死锁","children":[]},{"level":3,"title":"2. 操作系统死锁的例子","slug":"_2-操作系统死锁的例子","link":"#_2-操作系统死锁的例子","children":[]},{"level":3,"title":"3. 产生死锁的四个必要条件","slug":"_3-产生死锁的四个必要条件","link":"#_3-产生死锁的四个必要条件","children":[]},{"level":3,"title":"4. 模拟死锁代码示例","slug":"_4-模拟死锁代码示例","link":"#_4-模拟死锁代码示例","children":[]},{"level":3,"title":"5. 解决死锁的方法","slug":"_5-解决死锁的方法","link":"#_5-解决死锁的方法","children":[]}]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":6.19,"words":1856},"filePathRelative":"Java八股/计算机基础/操作系统/操作系统面试题上.md","localizedDate":"2024年11月11日","excerpt":"<hr>\\n<h1>操作系统面试题上</h1>\\n<hr>\\n<h2>操作系统基础</h2>\\n<h3>1. 什么是操作系统？</h3>\\n<p>操作系统（Operating System，OS）是管理计算机硬件和软件资源的系统软件。它充当用户与硬件之间的桥梁，负责控制和协调计算机的运行，使用户和应用程序可以方便、有效地使用系统资源。</p>\\n<h3>2. 操作系统主要有哪些功能？</h3>\\n<p>操作系统主要功能包括：</p>\\n<ul>\\n<li><strong>进程管理</strong>：创建、调度和终止进程，管理进程间的通信和同步。</li>\\n<li><strong>内存管理</strong>：分配和回收内存，为进程提供内存空间。</li>\\n<li><strong>文件系统管理</strong>：提供文件存储、访问和管理。</li>\\n<li><strong>设备管理</strong>：控制和管理硬件设备，提供输入输出操作接口。</li>\\n<li><strong>安全管理</strong>：提供用户认证、权限管理等，保护系统安全。</li>\\n<li><strong>网络管理</strong>：支持网络连接和数据传输。</li>\\n</ul>","autoDesc":true}')}}]);