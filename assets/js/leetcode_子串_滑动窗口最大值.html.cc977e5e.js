"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[7333],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},8249:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>t});var n=a(641);const l=[(0,n.Fv)('<h1 id="滑动窗口最大值" tabindex="-1"><a class="header-anchor" href="#滑动窗口最大值"><span>滑动窗口最大值</span></a></h1><h3 id="题目-滑动窗口最大值" tabindex="-1"><a class="header-anchor" href="#题目-滑动窗口最大值"><span><strong>题目：滑动窗口最大值</strong></span></a></h3><p><strong>描述：</strong></p><p>给定一个整数数组 <code>nums</code>，和一个整数 <code>k</code>，表示滑动窗口的大小。滑动窗口从数组的最左侧向最右侧移动，每次移动一位。</p><p>要求：返回每次滑动窗口中的最大值。</p><hr><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span><strong>示例：</strong></span></a></h3><p><strong>示例 1:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,3,-1,-3,5,3,6,7], k = 3</span></span>\n<span class="line"><span>输出: [3,3,5,5,6,7]</span></span>\n<span class="line"><span>解释: </span></span>\n<span class="line"><span>滑动窗口的位置                最大值</span></span>\n<span class="line"><span>---------------               -----</span></span>\n<span class="line"><span>[1  3  -1] -3  5  3  6  7       3</span></span>\n<span class="line"><span> 1 [3  -1  -3] 5  3  6  7       3</span></span>\n<span class="line"><span> 1  3 [-1  -3   5] 3  6  7       5</span></span>\n<span class="line"><span> 1  3  -1 [-3   5   3] 6  7       5</span></span>\n<span class="line"><span> 1  3  -1  -3 [5   3   6] 7       6</span></span>\n<span class="line"><span> 1  3  -1  -3   5 [3   6   7]      7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1], k = 1</span></span>\n<span class="line"><span>输出: [1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,-1], k = 1</span></span>\n<span class="line"><span>输出: [1,-1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析"><span><strong>问题分析</strong></span></a></h3><h4 id="题目目标" tabindex="-1"><a class="header-anchor" href="#题目目标"><span><strong>题目目标</strong></span></a></h4><p>给定一个数组 <code>nums</code> 和窗口大小 <code>k</code>，要求在窗口每次移动时，找出窗口内的最大值。</p><h4 id="滑动窗口性质" tabindex="-1"><a class="header-anchor" href="#滑动窗口性质"><span><strong>滑动窗口性质</strong></span></a></h4><ul><li>每次窗口包含 <code>k</code> 个连续的元素，窗口从数组左侧向右侧移动一位。</li><li>窗口的最大值会随着窗口的移动不断更新。</li></ul><hr><h3 id="算法核心思想" tabindex="-1"><a class="header-anchor" href="#算法核心思想"><span><strong>算法核心思想</strong></span></a></h3><h4 id="为什么用双端队列" tabindex="-1"><a class="header-anchor" href="#为什么用双端队列"><span><strong>为什么用双端队列？</strong></span></a></h4><p>双端队列（Deque）是一种支持在队列两端进行插入和删除的结构。我们用它来存储窗口中<strong>可能成为最大值的元素索引</strong>，同时通过以下两点确保它是正确的：</p><ol><li><p><strong>队列中始终保持递减顺序</strong>（从队首到队尾，对应 <code>nums</code> 的值递减）：</p><ul><li>窗口内的最大值始终是队首索引对应的值。</li><li>如果一个新的数比队尾的数大，那么队尾的数不可能成为最大值，直接移除队尾。</li></ul></li><li><p><strong>队列只存储当前窗口的有效索引</strong>：</p><ul><li>如果队首索引已经滑出窗口（<code>i - k &gt;= deque.peekFirst()</code>），移除队首。</li></ul></li></ol><h4 id="队列的意义" tabindex="-1"><a class="header-anchor" href="#队列的意义"><span><strong>队列的意义</strong></span></a></h4><ul><li>队列中的索引对应的值是当前窗口中可能成为最大值的候选。</li><li>队首的索引对应的值是当前窗口的最大值。</li></ul><hr><h3 id="详细算法步骤" tabindex="-1"><a class="header-anchor" href="#详细算法步骤"><span><strong>详细算法步骤</strong></span></a></h3><ol><li><p><strong>初始化</strong>：</p><ul><li>使用一个双端队列 <code>deque</code> 存储数组索引。</li><li>使用结果数组 <code>result</code> 存储每次窗口的最大值。</li></ul></li><li><p><strong>遍历数组</strong>：</p><ul><li><strong>移除过期索引</strong>：如果队首索引已经不在当前窗口范围内（<code>i - k &gt;= deque.peekFirst()</code>），移除队首。</li><li><strong>维护单调递减性</strong>：从队尾开始移除所有比当前值小的索引，因为它们不可能成为当前窗口的最大值。</li><li><strong>加入当前索引</strong>：将当前索引加入队尾。</li><li><strong>记录最大值</strong>：当窗口形成（<code>i &gt;= k - 1</code>），将队首的值加入结果。</li></ul></li><li><p><strong>返回结果</strong>。</p></li></ol><hr><h3 id="详细代码实现" tabindex="-1"><a class="header-anchor" href="#详细代码实现"><span><strong>详细代码实现</strong></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SlidingWindowMax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxSlidingWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (nums </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 初始化结果数组和双端队列</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Deque</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">deque</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 遍历数组</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 1. 移除不在当前窗口范围内的索引</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">peekFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pollFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 2. 移除队列中所有比当前元素小的索引</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">peekLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[i]) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pollLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 3. 将当前索引加入队列</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">offerLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 4. 如果窗口已经形成，记录窗口的最大值（队首）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                result[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">peekFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SlidingWindowMax</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solution</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SlidingWindowMax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 示例 1</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nums1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> k1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxSlidingWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums1, k1))); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: [3, 3, 5, 5, 6, 7]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 示例 2</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nums2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> k2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxSlidingWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums2, k2))); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: [1]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 示例 3</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nums3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> k3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxSlidingWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums3, k3))); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出: [1, -1]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="运行逻辑分析" tabindex="-1"><a class="header-anchor" href="#运行逻辑分析"><span><strong>运行逻辑分析</strong></span></a></h3><h4 id="输入-nums-1-3-1-3-5-3-6-7-k-3" tabindex="-1"><a class="header-anchor" href="#输入-nums-1-3-1-3-5-3-6-7-k-3"><span>输入：<code>nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3</code></span></a></h4><p>我们用双端队列 <code>deque</code> 存储索引，结果数组 <code>result</code> 存储最大值。</p><ol><li><p><strong>初始状态</strong>：</p><ul><li><code>deque = []</code>，<code>result = []</code></li></ul></li><li><p><strong>第一步：i = 0</strong>：</p><ul><li>当前值：<code>nums[0] = 1</code></li><li>队列为空，直接加入索引 0。</li><li><code>deque = [0]</code></li></ul></li><li><p><strong>第二步：i = 1</strong>：</p><ul><li>当前值：<code>nums[1] = 3</code></li><li><code>nums[1] &gt; nums[deque.peekLast()]</code>，移除索引 0。</li><li>加入索引 1。</li><li><code>deque = [1]</code></li></ul></li><li><p><strong>第三步：i = 2</strong>：</p><ul><li>当前值：<code>nums[2] = -1</code></li><li>加入索引 2。</li><li><code>deque = [1, 2]</code></li><li>窗口形成，记录最大值：<code>result = [3]</code></li></ul></li><li><p><strong>第四步：i = 3</strong>：</p><ul><li>当前值：<code>nums[3] = -3</code></li><li>加入索引 3。</li><li><code>deque = [1, 2, 3]</code></li><li>窗口形成，记录最大值：<code>result = [3, 3]</code></li></ul></li><li><p><strong>第五步：i = 4</strong>：</p><ul><li>当前值：<code>nums[4] = 5</code></li><li>索引 1 已过期，移除。</li><li>移除比 5 小的索引 2, 3。</li><li>加入索引 4。</li><li><code>deque = [4]</code></li><li>窗口形成，记录最大值：<code>result = [3, 3, 5]</code></li></ul></li><li><p><strong>继续滑动窗口</strong>：</p><ul><li>每次移除过期索引、维护队列单调递减、记录结果。</li></ul></li></ol><hr><h3 id="关键问题-为什么这样可以保证正确性" tabindex="-1"><a class="header-anchor" href="#关键问题-为什么这样可以保证正确性"><span><strong>关键问题：为什么这样可以保证正确性？</strong></span></a></h3><h4 id="_1-保持单调性" tabindex="-1"><a class="header-anchor" href="#_1-保持单调性"><span><strong>1. 保持单调性</strong></span></a></h4><ul><li>每次新加入元素时，移除比它小的所有元素，确保队列从大到小排列。</li><li>这样队首始终是窗口内的最大值。</li></ul><h4 id="_2-移除过期索引" tabindex="-1"><a class="header-anchor" href="#_2-移除过期索引"><span><strong>2. 移除过期索引</strong></span></a></h4><ul><li>如果队首索引已经滑出窗口范围，移除队首，保证队列只包含当前窗口的值。</li></ul><h4 id="_3-窗口形成后-队首即最大值" tabindex="-1"><a class="header-anchor" href="#_3-窗口形成后-队首即最大值"><span><strong>3. 窗口形成后，队首即最大值</strong></span></a></h4><ul><li>因为队列是单调递减的，队首始终是当前窗口的最大值。</li></ul><hr><h3 id="时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#时间复杂度分析"><span><strong>时间复杂度分析</strong></span></a></h3><ol><li>每个元素最多被插入和删除一次，时间复杂度为 <code>O(n)</code>。</li><li>队列操作的开销为常数，遍历整个数组需要线性时间。</li></ol><p><strong>总时间复杂度</strong>：<code>O(n)</code>。</p><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ol><li><p><strong>为什么队列能保证正确性？</strong></p><ul><li>队列单调递减，保证最大值始终在队首。</li><li>每次只移除无用元素（过期或比当前值小）。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(k)</code>（队列最多存储窗口大小的索引）。</p></li></ol>',52)],h={},e=(0,a(6262).A)(h,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),t=JSON.parse('{"path":"/leetcode/%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html","title":"滑动窗口最大值","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-19T00:00:00.000Z","category":["后端"],"tag":["子串","滑动窗口","leecode"],"description":"滑动窗口最大值 题目：滑动窗口最大值 描述： 给定一个整数数组 nums，和一个整数 k，表示滑动窗口的大小。滑动窗口从数组的最左侧向最右侧移动，每次移动一位。 要求：返回每次滑动窗口中的最大值。 示例： 示例 1: 示例 2: 示例 3: 问题分析 题目目标 给定一个数组 nums 和窗口大小 k，要求在窗口每次移动时，找出窗口内的最大值。 滑动窗口...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/leetcode/%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"滑动窗口最大值"}],["meta",{"property":"og:description","content":"滑动窗口最大值 题目：滑动窗口最大值 描述： 给定一个整数数组 nums，和一个整数 k，表示滑动窗口的大小。滑动窗口从数组的最左侧向最右侧移动，每次移动一位。 要求：返回每次滑动窗口中的最大值。 示例： 示例 1: 示例 2: 示例 3: 问题分析 题目目标 给定一个数组 nums 和窗口大小 k，要求在窗口每次移动时，找出窗口内的最大值。 滑动窗口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T11:31:23.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"子串"}],["meta",{"property":"article:tag","content":"滑动窗口"}],["meta",{"property":"article:tag","content":"leecode"}],["meta",{"property":"article:published_time","content":"2024-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T11:31:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"滑动窗口最大值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-22T11:31:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"题目：滑动窗口最大值","slug":"题目-滑动窗口最大值","link":"#题目-滑动窗口最大值","children":[]},{"level":3,"title":"示例：","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"问题分析","slug":"问题分析","link":"#问题分析","children":[]},{"level":3,"title":"算法核心思想","slug":"算法核心思想","link":"#算法核心思想","children":[]},{"level":3,"title":"详细算法步骤","slug":"详细算法步骤","link":"#详细算法步骤","children":[]},{"level":3,"title":"详细代码实现","slug":"详细代码实现","link":"#详细代码实现","children":[]},{"level":3,"title":"运行逻辑分析","slug":"运行逻辑分析","link":"#运行逻辑分析","children":[]},{"level":3,"title":"关键问题：为什么这样可以保证正确性？","slug":"关键问题-为什么这样可以保证正确性","link":"#关键问题-为什么这样可以保证正确性","children":[]},{"level":3,"title":"时间复杂度分析","slug":"时间复杂度分析","link":"#时间复杂度分析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1732275083000,"updatedTime":1732275083000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.84,"words":1452},"filePathRelative":"leetcode/子串/滑动窗口最大值.md","localizedDate":"2024年11月19日","excerpt":"\\n<h3><strong>题目：滑动窗口最大值</strong></h3>\\n<p><strong>描述：</strong></p>\\n<p>给定一个整数数组 <code>nums</code>，和一个整数 <code>k</code>，表示滑动窗口的大小。滑动窗口从数组的最左侧向最右侧移动，每次移动一位。</p>\\n<p>要求：返回每次滑动窗口中的最大值。</p>\\n<hr>\\n<h3><strong>示例：</strong></h3>\\n<p><strong>示例 1:</strong></p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>输入: nums = [1,3,-1,-3,5,3,6,7], k = 3</span></span>\\n<span class=\\"line\\"><span>输出: [3,3,5,5,6,7]</span></span>\\n<span class=\\"line\\"><span>解释: </span></span>\\n<span class=\\"line\\"><span>滑动窗口的位置                最大值</span></span>\\n<span class=\\"line\\"><span>---------------               -----</span></span>\\n<span class=\\"line\\"><span>[1  3  -1] -3  5  3  6  7       3</span></span>\\n<span class=\\"line\\"><span> 1 [3  -1  -3] 5  3  6  7       3</span></span>\\n<span class=\\"line\\"><span> 1  3 [-1  -3   5] 3  6  7       5</span></span>\\n<span class=\\"line\\"><span> 1  3  -1 [-3   5   3] 6  7       5</span></span>\\n<span class=\\"line\\"><span> 1  3  -1  -3 [5   3   6] 7       6</span></span>\\n<span class=\\"line\\"><span> 1  3  -1  -3   5 [3   6   7]      7</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);