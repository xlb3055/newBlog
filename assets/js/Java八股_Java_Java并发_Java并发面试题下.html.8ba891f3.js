"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[6187],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},3432:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>l});var e=a(641);const n=[(0,e.Fv)('<h1 id="java并发面试题下" tabindex="-1"><a class="header-anchor" href="#java并发面试题下"><span>Java并发面试题下</span></a></h1><hr><h4 id="_1-1-threadlocal-有什么用" tabindex="-1"><a class="header-anchor" href="#_1-1-threadlocal-有什么用"><span>1.1 <strong>ThreadLocal 有什么用？</strong></span></a></h4><p><code>ThreadLocal</code> 为每个线程提供独立的变量副本，可以避免不同线程之间的共享和竞争，使得每个线程访问的都是自己本地的变量。</p><h4 id="_1-2-如何使用-threadlocal" tabindex="-1"><a class="header-anchor" href="#_1-2-如何使用-threadlocal"><span>1.2 <strong>如何使用 ThreadLocal？</strong></span></a></h4><p>可以通过以下方式使用 <code>ThreadLocal</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 创建 ThreadLocal 对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> threadLocal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 设置值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 获取值</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 删除值</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">threadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-threadlocal-原理了解吗" tabindex="-1"><a class="header-anchor" href="#_1-3-threadlocal-原理了解吗"><span>1.3 <strong>ThreadLocal 原理了解吗？</strong></span></a></h4><p><code>ThreadLocal</code> 使用的是线程本地存储。每个线程有一个独立的存储空间，数据存储在当前线程的 <code>ThreadLocalMap</code> 中，<code>ThreadLocal</code> 的 <code>get()</code> 方法根据当前线程返回其存储的值。</p><h4 id="_1-4-threadlocal-内存泄露问题是怎么导致的" tabindex="-1"><a class="header-anchor" href="#_1-4-threadlocal-内存泄露问题是怎么导致的"><span>1.4 <strong>ThreadLocal 内存泄露问题是怎么导致的？</strong></span></a></h4><p>内存泄漏通常发生在 <code>ThreadLocal</code> 的 <code>ThreadLocalMap</code> 中的条目，即使线程结束，也不会立即清理相关资源，因为 <code>ThreadLocalMap</code> 可能持有对 <code>ThreadLocal</code> 的强引用。</p><p>解决方案：</p><ol><li>使用 <code>ThreadLocal.remove()</code> 显式移除线程本地数据。</li><li>在 <code>ThreadLocal</code> 不再使用时，及时清理引用。</li></ol><hr><h3 id="_2-线程池" tabindex="-1"><a class="header-anchor" href="#_2-线程池"><span>2. <strong>线程池</strong></span></a></h3><h4 id="_2-1-什么是线程池" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是线程池"><span>2.1 <strong>什么是线程池？</strong></span></a></h4><p>线程池是一个维护一定数量线程的池子，可以重复利用这些线程来执行多个任务，而无需为每个任务都创建新线程。</p><h4 id="_2-2-为什么要用线程池" tabindex="-1"><a class="header-anchor" href="#_2-2-为什么要用线程池"><span>2.2 <strong>为什么要用线程池？</strong></span></a></h4><ol><li>减少了频繁创建和销毁线程的开销。</li><li>通过复用线程提高了资源利用率。</li><li>通过设置最大线程数限制了资源的使用，避免系统崩溃。</li></ol><h4 id="_2-3-如何创建线程池" tabindex="-1"><a class="header-anchor" href="#_2-3-如何创建线程池"><span>2.3 <strong>如何创建线程池？</strong></span></a></h4><p>可以通过 <code>Executors</code> 工厂类创建：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-4-为什么不推荐使用内置线程池" tabindex="-1"><a class="header-anchor" href="#_2-4-为什么不推荐使用内置线程池"><span>2.4 <strong>为什么不推荐使用内置线程池？</strong></span></a></h4><p>内置线程池如 <code>Executors.newFixedThreadPool()</code> 默认使用不安全的线程池配置，可能导致资源泄漏或任务执行失败。</p><h4 id="_2-5-线程池常见参数有哪些-如何解释" tabindex="-1"><a class="header-anchor" href="#_2-5-线程池常见参数有哪些-如何解释"><span>2.5 <strong>线程池常见参数有哪些？如何解释？</strong></span></a></h4><p>常见参数有：</p><ul><li><strong>corePoolSize</strong>：核心线程数。</li><li><strong>maximumPoolSize</strong>：最大线程数。</li><li><strong>keepAliveTime</strong>：线程空闲时间超过该时间后，线程会被销毁。</li><li><strong>BlockingQueue</strong>：任务队列，存放待执行的任务。</li></ul><h4 id="_2-6-线程池的核心线程会被回收吗" tabindex="-1"><a class="header-anchor" href="#_2-6-线程池的核心线程会被回收吗"><span>2.6 <strong>线程池的核心线程会被回收吗？</strong></span></a></h4><p>核心线程在空闲时不会被回收，除非线程池被关闭。</p><h4 id="_2-7-线程池的拒绝策略有哪些" tabindex="-1"><a class="header-anchor" href="#_2-7-线程池的拒绝策略有哪些"><span>2.7 <strong>线程池的拒绝策略有哪些？</strong></span></a></h4><ol><li><strong>AbortPolicy</strong>：直接抛出异常。</li><li><strong>CallerRunsPolicy</strong>：调用者线程执行任务。</li><li><strong>DiscardPolicy</strong>：丢弃任务。</li><li><strong>DiscardOldestPolicy</strong>：丢弃队列中最旧的任务。</li></ol><h4 id="_2-8-如果不允许丢弃任务-应该选择哪个拒绝策略" tabindex="-1"><a class="header-anchor" href="#_2-8-如果不允许丢弃任务-应该选择哪个拒绝策略"><span>2.8 <strong>如果不允许丢弃任务，应该选择哪个拒绝策略？</strong></span></a></h4><p>选择 <code>CallerRunsPolicy</code>，它会将任务交由调用者线程执行，避免任务丢失。</p><h4 id="_2-9-callerrunspolicy-拒绝策略有什么风险-如何解决" tabindex="-1"><a class="header-anchor" href="#_2-9-callerrunspolicy-拒绝策略有什么风险-如何解决"><span>2.9 <strong>CallerRunsPolicy 拒绝策略有什么风险？如何解决？</strong></span></a></h4><p><code>CallerRunsPolicy</code> 会导致调用者线程负担过重，可能影响系统的整体性能。解决方案是合理设置线程池的大小或增加队列容量。</p><h4 id="_2-10-线程池常用的阻塞队列有哪些" tabindex="-1"><a class="header-anchor" href="#_2-10-线程池常用的阻塞队列有哪些"><span>2.10 <strong>线程池常用的阻塞队列有哪些？</strong></span></a></h4><ol><li><strong>ArrayBlockingQueue</strong>：有界阻塞队列。</li><li><strong>LinkedBlockingQueue</strong>：有界或无界阻塞队列。</li><li><strong>SynchronousQueue</strong>：每次只允许一个线程插入和取出。</li></ol><h4 id="_2-11-线程池处理任务的流程了解吗" tabindex="-1"><a class="header-anchor" href="#_2-11-线程池处理任务的流程了解吗"><span>2.11 <strong>线程池处理任务的流程了解吗？</strong></span></a></h4><ol><li>任务被提交到线程池。</li><li>线程池检查是否有空闲线程处理任务。</li><li>如果没有空闲线程且队列已满，执行拒绝策略。</li><li>任务完成后，线程返回线程池，继续处理下一个任务。</li></ol><h4 id="_2-12-线程池中线程异常后-销毁还是复用" tabindex="-1"><a class="header-anchor" href="#_2-12-线程池中线程异常后-销毁还是复用"><span>2.12 <strong>线程池中线程异常后，销毁还是复用？</strong></span></a></h4><p>默认情况下，如果线程池中的线程因异常终止，则线程会被销毁，不会复用。可以通过 <code>ThreadFactory</code> 进行自定义处理。</p><h4 id="_2-13-如何给线程池命名" tabindex="-1"><a class="header-anchor" href="#_2-13-如何给线程池命名"><span>2.13 <strong>如何给线程池命名？</strong></span></a></h4><p>通过自定义 <code>ThreadFactory</code> 来命名线程：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(r);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;custom-thread&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-14-如何设定线程池的大小" tabindex="-1"><a class="header-anchor" href="#_2-14-如何设定线程池的大小"><span>2.14 <strong>如何设定线程池的大小？</strong></span></a></h4><p>线程池大小需要根据任务的特性进行调整，核心线程数和最大线程数的选择取决于负载的特点。</p><h4 id="_2-15-如何动态修改线程池的参数" tabindex="-1"><a class="header-anchor" href="#_2-15-如何动态修改线程池的参数"><span>2.15 <strong>如何动态修改线程池的参数？</strong></span></a></h4><p>可以通过 <code>ThreadPoolExecutor</code> 来动态调整线程池的大小：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ThreadPoolExecutor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setCorePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 动态调整核心线程数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 动态调整最大线程数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-16-如何设计一个能够根据任务的优先级来执行的线程池" tabindex="-1"><a class="header-anchor" href="#_2-16-如何设计一个能够根据任务的优先级来执行的线程池"><span>2.16 <strong>如何设计一个能够根据任务的优先级来执行的线程池？</strong></span></a></h4><p>可以使用 <code>PriorityBlockingQueue</code> 来实现优先级队列：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PriorityBlockingQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PriorityBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> queue)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-future" tabindex="-1"><a class="header-anchor" href="#_3-future"><span>3. <strong>Future</strong></span></a></h3><h4 id="_3-1-future-类有什么用" tabindex="-1"><a class="header-anchor" href="#_3-1-future-类有什么用"><span>3.1 <strong>Future 类有什么用？</strong></span></a></h4><p><code>Future</code> 用于表示异步计算的结果，提供了获取计算结果、取消任务等功能。</p><h4 id="_3-2-callable-和-future-有什么关系" tabindex="-1"><a class="header-anchor" href="#_3-2-callable-和-future-有什么关系"><span>3.2 <strong>Callable 和 Future 有什么关系？</strong></span></a></h4><p><code>Callable</code> 是一个可以返回结果的任务接口，而 <code>Future</code> 用于获取 <code>Callable</code> 执行结果。</p><h4 id="_3-3-completablefuture-类有什么用" tabindex="-1"><a class="header-anchor" href="#_3-3-completablefuture-类有什么用"><span>3.3 <strong>CompletableFuture 类有什么用？</strong></span></a></h4><p><code>CompletableFuture</code> 是 <code>Future</code> 的扩展，支持异步回调和组合操作，提供更多灵活的异步编程模型。</p><hr><h3 id="_4-aqs-abstractqueuedsynchronizer" tabindex="-1"><a class="header-anchor" href="#_4-aqs-abstractqueuedsynchronizer"><span>4. <strong>AQS (AbstractQueuedSynchronizer)</strong></span></a></h3><h4 id="_4-1-aqs-是什么" tabindex="-1"><a class="header-anchor" href="#_4-1-aqs-是什么"><span>4.1 <strong>AQS 是什么？</strong></span></a></h4><p>AQS 是一种用于构建同步器的框架，许多同步工具（如 <code>ReentrantLock</code>、<code>CountDownLatch</code>）都是基于 AQS 实现的。</p><h4 id="_4-2-aqs-的原理是什么" tabindex="-1"><a class="header-anchor" href="#_4-2-aqs-的原理是什么"><span>4.2 <strong>AQS 的原理是什么？</strong></span></a></h4><p>AQS 使用一个 <strong>FIFO 队列</strong> 来管理线程，通过 <strong>状态值</strong> 来控制线程的获取和释放。</p><h4 id="_4-3-semaphore-有什么用" tabindex="-1"><a class="header-anchor" href="#_4-3-semaphore-有什么用"><span>4.3 <strong>Semaphore 有什么用？</strong></span></a></h4><p><code>Semaphore</code> 是一种信号量，用于控制访问某些资源的线程数量。</p><h4 id="_4-4-semaphore-的原理是什么" tabindex="-1"><a class="header-anchor" href="#_4-4-semaphore-的原理是什么"><span>4.4 <strong>Semaphore 的原理是什么？</strong></span></a></h4><p><code>Semaphore</code> 维护一个计数器，通过调用 <code>acquire()</code> 和 <code>release()</code> 控制资源的获取与释放。</p><h4 id="_4-5-countdownlatch-有什么用" tabindex="-1"><a class="header-anchor" href="#_4-5-countdownlatch-有什么用"><span>4.5 <strong>CountDownLatch 有什么用？</strong></span></a></h4><p><code>CountDownLatch</code> 用于协调多个线程之间的同步，常用于等待一组线程完成某些操作后再执行下一步。</p><h4 id="_4-6-countdownlatch-的原理是什么" tabindex="-1"><a class="header-anchor" href="#_4-6-countdownlatch-的原理是什么"><span>4.6 <strong>CountDownLatch 的原理是什么？</strong></span></a></h4><p><code>CountDownLatch</code> 通过一个计数器来控制，计数器的值为 0 时，等待的线程会继续执行。</p><h4 id="_4-7-用过-countdownlatch-么-什么场景下用的" tabindex="-1"><a class="header-anchor" href="#_4-7-用过-countdownlatch-么-什么场景下用的"><span>4.7 <strong>用过 CountDownLatch 么？什么场景下用的？</strong></span></a></h4><p>常用于并发测试、并发初始化等场景，需要等待多个线程执行完毕后再继续。</p><h4 id="_4-8-cyclicbarrier-有什么用" tabindex="-1"><a class="header-anchor" href="#_4-8-cyclicbarrier-有什么用"><span>4.8 <strong>CyclicBarrier 有什么用？</strong></span></a></h4><p><code>CyclicBarrier</code> 使得一组线程在某个公共屏障点上同步，所有线程到达屏障点后才能继续执行。</p><h4 id="_4-9-cyclicbarrier-的原理是什么" tabindex="-1"><a class="header-anchor" href="#_4-9-cyclicbarrier-的原理是什么"><span>4.9 <strong>CyclicBarrier 的原理是什么？</strong></span></a></h4><p><code>CyclicBarrier</code> 维护一个计数器，所有线程调用 <code>await()</code> 方法，直到计数器归零，线程才会继续执行。</p><hr><h3 id="_5-虚拟线程" tabindex="-1"><a class="header-anchor" href="#_5-虚拟线程"><span>5. <strong>虚拟线程</strong></span></a></h3><p>虚拟线程是 Java 19 引入的轻量级线程，基于 <strong>项目 Loom</strong> 实现，它使得线程的创建和切换变得更加高效。通过虚拟线程，可以轻松创建大量并发任务，极大地提高了应用的并发处理能力。</p><hr>',84)],h={},t=(0,a(6262).A)(h,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,n)}]]),l=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html","title":"Java并发面试题下","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-06T00:00:00.000Z","category":["后端"],"tag":["Java","并发","后端开发技巧"],"description":"Java并发面试题下 1.1 ThreadLocal 有什么用？ ThreadLocal 为每个线程提供独立的变量副本，可以避免不同线程之间的共享和竞争，使得每个线程访问的都是自己本地的变量。 1.2 如何使用 ThreadLocal？ 可以通过以下方式使用 ThreadLocal： 1.3 ThreadLocal 原理了解吗？ ThreadLocal...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/Java/Java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Java并发面试题下"}],["meta",{"property":"og:description","content":"Java并发面试题下 1.1 ThreadLocal 有什么用？ ThreadLocal 为每个线程提供独立的变量副本，可以避免不同线程之间的共享和竞争，使得每个线程访问的都是自己本地的变量。 1.2 如何使用 ThreadLocal？ 可以通过以下方式使用 ThreadLocal： 1.3 ThreadLocal 原理了解吗？ ThreadLocal..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"后端开发技巧"}],["meta",{"property":"article:published_time","content":"2024-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java并发面试题下\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"2. 线程池","slug":"_2-线程池","link":"#_2-线程池","children":[]},{"level":3,"title":"3. Future","slug":"_3-future","link":"#_3-future","children":[]},{"level":3,"title":"4. AQS (AbstractQueuedSynchronizer)","slug":"_4-aqs-abstractqueuedsynchronizer","link":"#_4-aqs-abstractqueuedsynchronizer","children":[]},{"level":3,"title":"5. 虚拟线程","slug":"_5-虚拟线程","link":"#_5-虚拟线程","children":[]}],"git":{"createdTime":1732275083000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":5.52,"words":1656},"filePathRelative":"Java八股/Java/Java并发/Java并发面试题下.md","localizedDate":"2024年12月6日","excerpt":"\\n<hr>\\n<h4>1.1 <strong>ThreadLocal 有什么用？</strong></h4>\\n<p><code>ThreadLocal</code> 为每个线程提供独立的变量副本，可以避免不同线程之间的共享和竞争，使得每个线程访问的都是自己本地的变量。</p>\\n<h4>1.2 <strong>如何使用 ThreadLocal？</strong></h4>\\n<p>可以通过以下方式使用 <code>ThreadLocal</code>：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">// 创建 ThreadLocal 对象</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">ThreadLocal</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Integer</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> threadLocal </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> ThreadLocal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">// 设置值</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">threadLocal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">10</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">// 获取值</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Integer</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> value </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> threadLocal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">get</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">// 删除值</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">threadLocal</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">remove</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);