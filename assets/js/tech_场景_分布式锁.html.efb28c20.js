"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[8672],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},9880:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>h});var n=a(641);const l=[(0,n.Fv)('<h1 id="💡redis-分布式锁实现原理-java-完整实现教程" tabindex="-1"><a class="header-anchor" href="#💡redis-分布式锁实现原理-java-完整实现教程"><span>💡Redis 分布式锁实现原理 + Java 完整实现教程</span></a></h1><hr><h2 id="🧱-背景介绍-为什么需要分布式锁" tabindex="-1"><a class="header-anchor" href="#🧱-背景介绍-为什么需要分布式锁"><span>🧱 背景介绍：为什么需要分布式锁？</span></a></h2><p>先看常见场景：</p><table><thead><tr><th>场景</th><th>问题</th></tr></thead><tbody><tr><td>多服务部署的库存扣减</td><td>多个服务节点并发更新库存，导致库存为负</td></tr><tr><td>定时任务</td><td>多个实例执行重复任务</td></tr><tr><td>防止重复提交</td><td>用户疯狂点击按钮，创建多个重复订单</td></tr></tbody></table><p><strong>传统锁（如 ReentrantLock）仅在当前进程内有效，无法跨 JVM 实例、跨服务节点协调</strong>。</p><p>因此就需要<strong>分布式锁</strong>，确保多个应用、服务、线程间在高并发下对某一资源的互斥访问。</p><hr><h2 id="🔩-redis-实现分布式锁的基本原理" tabindex="-1"><a class="header-anchor" href="#🔩-redis-实现分布式锁的基本原理"><span>🔩 Redis 实现分布式锁的基本原理</span></a></h2><h3 id="set-命令-参数组合的魔力" tabindex="-1"><a class="header-anchor" href="#set-命令-参数组合的魔力"><span>SET 命令 + 参数组合的魔力</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lockKey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lockValue</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>含义解释：</p><ul><li><code>lockKey</code>：锁的唯一标识，例如 <code>order:lock:123</code></li><li><code>lockValue</code>：客户端生成的唯一值（如 UUID），防止误删</li><li><code>NX</code>：key 不存在才设置，保证原子性加锁</li><li><code>PX</code>：过期时间（毫秒），防止死锁</li></ul><p>👉 这条命令具备：<strong>加锁 + 原子 + 有效期</strong> 三大属性。</p><hr><h2 id="🛠️-java-手撸完整实现-基于-jedis" tabindex="-1"><a class="header-anchor" href="#🛠️-java-手撸完整实现-基于-jedis"><span>🛠️ Java 手撸完整实现（基于 Jedis）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RedisDistributedLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Jedis</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LOCK_SUCCESS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;OK&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> RELEASE_SUCCESS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RedisDistributedLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jedis;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 加锁</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tryLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> requestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> expireTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key, requestId, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, expireTimeMillis);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LOCK_SUCCESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 解锁（用 Lua 脚本确保原子性）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> releaseLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> requestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lua</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        if redis.call(&quot;get&quot;, KEYS[1]) == ARGV[1] then</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return redis.call(&quot;del&quot;, KEYS[1])</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        else</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return 0</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        end</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lua, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(requestId));</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RELEASE_SUCCESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lockKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;order:lock:789&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uuid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> UUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomUUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 加锁</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tryLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockKey, uuid, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 临界区代码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 解锁</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">releaseLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockKey, uuid);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧠-锁的关键三件事-必须掌握" tabindex="-1"><a class="header-anchor" href="#🧠-锁的关键三件事-必须掌握"><span>🧠 锁的关键三件事（必须掌握）</span></a></h2><table><thead><tr><th>点</th><th>说明</th></tr></thead><tbody><tr><td>唯一性</td><td>每个客户端必须设置唯一值，如 UUID</td></tr><tr><td>原子性</td><td>加锁用 <code>SET NX PX</code>，释放锁用 Lua</td></tr><tr><td>可重入性</td><td>Redis 本身不支持，需要业务层实现</td></tr></tbody></table><hr><h2 id="🚨-常见问题与误区-务必避坑" tabindex="-1"><a class="header-anchor" href="#🚨-常见问题与误区-务必避坑"><span>🚨 常见问题与误区（务必避坑）</span></a></h2><h3 id="❌-误区1-加锁后忘记设置过期时间" tabindex="-1"><a class="header-anchor" href="#❌-误区1-加锁后忘记设置过期时间"><span>❌ 误区1：加锁后忘记设置过期时间</span></a></h3><p>结果：</p><ul><li>程序 crash 后锁永远不释放，造成死锁</li></ul><h3 id="✅-正确做法" tabindex="-1"><a class="header-anchor" href="#✅-正确做法"><span>✅ 正确做法：</span></a></h3><ul><li>设置合理 <code>PX</code>，确保 Redis 自动删除</li></ul><hr><h3 id="❌-误区2-unlock-使用-del-lockkey" tabindex="-1"><a class="header-anchor" href="#❌-误区2-unlock-使用-del-lockkey"><span>❌ 误区2：unlock 使用 <code>del lockKey</code></span></a></h3><p>风险：</p><ul><li>若锁超时释放后被别的线程抢到，这时误删别人的锁</li></ul><h3 id="✅-正确做法-1" tabindex="-1"><a class="header-anchor" href="#✅-正确做法-1"><span>✅ 正确做法：</span></a></h3><ul><li>使用 Lua 脚本判断 <code>requestId</code> 是否匹配再删</li></ul><hr><h2 id="🏰-高可用-redlock-简析-适合-redis-多节点" tabindex="-1"><a class="header-anchor" href="#🏰-高可用-redlock-简析-适合-redis-多节点"><span>🏰 高可用 RedLock 简析（适合 Redis 多节点）</span></a></h2><p>Redlock 设计目标：</p><ul><li>多个 Redis 实例部署在不同物理机</li><li>同一客户端需在半数以上节点获取锁才算成功</li><li>若有节点挂掉也能容错</li></ul><p>原理：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>客户端并发发起 SET 命令到 N 台 Redis</span></span>\n<span class="line"><span>成功获得 M 台，M &gt;= (N/2 + 1)</span></span>\n<span class="line"><span>在有效时间内拿到，就算成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h3><ul><li>代码复杂</li><li>多 Redis 网络延迟会影响吞吐</li><li>强一致性依然无法完全保障</li></ul><p>适用于对<strong>可用性 &gt; 一致性</strong>的业务</p><hr><h2 id="🧰-实战建议" tabindex="-1"><a class="header-anchor" href="#🧰-实战建议"><span>🧰 实战建议</span></a></h2><table><thead><tr><th>建议</th><th>说明</th></tr></thead><tbody><tr><td>锁粒度控制</td><td>key 带上业务 ID，避免全局锁</td></tr><tr><td>设置过期时间</td><td>推荐 10-30s</td></tr><tr><td>锁失败降级</td><td>锁失败后可使用 MQ、异步队列重试</td></tr><tr><td>使用线程隔离</td><td>限定线程获取锁的超时时间</td></tr><tr><td>保证幂等</td><td>即使锁失效，操作也能重复执行不出错</td></tr></tbody></table><hr><h2 id="🔚-总结一句话" tabindex="-1"><a class="header-anchor" href="#🔚-总结一句话"><span>🔚 总结一句话</span></a></h2><p>Redis 实现分布式锁的核心在于：</p><ul><li>加锁要<strong>原子 + 唯一标识 + 超时时间</strong></li><li>解锁要<strong>保证是自己加的锁才释放</strong></li><li>异常处理要<strong>健壮、防止死锁</strong></li></ul><hr>',52)],t={},e=(0,a(6262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","title":"💡Redis 分布式锁实现原理 + Java 完整实现教程","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["后端"],"tag":["Java","面试","场景"],"description":"💡Redis 分布式锁实现原理 + Java 完整实现教程 🧱 背景介绍：为什么需要分布式锁？ 先看常见场景： 传统锁（如 ReentrantLock）仅在当前进程内有效，无法跨 JVM 实例、跨服务节点协调。 因此就需要分布式锁，确保多个应用、服务、线程间在高并发下对某一资源的互斥访问。 🔩 Redis 实现分布式锁的基本原理 SET 命令 +...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/tech/%E5%9C%BA%E6%99%AF/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"💡Redis 分布式锁实现原理 + Java 完整实现教程"}],["meta",{"property":"og:description","content":"💡Redis 分布式锁实现原理 + Java 完整实现教程 🧱 背景介绍：为什么需要分布式锁？ 先看常见场景： 传统锁（如 ReentrantLock）仅在当前进程内有效，无法跨 JVM 实例、跨服务节点协调。 因此就需要分布式锁，确保多个应用、服务、线程间在高并发下对某一资源的互斥访问。 🔩 Redis 实现分布式锁的基本原理 SET 命令 +..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-06T05:20:55.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"场景"}],["meta",{"property":"article:modified_time","content":"2025-10-06T05:20:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"💡Redis 分布式锁实现原理 + Java 完整实现教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-06T05:20:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"🧱 背景介绍：为什么需要分布式锁？","slug":"🧱-背景介绍-为什么需要分布式锁","link":"#🧱-背景介绍-为什么需要分布式锁","children":[]},{"level":2,"title":"🔩 Redis 实现分布式锁的基本原理","slug":"🔩-redis-实现分布式锁的基本原理","link":"#🔩-redis-实现分布式锁的基本原理","children":[{"level":3,"title":"SET 命令 + 参数组合的魔力","slug":"set-命令-参数组合的魔力","link":"#set-命令-参数组合的魔力","children":[]}]},{"level":2,"title":"🛠️ Java 手撸完整实现（基于 Jedis）","slug":"🛠️-java-手撸完整实现-基于-jedis","link":"#🛠️-java-手撸完整实现-基于-jedis","children":[{"level":3,"title":"使用方式：","slug":"使用方式","link":"#使用方式","children":[]}]},{"level":2,"title":"🧠 锁的关键三件事（必须掌握）","slug":"🧠-锁的关键三件事-必须掌握","link":"#🧠-锁的关键三件事-必须掌握","children":[]},{"level":2,"title":"🚨 常见问题与误区（务必避坑）","slug":"🚨-常见问题与误区-务必避坑","link":"#🚨-常见问题与误区-务必避坑","children":[{"level":3,"title":"❌ 误区1：加锁后忘记设置过期时间","slug":"❌-误区1-加锁后忘记设置过期时间","link":"#❌-误区1-加锁后忘记设置过期时间","children":[]},{"level":3,"title":"✅ 正确做法：","slug":"✅-正确做法","link":"#✅-正确做法","children":[]},{"level":3,"title":"❌ 误区2：unlock 使用 del lockKey","slug":"❌-误区2-unlock-使用-del-lockkey","link":"#❌-误区2-unlock-使用-del-lockkey","children":[]},{"level":3,"title":"✅ 正确做法：","slug":"✅-正确做法-1","link":"#✅-正确做法-1","children":[]}]},{"level":2,"title":"🏰 高可用 RedLock 简析（适合 Redis 多节点）","slug":"🏰-高可用-redlock-简析-适合-redis-多节点","link":"#🏰-高可用-redlock-简析-适合-redis-多节点","children":[{"level":3,"title":"缺点：","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"🧰 实战建议","slug":"🧰-实战建议","link":"#🧰-实战建议","children":[]},{"level":2,"title":"🔚 总结一句话","slug":"🔚-总结一句话","link":"#🔚-总结一句话","children":[]}],"git":{"createdTime":1752509415000,"updatedTime":1759728055000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":2}]},"readingTime":{"minutes":2.95,"words":885},"filePathRelative":"tech/场景/分布式锁.md","localizedDate":"2025年7月14日","excerpt":"\\n<hr>\\n<h2>🧱 背景介绍：为什么需要分布式锁？</h2>\\n<p>先看常见场景：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>场景</th>\\n<th>问题</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>多服务部署的库存扣减</td>\\n<td>多个服务节点并发更新库存，导致库存为负</td>\\n</tr>\\n<tr>\\n<td>定时任务</td>\\n<td>多个实例执行重复任务</td>\\n</tr>\\n<tr>\\n<td>防止重复提交</td>\\n<td>用户疯狂点击按钮，创建多个重复订单</td>\\n</tr>\\n</tbody>\\n</table>\\n<p><strong>传统锁（如 ReentrantLock）仅在当前进程内有效，无法跨 JVM 实例、跨服务节点协调</strong>。</p>","autoDesc":true}')}}]);