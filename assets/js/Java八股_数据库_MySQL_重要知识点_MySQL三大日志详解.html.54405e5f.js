"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[3196],{6262:(l,o)=>{o.A=(l,o)=>{const i=l.__vccOpts||l;for(const[l,n]of o)i[l]=n;return i}},2947:(l,o,i)=>{i.r(o),i.d(o,{comp:()=>r,data:()=>s});var n=i(641);const t=[(0,n.Fv)('<h1 id="mysql三大日志详解" tabindex="-1"><a class="header-anchor" href="#mysql三大日志详解"><span>MySQL三大日志详解</span></a></h1><hr><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span><strong>前言</strong></span></a></h2><p>MySQL 的日志机制是保障数据安全、优化性能的核心部分。主要包含以下三种日志：</p><ol><li><strong>redo log</strong>：用于<strong>恢复已提交的事务</strong>，保证事务的持久性。</li><li><strong>binlog</strong>：记录数据库的更改操作，<strong>支持数据恢复和主从复制</strong>。</li><li><strong>undo log</strong>：用于<strong>事务回滚和多版本并发控制（MVCC）</strong>。</li></ol><hr><h2 id="_1-redo-log-重做日志" tabindex="-1"><a class="header-anchor" href="#_1-redo-log-重做日志"><span><strong>1. redo log（重做日志）</strong></span></a></h2><h3 id="_1-1-什么是-redo-log" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-redo-log"><span><strong>1.1 什么是 redo log？</strong></span></a></h3><ul><li>redo log 是 MySQL 的 <strong>InnoDB 存储引擎</strong>的日志，记录数据修改的物理操作，用于恢复事务。</li><li><strong>作用</strong>： <ul><li>保证事务的 <strong>持久性（Durability，ACID）</strong>。</li><li>即使数据库发生宕机，提交的事务也能通过 redo log 恢复。</li></ul></li></ul><hr><h3 id="_1-2-刷盘时机" tabindex="-1"><a class="header-anchor" href="#_1-2-刷盘时机"><span><strong>1.2 刷盘时机</strong></span></a></h3><p>InnoDB 的数据写入是 “<strong>先写日志，再写数据</strong>”（WAL：Write Ahead Logging），redo log 提供了较快的刷盘效率。</p><h4 id="刷盘的三个时机" tabindex="-1"><a class="header-anchor" href="#刷盘的三个时机"><span><strong>刷盘的三个时机</strong>：</span></a></h4><ol><li><strong>事务提交时</strong>： <ul><li>日志写入磁盘，但数据可能仍在缓冲区。</li></ul></li><li><strong>缓冲池（Buffer Pool）满时</strong>： <ul><li>将缓冲区的脏页（已修改但未刷盘的页）写入磁盘。</li></ul></li><li><strong>后台线程定期刷新</strong>： <ul><li>默认每秒刷新一次（通过 <code>innodb_flush_log_at_timeout</code> 参数配置）。</li></ul></li></ol><hr><h3 id="_1-3-redo-log-文件组" tabindex="-1"><a class="header-anchor" href="#_1-3-redo-log-文件组"><span><strong>1.3 redo log 文件组</strong></span></a></h3><ul><li>redo log 由多个日志文件组成，组成一个 <strong>循环写日志文件组</strong>。</li><li><strong>示例</strong>：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">innodb_log_file_size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 512M </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 单个日志文件大小</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">innodb_log_files_in_group </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> -- 日志文件组数量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>日志文件写满后，循环覆盖旧日志。</li></ul><hr><h3 id="_1-4-redo-log-小结" tabindex="-1"><a class="header-anchor" href="#_1-4-redo-log-小结"><span><strong>1.4 redo log 小结</strong></span></a></h3><ul><li>redo log 是 <strong>物理日志</strong>，记录数据页的物理修改。</li><li><strong>场景</strong>： <ul><li>事务已提交但数据尚未持久化时，通过 redo log 恢复数据。</li><li>系统崩溃后，重放 redo log 以保证数据完整性。</li></ul></li></ul><hr><h2 id="_2-binlog-二进制日志" tabindex="-1"><a class="header-anchor" href="#_2-binlog-二进制日志"><span><strong>2. binlog（二进制日志）</strong></span></a></h2><h3 id="_2-1-什么是-binlog" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是-binlog"><span><strong>2.1 什么是 binlog？</strong></span></a></h3><ul><li>binlog 是 MySQL 的 <strong>逻辑日志</strong>，记录 SQL 语句或数据的更改操作。</li><li><strong>作用</strong>： <ol><li>数据恢复：通过重放 binlog 恢复数据。</li><li>主从复制：将 binlog 发送到从库，实现数据同步。</li></ol></li></ul><hr><h3 id="_2-2-记录格式" tabindex="-1"><a class="header-anchor" href="#_2-2-记录格式"><span><strong>2.2 记录格式</strong></span></a></h3><p>binlog 有三种记录格式，分别适应不同场景。</p><table><thead><tr><th>格式</th><th>特点</th></tr></thead><tbody><tr><td><strong>STATEMENT</strong></td><td>记录 SQL 语句，体积小，但可能引发非幂等问题（如 <code>NOW()</code>）。</td></tr><tr><td><strong>ROW</strong></td><td>记录行数据的变化，体积大，但最可靠（无幂等问题）。</td></tr><tr><td><strong>MIXED</strong></td><td>结合 <code>STATEMENT</code> 和 <code>ROW</code>，按需选择最优记录格式。</td></tr></tbody></table><ul><li><strong>推荐使用：ROW 格式</strong>，适合大多数场景。</li></ul><hr><h3 id="_2-3-写入机制" tabindex="-1"><a class="header-anchor" href="#_2-3-写入机制"><span><strong>2.3 写入机制</strong></span></a></h3><ul><li><strong>先写内存缓冲区</strong>，再定期写入磁盘。</li><li><strong>刷盘时机</strong>： <ol><li>事务提交时将 binlog 写入磁盘（由 <code>sync_binlog</code> 参数控制）。</li><li>主从复制时实时传递 binlog。</li></ol></li></ul><hr><h3 id="_2-4-两阶段提交" tabindex="-1"><a class="header-anchor" href="#_2-4-两阶段提交"><span><strong>2.4 两阶段提交</strong></span></a></h3><p>两阶段提交用于协调 redo log 和 binlog 的写入顺序，避免数据不一致。</p><p><strong>过程</strong>：</p><ol><li><strong>预提交</strong>：先写 redo log 的 prepare 状态。</li><li><strong>写 binlog</strong>：将事务的变更操作写入 binlog。</li><li><strong>提交</strong>：将 redo log 的状态标记为 commit。</li></ol><ul><li><strong>作用</strong>： <ul><li>如果发生宕机，数据库可以通过 redo log 和 binlog 协同恢复数据。</li></ul></li></ul><hr><h2 id="_3-undo-log" tabindex="-1"><a class="header-anchor" href="#_3-undo-log"><span><strong>3. undo log</strong></span></a></h2><h3 id="_3-1-什么是-undo-log" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是-undo-log"><span><strong>3.1 什么是 undo log？</strong></span></a></h3><ul><li>undo log 是 MySQL 的 <strong>逻辑日志</strong>，记录数据被修改前的旧值。</li><li><strong>作用</strong>： <ol><li><strong>事务回滚</strong>：未提交的事务可以通过 undo log 恢复到修改前的状态。</li><li><strong>MVCC</strong>：多版本并发控制，支持事务隔离级别（如 <code>REPEATABLE READ</code>）。</li></ol></li></ul><hr><h3 id="_3-2-undo-log-的类型" tabindex="-1"><a class="header-anchor" href="#_3-2-undo-log-的类型"><span><strong>3.2 undo log 的类型</strong></span></a></h3><ol><li><strong>插入 undo log</strong>： <ul><li>用于回滚 <code>INSERT</code> 操作。</li><li>事务提交后可立即删除。</li></ul></li><li><strong>更新 undo log</strong>： <ul><li>用于回滚 <code>UPDATE</code> 或 <code>DELETE</code> 操作。</li><li>提交后可能被 MVCC 用于快照读。</li></ul></li></ol><hr><h2 id="_4-redo-log-与-binlog-的对比" tabindex="-1"><a class="header-anchor" href="#_4-redo-log-与-binlog-的对比"><span><strong>4. redo log 与 binlog 的对比</strong></span></a></h2><table><thead><tr><th>特性</th><th>redo log</th><th>binlog</th></tr></thead><tbody><tr><td><strong>层级</strong></td><td>InnoDB 引擎内部</td><td>MySQL Server 层</td></tr><tr><td><strong>记录方式</strong></td><td>物理日志，记录数据页的修改</td><td>逻辑日志，记录 SQL 或行级变更</td></tr><tr><td><strong>作用</strong></td><td>用于崩溃恢复</td><td>数据恢复、主从复制</td></tr><tr><td><strong>刷盘时机</strong></td><td>事务提交时</td><td>配置由 <code>sync_binlog</code> 控制</td></tr><tr><td><strong>文件存储机制</strong></td><td>循环写</td><td>追加写</td></tr><tr><td><strong>存储位置</strong></td><td>redo log 文件组</td><td>binlog 文件</td></tr></tbody></table><hr><h2 id="_5-正确使用日志的建议" tabindex="-1"><a class="header-anchor" href="#_5-正确使用日志的建议"><span><strong>5. 正确使用日志的建议</strong></span></a></h2><h3 id="_5-1-配置-redo-log-刷盘频率" tabindex="-1"><a class="header-anchor" href="#_5-1-配置-redo-log-刷盘频率"><span><strong>5.1 配置 redo log 刷盘频率</strong></span></a></h3><ul><li>默认每秒刷盘一次（<code>innodb_flush_log_at_trx_commit = 1</code>）。</li><li>如果追求性能，可以配置为每秒刷盘一次（<code>innodb_flush_log_at_trx_commit = 2</code>），但可能会丢失事务。</li></ul><hr><h3 id="_5-2-配置-binlog-的刷盘频率" tabindex="-1"><a class="header-anchor" href="#_5-2-配置-binlog-的刷盘频率"><span><strong>5.2 配置 binlog 的刷盘频率</strong></span></a></h3><ul><li>默认事务提交时同步写入磁盘（<code>sync_binlog = 1</code>）。</li><li>如果追求性能，可设置为异步写入（<code>sync_binlog = 0</code>），但可能会丢失 binlog。</li></ul><hr><h3 id="_5-3-定期清理-binlog" tabindex="-1"><a class="header-anchor" href="#_5-3-定期清理-binlog"><span><strong>5.3 定期清理 binlog</strong></span></a></h3><ul><li>binlog 默认会一直存储，需要定期清理。</li><li>配置自动清理：<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GLOBAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expire_logs_days </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 自动清理 7 天前的 binlog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span><strong>6. 总结</strong></span></a></h2><ol><li><p><strong>redo log（重做日志）</strong>：</p><ul><li>保证事务的持久性，即使宕机也能恢复已提交的事务。</li><li>在事务提交时写入磁盘。</li></ul></li><li><p><strong>binlog（二进制日志）</strong>：</p><ul><li>用于数据恢复和主从复制。</li><li>记录逻辑 SQL 或行数据变更。</li></ul></li><li><p><strong>undo log（回滚日志）</strong>：</p><ul><li>用于事务回滚和 MVCC。</li><li>记录修改前的数据版本。</li></ul></li><li><p><strong>两阶段提交</strong>：</p><ul><li>redo log 和 binlog 协同工作，保证数据一致性。</li></ul></li></ol><hr>',62)],e={},r=(0,i(6262).A)(e,[["render",function(l,o){return(0,n.uX)(),(0,n.CE)("div",null,t)}]]),s=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.html","title":"MySQL三大日志详解","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-22T00:00:00.000Z","category":["后端"],"tag":["MySQL","数据库"],"description":"MySQL三大日志详解 前言 MySQL 的日志机制是保障数据安全、优化性能的核心部分。主要包含以下三种日志： redo log：用于恢复已提交的事务，保证事务的持久性。 binlog：记录数据库的更改操作，支持数据恢复和主从复制。 undo log：用于事务回滚和多版本并发控制（MVCC）。 1. redo log（重做日志） 1.1 什么是 red...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"MySQL三大日志详解"}],["meta",{"property":"og:description","content":"MySQL三大日志详解 前言 MySQL 的日志机制是保障数据安全、优化性能的核心部分。主要包含以下三种日志： redo log：用于恢复已提交的事务，保证事务的持久性。 binlog：记录数据库的更改操作，支持数据恢复和主从复制。 undo log：用于事务回滚和多版本并发控制（MVCC）。 1. redo log（重做日志） 1.1 什么是 red..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL三大日志详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"1. redo log（重做日志）","slug":"_1-redo-log-重做日志","link":"#_1-redo-log-重做日志","children":[{"level":3,"title":"1.1 什么是 redo log？","slug":"_1-1-什么是-redo-log","link":"#_1-1-什么是-redo-log","children":[]},{"level":3,"title":"1.2 刷盘时机","slug":"_1-2-刷盘时机","link":"#_1-2-刷盘时机","children":[]},{"level":3,"title":"1.3 redo log 文件组","slug":"_1-3-redo-log-文件组","link":"#_1-3-redo-log-文件组","children":[]},{"level":3,"title":"1.4 redo log 小结","slug":"_1-4-redo-log-小结","link":"#_1-4-redo-log-小结","children":[]}]},{"level":2,"title":"2. binlog（二进制日志）","slug":"_2-binlog-二进制日志","link":"#_2-binlog-二进制日志","children":[{"level":3,"title":"2.1 什么是 binlog？","slug":"_2-1-什么是-binlog","link":"#_2-1-什么是-binlog","children":[]},{"level":3,"title":"2.2 记录格式","slug":"_2-2-记录格式","link":"#_2-2-记录格式","children":[]},{"level":3,"title":"2.3 写入机制","slug":"_2-3-写入机制","link":"#_2-3-写入机制","children":[]},{"level":3,"title":"2.4 两阶段提交","slug":"_2-4-两阶段提交","link":"#_2-4-两阶段提交","children":[]}]},{"level":2,"title":"3. undo log","slug":"_3-undo-log","link":"#_3-undo-log","children":[{"level":3,"title":"3.1 什么是 undo log？","slug":"_3-1-什么是-undo-log","link":"#_3-1-什么是-undo-log","children":[]},{"level":3,"title":"3.2 undo log 的类型","slug":"_3-2-undo-log-的类型","link":"#_3-2-undo-log-的类型","children":[]}]},{"level":2,"title":"4. redo log 与 binlog 的对比","slug":"_4-redo-log-与-binlog-的对比","link":"#_4-redo-log-与-binlog-的对比","children":[]},{"level":2,"title":"5. 正确使用日志的建议","slug":"_5-正确使用日志的建议","link":"#_5-正确使用日志的建议","children":[{"level":3,"title":"5.1 配置 redo log 刷盘频率","slug":"_5-1-配置-redo-log-刷盘频率","link":"#_5-1-配置-redo-log-刷盘频率","children":[]},{"level":3,"title":"5.2 配置 binlog 的刷盘频率","slug":"_5-2-配置-binlog-的刷盘频率","link":"#_5-2-配置-binlog-的刷盘频率","children":[]},{"level":3,"title":"5.3 定期清理 binlog","slug":"_5-3-定期清理-binlog","link":"#_5-3-定期清理-binlog","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1732350028000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.17,"words":1251},"filePathRelative":"Java八股/数据库/MySQL/重要知识点/MySQL三大日志详解.md","localizedDate":"2024年11月22日","excerpt":"\\n<hr>\\n<h2><strong>前言</strong></h2>\\n<p>MySQL 的日志机制是保障数据安全、优化性能的核心部分。主要包含以下三种日志：</p>\\n<ol>\\n<li><strong>redo log</strong>：用于<strong>恢复已提交的事务</strong>，保证事务的持久性。</li>\\n<li><strong>binlog</strong>：记录数据库的更改操作，<strong>支持数据恢复和主从复制</strong>。</li>\\n<li><strong>undo log</strong>：用于<strong>事务回滚和多版本并发控制（MVCC）</strong>。</li>\\n</ol>","autoDesc":true}')}}]);