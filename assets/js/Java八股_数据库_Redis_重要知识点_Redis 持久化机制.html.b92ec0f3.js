"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[8787],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},5162:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>d,data:()=>r});var a=s(641);const l=[(0,a.Fv)('<h1 id="redis-持久化机制" tabindex="-1"><a class="header-anchor" href="#redis-持久化机制"><span>Redis 持久化机制</span></a></h1><p>Redis 是一个高性能的内存数据存储系统，虽然它主要是作为缓存使用，但为了在系统重启或崩溃时能够恢复数据，它提供了两种主要的持久化机制：<strong>RDB</strong>（Redis 数据库）和 <strong>AOF</strong>（Append-Only File）。本文将详细讲解这两种持久化机制的工作原理、优缺点以及如何选择。</p><hr><h3 id="_1-rdb-持久化" tabindex="-1"><a class="header-anchor" href="#_1-rdb-持久化"><span>1. RDB 持久化</span></a></h3><h4 id="_1-1-什么是-rdb-持久化" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-rdb-持久化"><span>1.1 什么是 RDB 持久化？</span></a></h4><p>RDB（Redis DataBase）持久化是一种通过创建数据快照（Snapshot）来保存 Redis 数据库的状态的机制。它会将当前的数据库内容快照存储到磁盘中的一个二进制文件（通常是 <code>dump.rdb</code>）。在执行 RDB 持久化时，Redis 会将内存中的数据以某种方式写入到磁盘，以便在 Redis 重启时可以恢复数据。</p><h4 id="_1-2-rdb-创建快照时会阻塞主线程吗" tabindex="-1"><a class="header-anchor" href="#_1-2-rdb-创建快照时会阻塞主线程吗"><span>1.2 RDB 创建快照时会阻塞主线程吗？</span></a></h4><p>创建 RDB 快照会创建一个子进程，该进程会在后台将数据写入到磁盘，而主线程不会被阻塞。虽然主线程发起了快照的创建，但是由于创建快照的操作是在子进程中完成的，所以不会影响主线程的执行。这意味着在快照创建过程中，Redis 仍然可以正常响应客户端的请求。</p><ul><li><strong>fork()</strong>：Redis 在创建 RDB 快照时，会调用 <code>fork()</code> 系统调用创建一个子进程，子进程将内存数据写入到磁盘文件，而父进程继续处理客户端的请求。</li></ul><h4 id="_1-3-rdb-的优缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-rdb-的优缺点"><span>1.3 RDB 的优缺点</span></a></h4><ul><li><p><strong>优点</strong>：</p><ul><li>性能高：RDB 在创建快照时使用的是子进程，因此不会阻塞主线程，且适合于大量数据的持久化。</li><li>适用于备份：RDB 文件较小，适合用作定期的全量备份。</li><li>恢复速度快：恢复 RDB 文件时，比 AOF 恢复要快很多，因为 RDB 文件包含了完整的数据快照，不需要重新执行所有命令。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>数据丢失风险：RDB 的持久化是基于快照的，在某些配置下（例如较长的持久化周期），可能会丢失最近几次操作的数据。</li><li>持久化时性能下降：创建 RDB 快照时，Redis 会生成一个新的子进程，这个过程会占用一定的资源，可能会影响性能。</li></ul></li></ul><h4 id="_1-4-rdb-持久化的触发条件" tabindex="-1"><a class="header-anchor" href="#_1-4-rdb-持久化的触发条件"><span>1.4 RDB 持久化的触发条件</span></a></h4><p>RDB 持久化并不是持续不断的，它是基于某些条件触发的。Redis 提供了三种常用的触发条件：</p><ul><li><p><strong>定时触发</strong>：可以通过 <code>redis.conf</code> 文件中的配置来设置时间间隔。例如，可以设置在 5 分钟内如果有超过 1000 个键被修改，则触发 RDB 快照。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>手动触发</strong>：可以通过 Redis 命令手动触发 RDB 持久化：</p><ul><li><code>BGSAVE</code>：在后台创建 RDB 快照（会创建子进程）。</li><li><code>SAVE</code>：在前台创建 RDB 快照（会阻塞 Redis，直到快照完成）。</li></ul></li></ul><hr><h3 id="_2-aof-持久化" tabindex="-1"><a class="header-anchor" href="#_2-aof-持久化"><span>2. AOF 持久化</span></a></h3><h4 id="_2-1-什么是-aof-持久化" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是-aof-持久化"><span>2.1 什么是 AOF 持久化？</span></a></h4><p>AOF（Append Only File）持久化是另一种将 Redis 数据写入磁盘的机制。AOF 的基本原理是将每个写操作追加到一个日志文件（通常是 <code>appendonly.aof</code>），每当执行一个写命令时，Redis 会将这个命令以原始的格式追加到 AOF 文件中。这样，Redis 就可以通过重新执行 AOF 文件中的所有写命令来恢复数据库的状态。</p><h4 id="_2-2-aof-工作基本流程" tabindex="-1"><a class="header-anchor" href="#_2-2-aof-工作基本流程"><span>2.2 AOF 工作基本流程</span></a></h4><p>AOF 的工作流程如下：</p><ol><li>客户端执行写操作（如 SET、DEL、HSET 等）时，Redis 将这些操作以明文的形式（即原始命令）追加到 AOF 文件中。</li><li>Redis 会定期将内存中的数据同步到磁盘上的 AOF 文件，以保证数据的持久化。</li><li>在 Redis 重启时，Redis 会通过重新执行 AOF 文件中的写命令来恢复数据。</li></ol><h4 id="_2-3-aof-持久化方式有哪些" tabindex="-1"><a class="header-anchor" href="#_2-3-aof-持久化方式有哪些"><span>2.3 AOF 持久化方式有哪些？</span></a></h4><p>AOF 允许设置不同的持久化方式，通过 <code>appendfsync</code> 配置来控制数据写入磁盘的策略。它有三种模式：</p><ol><li><p><strong>每次操作都写入磁盘</strong>（<code>appendfsync always</code>）：</p><ul><li>每次写操作后都会将 AOF 文件同步到磁盘。虽然这种方式可以确保数据不丢失，但会影响性能。</li></ul></li><li><p><strong>每秒钟同步一次</strong>（<code>appendfsync everysec</code>）：</p><ul><li>Redis 每秒钟将数据同步一次。这是 AOF 的默认配置，它在保证较高持久化保证的同时，提供了较好的性能。</li></ul></li><li><p><strong>不主动同步</strong>（<code>appendfsync no</code>）：</p><ul><li>Redis 将写操作追加到 AOF 文件后，不进行主动的同步操作，而是由操作系统的文件系统来控制写入时机。这种方式性能最优，但风险较高，可能会丢失数据。</li></ul></li></ol><h4 id="_2-4-aof-为什么是在执行完命令之后记录日志" tabindex="-1"><a class="header-anchor" href="#_2-4-aof-为什么是在执行完命令之后记录日志"><span>2.4 AOF 为什么是在执行完命令之后记录日志？</span></a></h4><p>AOF 记录日志是在执行命令后进行的，原因是为了确保数据的一致性和持久化。命令执行后，将会直接写入到 AOF 文件，这样做的好处是：</p><ul><li><strong>数据的持久性</strong>：确保 Redis 重启后，可以恢复到执行命令之后的状态。</li><li><strong>原子性</strong>：通过追加日志的方式，可以保证每个命令是原子执行的。</li></ul><h4 id="_2-5-aof-重写了解吗" tabindex="-1"><a class="header-anchor" href="#_2-5-aof-重写了解吗"><span>2.5 AOF 重写了解吗？</span></a></h4><p>AOF 重写（AOF Rewrite）是 AOF 持久化的一个重要特性，它用于减少 AOF 文件的大小。在 Redis 中，随着时间的推移，AOF 文件会变得越来越大，AOF 重写就是通过将当前内存中的数据重新写入 AOF 文件来替换旧的命令，从而减少 AOF 文件的大小。</p><ul><li><strong>触发条件</strong>：当 AOF 文件的大小超过某个阈值时，Redis 会触发 AOF 重写操作。</li><li><strong>过程</strong>：AOF 重写过程是通过创建一个新的 AOF 文件来完成的，Redis 会在后台异步进行，不会影响正常操作。</li></ul><h4 id="_2-6-aof-校验机制" tabindex="-1"><a class="header-anchor" href="#_2-6-aof-校验机制"><span>2.6 AOF 校验机制</span></a></h4><p>AOF 校验机制是 Redis 在恢复数据时的一种验证机制。AOF 文件在恢复时，会逐条执行文件中的命令并恢复状态。如果在恢复过程中发现某个命令不再有效或格式不正确，Redis 会抛出错误并停止恢复。</p><hr><h3 id="_3-redis-4-0-对于持久化机制做了什么优化" tabindex="-1"><a class="header-anchor" href="#_3-redis-4-0-对于持久化机制做了什么优化"><span>3. Redis 4.0 对于持久化机制做了什么优化？</span></a></h3><p>Redis 4.0 主要针对持久化机制做了以下几个优化：</p><ol><li><strong>AOF 重写的性能优化</strong>：通过优化 AOF 重写过程中的内存操作，Redis 4.0 可以更加高效地进行 AOF 文件的压缩。</li><li><strong>增量同步优化</strong>：Redis 4.0 提供了更高效的增量同步机制，减少了 AOF 文件在写入过程中的延迟。</li><li><strong>RDB 和 AOF 的混合持久化</strong>：Redis 4.0 支持 RDB 和 AOF 持久化机制的混合使用，可以在使用 AOF 持久化的同时定期创建 RDB 快照，提供更高的数据安全性。</li></ol><hr><h3 id="_4-如何选择-rdb-和-aof" tabindex="-1"><a class="header-anchor" href="#_4-如何选择-rdb-和-aof"><span>4. 如何选择 RDB 和 AOF？</span></a></h3><p>选择 RDB 还是 AOF 取决于具体的应用场景：</p><ul><li><p><strong>选择 RDB</strong>：</p><ul><li>如果你不太关心数据丢失，并且更注重性能，RDB 适合用于定期的全量备份。</li><li>如果你希望数据恢复速度快，RDB 会更合适。</li></ul></li><li><p><strong>选择 AOF</strong>：</p><ul><li>如果你需要更高的数据持久化保证，AOF 适合用于需要精确恢复的场景。</li><li>如果你不介意 AOF 文件稍微增大，AOF 是一个不错的选择，尤其适合频繁修改数据的场景。</li></ul></li><li><p><strong>混合使用 RDB 和 AOF</strong>：</p><ul><li>Redis 允许同时开启 RDB 和 AOF 机制，这样你可以获得两者的优势，同时保证较高的持久性和性能。</li></ul></li></ul><hr>',41)],n={},d=(0,s(6262).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,l)}]]),r=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6.html","title":"Redis 持久化机制","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-01T00:00:00.000Z","category":["后端"],"tag":["Redis","数据库"],"description":"Redis 持久化机制 Redis 是一个高性能的内存数据存储系统，虽然它主要是作为缓存使用，但为了在系统重启或崩溃时能够恢复数据，它提供了两种主要的持久化机制：RDB（Redis 数据库）和 AOF（Append-Only File）。本文将详细讲解这两种持久化机制的工作原理、优缺点以及如何选择。 1. RDB 持久化 1.1 什么是 RDB 持久化...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Redis 持久化机制"}],["meta",{"property":"og:description","content":"Redis 持久化机制 Redis 是一个高性能的内存数据存储系统，虽然它主要是作为缓存使用，但为了在系统重启或崩溃时能够恢复数据，它提供了两种主要的持久化机制：RDB（Redis 数据库）和 AOF（Append-Only File）。本文将详细讲解这两种持久化机制的工作原理、优缺点以及如何选择。 1. RDB 持久化 1.1 什么是 RDB 持久化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-12-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 持久化机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"1. RDB 持久化","slug":"_1-rdb-持久化","link":"#_1-rdb-持久化","children":[]},{"level":3,"title":"2. AOF 持久化","slug":"_2-aof-持久化","link":"#_2-aof-持久化","children":[]},{"level":3,"title":"3. Redis 4.0 对于持久化机制做了什么优化？","slug":"_3-redis-4-0-对于持久化机制做了什么优化","link":"#_3-redis-4-0-对于持久化机制做了什么优化","children":[]},{"level":3,"title":"4. 如何选择 RDB 和 AOF？","slug":"_4-如何选择-rdb-和-aof","link":"#_4-如何选择-rdb-和-aof","children":[]}],"git":{"createdTime":1733145681000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":6.48,"words":1945},"filePathRelative":"Java八股/数据库/Redis/重要知识点/Redis 持久化机制.md","localizedDate":"2024年12月1日","excerpt":"\\n<p>Redis 是一个高性能的内存数据存储系统，虽然它主要是作为缓存使用，但为了在系统重启或崩溃时能够恢复数据，它提供了两种主要的持久化机制：<strong>RDB</strong>（Redis 数据库）和 <strong>AOF</strong>（Append-Only File）。本文将详细讲解这两种持久化机制的工作原理、优缺点以及如何选择。</p>\\n<hr>\\n<h3>1. RDB 持久化</h3>\\n<h4>1.1 什么是 RDB 持久化？</h4>\\n<p>RDB（Redis DataBase）持久化是一种通过创建数据快照（Snapshot）来保存 Redis 数据库的状态的机制。它会将当前的数据库内容快照存储到磁盘中的一个二进制文件（通常是 <code>dump.rdb</code>）。在执行 RDB 持久化时，Redis 会将内存中的数据以某种方式写入到磁盘，以便在 Redis 重启时可以恢复数据。</p>","autoDesc":true}')}}]);