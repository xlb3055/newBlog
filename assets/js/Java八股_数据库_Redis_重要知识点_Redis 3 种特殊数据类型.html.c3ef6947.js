"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[998],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},5361:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>l,data:()=>r});var a=s(641);const t=[(0,a.Fv)('<h1 id="redis-3-种特殊数据类型" tabindex="-1"><a class="header-anchor" href="#redis-3-种特殊数据类型"><span>Redis 3 种特殊数据类型</span></a></h1><h3 id="redis-扩展数据类型详解" tabindex="-1"><a class="header-anchor" href="#redis-扩展数据类型详解"><span>Redis 扩展数据类型详解</span></a></h3><p>除了基本的五种数据类型，Redis 还提供了一些高级的扩展数据类型，例如 <strong>Bitmap</strong>（位图）、<strong>HyperLogLog</strong>（基数统计）、和 <strong>Geospatial</strong>（地理位置），它们非常适合处理特定场景中的问题。下面详细讲解这些扩展数据类型。</p><hr><h3 id="_1-bitmap-位图" tabindex="-1"><a class="header-anchor" href="#_1-bitmap-位图"><span>1. Bitmap （位图）</span></a></h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><ul><li><strong>Bitmap</strong> 是一种基于字符串实现的数据结构，使用位（bit）来存储数据。</li><li>每个位可以是 <code>0</code> 或 <code>1</code>，因此适合用来表示二进制状态（如是否登录、是否签到）。</li><li><strong>位图的优势</strong>在于，它非常节省空间，特别是当需要存储大量布尔值时。</li></ul><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h4><ul><li><strong>SETBIT key offset value</strong>：设置位图中指定偏移位置的值（<code>offset</code> 从 0 开始，<code>value</code> 可以是 <code>0</code> 或 <code>1</code>）。</li><li><strong>GETBIT key offset</strong>：获取位图中指定偏移位置的值。</li><li><strong>BITCOUNT key [start end]</strong>：统计位图中值为 <code>1</code> 的位的数量，可以指定范围。</li><li><strong>BITOP operation destkey key1 key2 ...</strong>：对一个或多个位图执行按位操作，支持 <code>AND</code>、<code>OR</code>、<code>XOR</code> 和 <code>NOT</code>。</li><li><strong>BITPOS key bit [start end]</strong>：返回位图中第一个值等于 <code>bit</code> 的位的位置。</li></ul><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ol><li><p><strong>用户签到系统</strong>：</p><ul><li>使用位图记录某个用户在一个月内的签到状态，例如，每天的签到状态可以用一个位表示。</li></ul></li><li><p><strong>活动状态管理</strong>：</p><ul><li>使用位图记录一个系统中某个服务是否在线、某个活动是否已完成等。</li></ul></li><li><p><strong>权限管理</strong>：</p><ul><li>将用户权限映射到位图中，每个位表示某种权限是否启用。</li></ul></li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><div class="language-redis line-numbers-mode" data-highlighter="shiki" data-ext="redis" data-title="redis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SETBIT user:1:sign 0 1     # 设置用户 1 的第 1 天签到状态为 1</span></span>\n<span class="line"><span>SETBIT user:1:sign 1 0     # 设置用户 1 的第 2 天签到状态为 0</span></span>\n<span class="line"><span>BITCOUNT user:1:sign       # 统计用户 1 签到的天数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-hyperloglog-基数统计" tabindex="-1"><a class="header-anchor" href="#_2-hyperloglog-基数统计"><span>2. HyperLogLog（基数统计）</span></a></h3><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h4><ul><li><strong>HyperLogLog</strong> 是一种用于估算基数的概率性数据结构，适合用来统计大规模数据的独立元素数量（如网站的 UV）。</li><li>它的特点是： <ul><li>占用内存极小，每个 HyperLogLog 只需要 12 KB 的内存。</li><li>是基于概率的，结果可能有误差，误差率约为 0.81%。</li></ul></li></ul><h4 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1"><span>常用命令</span></a></h4><ul><li><strong>PFADD key element [element ...]</strong>：向 HyperLogLog 添加元素。</li><li><strong>PFCOUNT key [key ...]</strong>：返回 HyperLogLog 的基数估算值（即独立元素数量）。</li><li><strong>PFMERGE destkey sourcekey [sourcekey ...]</strong>：合并多个 HyperLogLog 为一个新的 HyperLogLog。</li></ul><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h4><ol><li><p><strong>UV 统计</strong>：</p><ul><li>用于统计网站的独立访客数量，即使访客数量非常庞大，也能快速估算。</li></ul></li><li><p><strong>独立设备计数</strong>：</p><ul><li>统计一段时间内使用某个应用的独立设备数量。</li></ul></li><li><p><strong>大数据去重</strong>：</p><ul><li>快速统计大规模数据中独立元素的数量，而无需存储完整数据。</li></ul></li></ol><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><div class="language-redis line-numbers-mode" data-highlighter="shiki" data-ext="redis" data-title="redis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>PFADD visits user1 user2 user3   # 添加用户访问记录</span></span>\n<span class="line"><span>PFCOUNT visits                  # 统计访问的独立用户数量</span></span>\n<span class="line"><span>PFMERGE all_visits visits1 visits2   # 合并多个 HyperLogLog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-geospatial-地理位置" tabindex="-1"><a class="header-anchor" href="#_3-geospatial-地理位置"><span>3. Geospatial (地理位置)</span></a></h3><h4 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2"><span>介绍</span></a></h4><ul><li>Redis 的地理位置类型允许存储、查询地理位置（经纬度）数据。</li><li>它基于 GeoHash 算法实现，支持快速的半径查询、距离计算等功能。</li><li>使用 Redis 的地理位置命令，可以轻松实现诸如附近的人、商家推荐等功能。</li></ul><h4 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2"><span>常用命令</span></a></h4><ul><li><strong>GEOADD key longitude latitude member [longitude latitude member ...]</strong>：向地理位置集合中添加一个或多个元素。</li><li><strong>GEODIST key member1 member2 [unit]</strong>：计算两个元素之间的距离，单位可以是 <code>m</code>（米）、<code>km</code>（千米）、<code>mi</code>（英里）、<code>ft</code>（英尺）。</li><li><strong>GEORADIUS key longitude latitude radius [unit] [WITHCOORD] [WITHDIST] [ASC|DESC]</strong>：根据给定的经纬度和半径，查询范围内的元素。</li><li><strong>GEORADIUSBYMEMBER key member radius [unit]</strong>：以某个元素为中心，查询范围内的其他元素。</li><li><strong>GEOHASH key member [member ...]</strong>：返回地理位置元素的 GeoHash 值。</li><li><strong>GEOPOS key member [member ...]</strong>：返回一个或多个元素的经纬度。</li></ul><h4 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2"><span>应用场景</span></a></h4><ol><li><p><strong>附近的人</strong>：</p><ul><li>根据用户的位置，快速找到一定范围内的其他用户。</li></ul></li><li><p><strong>LBS 服务</strong>：</p><ul><li>用于商家推荐、酒店定位等位置服务。</li></ul></li><li><p><strong>配送距离计算</strong>：</p><ul><li>快速计算配送员与用户之间的距离，或筛选最近的配送员。</li></ul></li></ol><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例</span></a></h4><div class="language-redis line-numbers-mode" data-highlighter="shiki" data-ext="redis" data-title="redis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GEOADD places 13.361389 38.115556 &quot;Palermo&quot;   # 添加地理位置</span></span>\n<span class="line"><span>GEOADD places 15.087269 37.502669 &quot;Catania&quot;   # 添加地理位置</span></span>\n<span class="line"><span>GEODIST places Palermo Catania km             # 计算两个地点的距离（单位：千米）</span></span>\n<span class="line"><span>GEORADIUS places 15 37 100 km WITHDIST        # 查询半径 100km 内的地点，返回距离</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><table><thead><tr><th>数据类型</th><th>介绍</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Bitmap</strong></td><td>位操作结构，存储布尔值（0 或 1）</td><td>签到系统、状态管理、权限管理</td></tr><tr><td><strong>HyperLogLog</strong></td><td>基数统计，快速估算独立元素数量</td><td>UV 统计、大规模数据去重</td></tr><tr><td><strong>Geospatial</strong></td><td>地理位置数据类型，支持经纬度存储与查询</td><td>附近的人、LBS 服务、距离计算</td></tr></tbody></table><p>Redis 的扩展数据类型扩展了它的应用场景，适用于需要高效、低内存消耗的复杂问题，例如海量数据统计和地理位置计算。在实际项目中，选择合适的数据结构和命令能够显著提升系统性能。</p>',37)],n={},l=(0,s(6262).A)(n,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,t)}]]),r=JSON.parse('{"path":"/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%203%20%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"Redis 3 种特殊数据类型","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-30T00:00:00.000Z","category":["后端"],"tag":["Redis","数据库"],"description":"Redis 3 种特殊数据类型 Redis 扩展数据类型详解 除了基本的五种数据类型，Redis 还提供了一些高级的扩展数据类型，例如 Bitmap（位图）、HyperLogLog（基数统计）、和 Geospatial（地理位置），它们非常适合处理特定场景中的问题。下面详细讲解这些扩展数据类型。 1. Bitmap （位图） 介绍 Bitmap 是一种...","head":[["meta",{"property":"og:url","content":"https://xlb3055.github.io/newBlog/Java%E5%85%AB%E8%82%A1/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/Redis%203%20%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Redis 3 种特殊数据类型"}],["meta",{"property":"og:description","content":"Redis 3 种特殊数据类型 Redis 扩展数据类型详解 除了基本的五种数据类型，Redis 还提供了一些高级的扩展数据类型，例如 Bitmap（位图）、HyperLogLog（基数统计）、和 Geospatial（地理位置），它们非常适合处理特定场景中的问题。下面详细讲解这些扩展数据类型。 1. Bitmap （位图） 介绍 Bitmap 是一种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T06:24:41.000Z"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T06:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 3 种特殊数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T06:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[{"level":3,"title":"Redis 扩展数据类型详解","slug":"redis-扩展数据类型详解","link":"#redis-扩展数据类型详解","children":[]},{"level":3,"title":"1. Bitmap （位图）","slug":"_1-bitmap-位图","link":"#_1-bitmap-位图","children":[]},{"level":3,"title":"2. HyperLogLog（基数统计）","slug":"_2-hyperloglog-基数统计","link":"#_2-hyperloglog-基数统计","children":[]},{"level":3,"title":"3. Geospatial (地理位置)","slug":"_3-geospatial-地理位置","link":"#_3-geospatial-地理位置","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1733029796000,"updatedTime":1749191081000,"contributors":[{"name":"bin","email":"13598151+binxlb@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1310},"filePathRelative":"Java八股/数据库/Redis/重要知识点/Redis 3 种特殊数据类型.md","localizedDate":"2024年11月30日","excerpt":"\\n<h3>Redis 扩展数据类型详解</h3>\\n<p>除了基本的五种数据类型，Redis 还提供了一些高级的扩展数据类型，例如 <strong>Bitmap</strong>（位图）、<strong>HyperLogLog</strong>（基数统计）、和 <strong>Geospatial</strong>（地理位置），它们非常适合处理特定场景中的问题。下面详细讲解这些扩展数据类型。</p>\\n<hr>\\n<h3>1. Bitmap （位图）</h3>\\n<h4>介绍</h4>\\n<ul>\\n<li><strong>Bitmap</strong> 是一种基于字符串实现的数据结构，使用位（bit）来存储数据。</li>\\n<li>每个位可以是 <code>0</code> 或 <code>1</code>，因此适合用来表示二进制状态（如是否登录、是否签到）。</li>\\n<li><strong>位图的优势</strong>在于，它非常节省空间，特别是当需要存储大量布尔值时。</li>\\n</ul>","autoDesc":true}')}}]);